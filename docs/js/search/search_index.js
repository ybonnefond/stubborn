var COMPODOC_SEARCH_INDEX = {
  index: {
    version: '2.3.8',
    fields: ['title', 'body'],
    fieldVectors: [
      ['title/interfaces/BodyDefinitionArray.html', [0, 0.687, 1, 1.095]],
      [
        'body/interfaces/BodyDefinitionArray.html',
        [
          0,
          0.918,
          1,
          1.463,
          2,
          1.005,
          3,
          0.742,
          4,
          0.742,
          5,
          0.636,
          6,
          1.005,
          7,
          2.352,
          8,
          2.352,
          9,
          1.071,
          10,
          0.061,
          11,
          2.004,
          12,
          1.697,
          13,
          1.175,
          14,
          1.451,
          15,
          0.918,
          16,
          1.602,
          17,
          1.005,
          18,
          1.85,
          19,
          0.947,
          20,
          1.697,
          21,
          1.729,
          22,
          1.699,
          23,
          1.991,
          24,
          1.247,
          25,
          1.697,
          26,
          2.004,
          27,
          2.63,
          28,
          1.247,
          29,
          1.388,
          30,
          1.005,
          31,
          1.388,
          32,
          1.175,
          33,
          0.636,
          34,
          1.388,
          35,
          1.388,
          36,
          1.175,
          37,
          1.257,
          38,
          1.451,
          39,
          1.175,
          40,
          1.388,
          41,
          1.078,
          42,
          1.697,
          43,
          2.409,
          44,
          1.005,
          45,
          2.352,
          46,
          1.175,
          47,
          1.991,
          48,
          1.388,
          49,
          1.388,
          50,
          1.451,
          51,
          1.521,
          52,
          1.388,
          53,
          1.175,
          54,
          0.863,
          55,
          1.175,
          56,
          1.005,
          57,
          1.175,
          58,
          1.005,
          59,
          2.312,
          60,
          1.697,
          61,
          1.697,
          62,
          1.991,
          63,
          1.005,
          64,
          1.991,
          65,
          1.175,
          66,
          1.175,
          67,
          1.697,
          68,
          1.388,
          69,
          1.697,
          70,
          1.697,
          71,
          1.865,
          72,
          1.697,
          73,
          0.38,
          74,
          1.175,
          75,
          1.388,
          76,
          1.451,
          77,
          1.697,
          78,
          1.697,
          79,
          1.697,
          80,
          1.697,
          81,
          1.697,
          82,
          1.697,
          83,
          1.697,
          84,
          1.247,
          85,
          1.175,
          86,
          0.742,
          87,
          1.388,
          88,
          1.388,
          89,
          1.451,
          90,
          1.697,
          91,
          1.388,
          92,
          0.742,
          93,
          1.175,
          94,
          2.004,
          95,
          1.005,
          96,
          1.175,
          97,
          1.175,
          98,
          1.175,
          99,
          1.175,
          100,
          0.863,
          101,
          0.024,
          102,
          0.034,
          103,
          0.024,
        ],
      ],
      ['title/classes/Debugger.html', [104, 0.941, 105, 1.761]],
      [
        'body/classes/Debugger.html',
        [
          3,
          1.019,
          4,
          1.019,
          5,
          0.873,
          9,
          1.733,
          10,
          0.061,
          15,
          0.973,
          18,
          1.019,
          19,
          0.682,
          37,
          1.575,
          38,
          2.011,
          51,
          1.677,
          54,
          1.185,
          73,
          0.521,
          76,
          2.011,
          84,
          1.55,
          85,
          2.11,
          86,
          1.485,
          92,
          1.019,
          96,
          1.613,
          101,
          0.033,
          102,
          0.043,
          103,
          0.033,
          104,
          1.019,
          105,
          2.492,
          106,
          1.613,
          107,
          2.297,
          108,
          2.656,
          109,
          4.471,
          110,
          3.005,
          111,
          1.905,
          112,
          2.891,
          113,
          2.011,
          114,
          2.891,
          115,
          1.805,
          116,
          2.11,
          117,
          2.11,
          118,
          2.891,
          119,
          2.492,
          120,
          3.782,
          121,
          2.271,
          122,
          2.891,
          123,
          2.297,
          124,
          2.891,
          125,
          2.297,
          126,
          2.891,
          127,
          2.297,
          128,
          2.891,
          129,
          2.297,
          130,
          2.891,
          131,
          2.297,
          132,
          2.891,
          133,
          2.352,
          134,
          2.297,
          135,
          1.613,
          136,
          3.782,
          137,
          3.782,
          138,
          3.782,
          139,
          3.782,
          140,
          4.215,
          141,
          2.891,
          142,
          2.11,
          143,
          2.297,
          144,
          1.613,
          145,
          4.215,
          146,
          2.891,
          147,
          2.891,
          148,
          2.891,
          149,
          2.891,
          150,
          2.891,
          151,
          2.891,
          152,
          2.891,
          153,
          2.891,
          154,
          2.891,
          155,
          2.891,
          156,
          2.891,
          157,
          2.891,
          158,
          2.297,
          159,
          2.891,
        ],
      ],
      ['title/interfaces/DiffError.html', [0, 0.687, 100, 1.095]],
      [
        'body/interfaces/DiffError.html',
        [
          0,
          0.896,
          1,
          1.209,
          2,
          0.964,
          3,
          0.712,
          4,
          0.712,
          5,
          0.61,
          6,
          0.964,
          7,
          1.945,
          8,
          1.945,
          9,
          1.04,
          10,
          0.061,
          11,
          1.945,
          12,
          1.646,
          13,
          1.127,
          14,
          1.829,
          15,
          0.896,
          16,
          1.571,
          17,
          0.964,
          18,
          1.845,
          19,
          0.95,
          20,
          1.646,
          21,
          1.759,
          22,
          1.671,
          23,
          1.944,
          24,
          1.571,
          25,
          1.646,
          26,
          1.945,
          27,
          2.67,
          28,
          1.209,
          29,
          1.332,
          30,
          0.964,
          31,
          1.332,
          32,
          1.127,
          33,
          0.61,
          34,
          1.332,
          35,
          1.332,
          36,
          1.127,
          37,
          1.228,
          38,
          1.408,
          39,
          1.127,
          40,
          1.332,
          41,
          1.285,
          42,
          1.646,
          43,
          2.375,
          44,
          0.964,
          45,
          2.297,
          46,
          1.127,
          47,
          1.944,
          48,
          1.332,
          49,
          1.332,
          50,
          1.945,
          51,
          1.5,
          52,
          1.332,
          53,
          1.127,
          54,
          0.828,
          55,
          1.127,
          56,
          0.964,
          57,
          1.127,
          58,
          0.964,
          59,
          2.274,
          60,
          1.646,
          61,
          1.646,
          62,
          1.944,
          63,
          0.964,
          64,
          1.944,
          65,
          1.127,
          66,
          1.127,
          67,
          1.646,
          68,
          1.332,
          69,
          1.646,
          70,
          1.646,
          71,
          1.829,
          72,
          1.646,
          73,
          0.532,
          74,
          1.127,
          75,
          1.332,
          76,
          1.408,
          77,
          1.646,
          78,
          1.646,
          79,
          1.646,
          80,
          1.646,
          81,
          1.646,
          82,
          1.646,
          83,
          1.646,
          84,
          1.671,
          85,
          1.127,
          86,
          0.712,
          87,
          1.332,
          88,
          1.332,
          89,
          1.408,
          90,
          1.646,
          91,
          1.332,
          92,
          0.712,
          93,
          1.127,
          94,
          1.945,
          95,
          0.964,
          96,
          1.127,
          97,
          1.127,
          98,
          1.127,
          99,
          1.127,
          100,
          1.209,
          101,
          0.023,
          102,
          0.033,
          103,
          0.023,
          160,
          1.945,
        ],
      ],
      ['title/interfaces/Emitter.html', [0, 0.687, 161, 1.49]],
      [
        'body/interfaces/Emitter.html',
        [
          0,
          0.877,
          2,
          1.626,
          3,
          1.201,
          4,
          1.201,
          5,
          1.029,
          10,
          0.059,
          15,
          1.08,
          18,
          1.201,
          19,
          0.821,
          33,
          1.374,
          73,
          0.615,
          92,
          1.75,
          101,
          0.039,
          102,
          0.048,
          103,
          0.039,
          113,
          2.171,
          115,
          2.171,
          116,
          2.539,
          117,
          2.539,
          161,
          2.343,
          162,
          2.708,
          163,
          3.336,
          164,
          3.336,
          165,
          4.07,
          166,
          4.07,
          167,
          3.946,
          168,
          3.409,
          169,
          2.999,
          170,
          3.336,
          171,
          3.409,
          172,
          3.336,
          173,
          3.409,
        ],
      ],
      ['title/interfaces/JsonArray.html', [0, 0.687, 28, 1.095]],
      [
        'body/interfaces/JsonArray.html',
        [
          0,
          0.918,
          1,
          1.247,
          2,
          1.005,
          3,
          0.742,
          4,
          0.742,
          5,
          0.636,
          6,
          1.005,
          7,
          2.352,
          8,
          2.352,
          9,
          1.071,
          10,
          0.061,
          11,
          2.004,
          12,
          1.697,
          13,
          1.175,
          14,
          1.451,
          15,
          0.918,
          16,
          1.602,
          17,
          1.005,
          18,
          1.85,
          19,
          0.947,
          20,
          1.697,
          21,
          1.729,
          22,
          1.699,
          23,
          1.991,
          24,
          1.247,
          25,
          1.697,
          26,
          2.004,
          27,
          2.63,
          28,
          1.463,
          29,
          1.388,
          30,
          1.005,
          31,
          1.388,
          32,
          1.175,
          33,
          0.636,
          34,
          1.388,
          35,
          1.388,
          36,
          1.175,
          37,
          1.257,
          38,
          1.451,
          39,
          1.175,
          40,
          1.388,
          41,
          1.078,
          42,
          1.697,
          43,
          2.409,
          44,
          1.005,
          45,
          2.352,
          46,
          1.175,
          47,
          1.991,
          48,
          1.388,
          49,
          1.388,
          50,
          1.451,
          51,
          1.521,
          52,
          1.388,
          53,
          1.175,
          54,
          0.863,
          55,
          1.175,
          56,
          1.005,
          57,
          1.175,
          58,
          1.005,
          59,
          2.312,
          60,
          1.697,
          61,
          1.697,
          62,
          1.991,
          63,
          1.005,
          64,
          1.991,
          65,
          1.175,
          66,
          1.175,
          67,
          1.697,
          68,
          1.388,
          69,
          1.697,
          70,
          1.697,
          71,
          1.865,
          72,
          1.697,
          73,
          0.38,
          74,
          1.175,
          75,
          1.388,
          76,
          1.451,
          77,
          1.697,
          78,
          1.697,
          79,
          1.697,
          80,
          1.697,
          81,
          1.697,
          82,
          1.697,
          83,
          1.697,
          84,
          1.247,
          85,
          1.175,
          86,
          0.742,
          87,
          1.388,
          88,
          1.388,
          89,
          1.451,
          90,
          1.697,
          91,
          1.388,
          92,
          0.742,
          93,
          1.175,
          94,
          2.004,
          95,
          1.005,
          96,
          1.175,
          97,
          1.175,
          98,
          1.175,
          99,
          1.175,
          100,
          0.863,
          101,
          0.024,
          102,
          0.034,
          103,
          0.024,
        ],
      ],
      ['title/classes/Output.html', [104, 0.941, 133, 1.49]],
      [
        'body/classes/Output.html',
        [
          3,
          0.558,
          4,
          0.558,
          5,
          0.478,
          9,
          1.06,
          10,
          0.061,
          14,
          0.756,
          15,
          0.632,
          17,
          0.756,
          18,
          0.558,
          19,
          0.855,
          21,
          1.776,
          22,
          0.65,
          41,
          0.478,
          54,
          1.007,
          73,
          0.286,
          92,
          1.514,
          100,
          2.077,
          101,
          0.018,
          102,
          0.028,
          103,
          0.018,
          104,
          0.558,
          106,
          0.884,
          108,
          2.902,
          111,
          1.044,
          113,
          2.324,
          115,
          2.242,
          116,
          2.622,
          117,
          2.622,
          119,
          3.171,
          133,
          1.891,
          134,
          1.259,
          135,
          2.566,
          142,
          2.397,
          160,
          1.619,
          174,
          1.259,
          175,
          3.414,
          176,
          3.009,
          177,
          1.619,
          178,
          3.39,
          179,
          2.457,
          180,
          2.457,
          181,
          2.457,
          182,
          2.457,
          183,
          2.457,
          184,
          3.39,
          185,
          3.39,
          186,
          3.39,
          187,
          3.39,
          188,
          2.457,
          189,
          2.457,
          190,
          2.457,
          191,
          2.457,
          192,
          2.457,
          193,
          3.009,
          194,
          2.457,
          195,
          1.585,
          196,
          2.457,
          197,
          1.044,
          198,
          2.047,
          199,
          2.457,
          200,
          1.585,
          201,
          1.585,
          202,
          2.457,
          203,
          1.585,
          204,
          3.882,
          205,
          2.457,
          206,
          1.585,
          207,
          4.05,
          208,
          2.457,
          209,
          1.585,
          210,
          2.457,
          211,
          2.457,
          212,
          1.585,
          213,
          2.457,
          214,
          1.585,
          215,
          2.457,
          216,
          1.585,
          217,
          1.585,
          218,
          1.585,
          219,
          1.585,
          220,
          1.585,
          221,
          2.457,
          222,
          1.585,
          223,
          2.457,
          224,
          3.669,
          225,
          1.585,
          226,
          2.457,
          227,
          1.585,
          228,
          2.457,
          229,
          1.585,
          230,
          2.457,
          231,
          1.585,
          232,
          2.457,
          233,
          1.585,
          234,
          2.457,
          235,
          1.585,
          236,
          1.585,
          237,
          1.044,
          238,
          1.585,
          239,
          1.585,
          240,
          1.585,
          241,
          1.585,
          242,
          1.585,
          243,
          1.585,
          244,
          1.585,
          245,
          1.585,
          246,
          1.585,
          247,
          2.457,
          248,
          2.457,
          249,
          2.457,
          250,
          2.457,
          251,
          1.585,
          252,
          2.457,
          253,
          1.585,
          254,
          1.585,
          255,
          1.585,
          256,
          2.457,
          257,
          1.585,
          258,
          1.585,
          259,
          1.585,
          260,
          1.585,
          261,
          2.457,
          262,
          2.457,
          263,
          1.585,
          264,
          2.391,
          265,
          1.585,
          266,
          1.585,
          267,
          1.585,
          268,
          1.585,
          269,
          1.585,
          270,
          1.585,
          271,
          1.585,
          272,
          3.009,
          273,
          2.457,
          274,
          2.457,
          275,
          2.457,
          276,
          2.457,
          277,
          2.457,
          278,
          3.009,
          279,
          2.457,
          280,
          1.585,
          281,
          3.009,
          282,
          1.585,
          283,
          1.585,
          284,
          1.585,
          285,
          1.585,
          286,
          1.585,
          287,
          1.585,
          288,
          1.585,
          289,
          3.882,
          290,
          3.39,
          291,
          3.084,
          292,
          1.585,
          293,
          1.585,
          294,
          3.39,
          295,
          1.259,
          296,
          1.259,
        ],
      ],
      ['title/classes/Stubborn.html', [104, 0.941, 297, 1.49]],
      [
        'body/classes/Stubborn.html',
        [
          3,
          0.418,
          4,
          0.418,
          5,
          0.358,
          9,
          1.415,
          10,
          0.061,
          13,
          1.385,
          15,
          0.638,
          17,
          0.566,
          18,
          0.687,
          19,
          0.821,
          21,
          0.874,
          22,
          1.479,
          24,
          1.479,
          33,
          0.749,
          37,
          1.655,
          41,
          0.959,
          50,
          2.128,
          51,
          1.203,
          54,
          0.486,
          56,
          2.128,
          58,
          0.93,
          63,
          1.917,
          73,
          0.214,
          84,
          1.925,
          86,
          0.687,
          92,
          1.203,
          95,
          0.93,
          101,
          0.013,
          102,
          0.048,
          103,
          0.013,
          104,
          0.418,
          106,
          0.662,
          108,
          2.823,
          111,
          0.782,
          113,
          2.226,
          115,
          2.005,
          116,
          2.345,
          117,
          2.345,
          119,
          3.052,
          121,
          2.358,
          135,
          2.516,
          142,
          1.603,
          144,
          2.563,
          160,
          1.285,
          161,
          1.904,
          163,
          1.549,
          164,
          1.549,
          165,
          3.1,
          166,
          3.339,
          167,
          2.712,
          169,
          1.636,
          170,
          1.549,
          172,
          1.549,
          175,
          3.501,
          197,
          2.093,
          198,
          1.603,
          297,
          2.345,
          298,
          0.782,
          299,
          1.95,
          300,
          1.95,
          301,
          1.95,
          302,
          1.549,
          303,
          1.549,
          304,
          1.549,
          305,
          1.549,
          306,
          1.95,
          307,
          1.549,
          308,
          1.95,
          309,
          1.549,
          310,
          2.523,
          311,
          4.116,
          312,
          3.767,
          313,
          3.847,
          314,
          1.95,
          315,
          2.874,
          316,
          2.283,
          317,
          2.874,
          318,
          2.874,
          319,
          1.549,
          320,
          1.894,
          321,
          2.283,
          322,
          1.95,
          323,
          2.874,
          324,
          3.414,
          325,
          1.95,
          326,
          2.712,
          327,
          1.95,
          328,
          3.175,
          329,
          1.186,
          330,
          1.186,
          331,
          1.186,
          332,
          1.186,
          333,
          1.95,
          334,
          1.186,
          335,
          4.203,
          336,
          3.607,
          337,
          2.993,
          338,
          1.186,
          339,
          2.874,
          340,
          1.549,
          341,
          1.95,
          342,
          1.186,
          343,
          4.017,
          344,
          1.95,
          345,
          1.186,
          346,
          1.186,
          347,
          2.874,
          348,
          1.186,
          349,
          1.95,
          350,
          1.95,
          351,
          1.549,
          352,
          1.95,
          353,
          1.95,
          354,
          1.904,
          355,
          1.95,
          356,
          1.186,
          357,
          1.186,
          358,
          1.186,
          359,
          1.95,
          360,
          1.186,
          361,
          1.95,
          362,
          1.95,
          363,
          1.186,
          364,
          1.95,
          365,
          1.186,
          366,
          1.95,
          367,
          1.186,
          368,
          1.95,
          369,
          1.95,
          370,
          1.186,
          371,
          2.874,
          372,
          2.874,
          373,
          1.186,
          374,
          1.95,
          375,
          1.285,
          376,
          1.95,
          377,
          1.186,
          378,
          1.186,
          379,
          1.186,
          380,
          2.482,
          381,
          1.95,
          382,
          1.186,
          383,
          1.186,
          384,
          1.186,
          385,
          1.95,
          386,
          1.186,
          387,
          1.186,
          388,
          1.186,
          389,
          1.186,
          390,
          1.186,
          391,
          1.186,
          392,
          1.186,
          393,
          1.186,
          394,
          4.017,
          395,
          1.186,
          396,
          1.186,
          397,
          1.186,
          398,
          2.482,
          399,
          1.186,
          400,
          1.186,
          401,
          1.186,
          402,
          1.186,
          403,
          1.95,
          404,
          1.186,
          405,
          1.186,
          406,
          1.95,
          407,
          1.186,
          408,
          1.186,
          409,
          1.186,
          410,
          1.186,
        ],
      ],
      ['title/changelog.html', [354, 1.261, 411, 1.489, 412, 2.259]],
      [
        'body/changelog.html',
        [
          10,
          0.046,
          86,
          1.155,
          101,
          0.037,
          102,
          0.046,
          103,
          0.037,
          121,
          1.564,
          177,
          2.161,
          237,
          2.161,
          413,
          3.279,
          414,
          5.089,
          415,
          4.472,
          416,
          3.279,
          417,
          4.991,
          418,
          3.325,
          419,
          4.991,
          420,
          4.991,
          421,
          3.553,
          422,
          4.099,
          423,
          3.279,
          424,
          3.279,
          425,
          3.279,
          426,
          4.685,
          427,
          4.099,
          428,
          3.279,
          429,
          3.279,
          430,
          2.605,
          431,
          3.279,
          432,
          3.279,
          433,
          4.099,
          434,
          2.605,
          435,
          3.279,
          436,
          3.279,
          437,
          3.279,
          438,
          3.279,
          439,
          4.823,
          440,
          3.279,
          441,
          3.279,
          442,
          2.161,
          443,
          3.279,
          444,
          3.279,
          445,
          4.685,
          446,
          3.279,
          447,
          3.279,
          448,
          3.279,
          449,
          3.279,
          450,
          2.605,
          451,
          3.279,
          452,
          3.279,
          453,
          3.279,
          454,
          3.279,
          455,
          3.279,
          456,
          2.605,
          457,
          3.279,
          458,
          2.605,
          459,
          3.279,
          460,
          3.279,
          461,
          3.279,
          462,
          3.279,
        ],
      ],
      ['title/coverage.html', [463, 2.851]],
      [
        'body/coverage.html',
        [
          0,
          1.032,
          1,
          0.914,
          5,
          0.673,
          6,
          1.758,
          10,
          0.06,
          16,
          0.914,
          19,
          0.402,
          28,
          0.914,
          33,
          1.599,
          100,
          0.914,
          101,
          0.025,
          102,
          0.036,
          103,
          0.025,
          104,
          1.413,
          105,
          1.469,
          107,
          1.771,
          121,
          1.064,
          123,
          1.771,
          125,
          1.771,
          127,
          1.771,
          129,
          1.771,
          131,
          1.771,
          133,
          1.244,
          144,
          1.244,
          161,
          1.244,
          162,
          1.771,
          174,
          1.771,
          198,
          2.967,
          297,
          1.244,
          298,
          1.469,
          375,
          1.469,
          442,
          1.469,
          463,
          1.771,
          464,
          1.469,
          465,
          2.23,
          466,
          2.23,
          467,
          3.168,
          468,
          5.306,
          469,
          2.23,
          470,
          2.23,
          471,
          2.23,
          472,
          2.23,
          473,
          2.23,
          474,
          2.23,
          475,
          2.23,
          476,
          2.23,
          477,
          2.087,
          478,
          3.168,
          479,
          2.23,
          480,
          3.168,
          481,
          2.23,
          482,
          3.168,
          483,
          2.23,
          484,
          2.23,
          485,
          2.23,
          486,
          3.168,
          487,
          2.23,
          488,
          2.23,
          489,
          2.23,
          490,
          3.837,
          491,
          2.23,
          492,
          2.23,
          493,
          2.23,
          494,
          2.23,
          495,
          2.23,
          496,
          2.23,
          497,
          2.23,
          498,
          2.23,
          499,
          2.23,
          500,
          2.23,
          501,
          2.23,
          502,
          5.142,
          503,
          2.23,
          504,
          2.23,
          505,
          2.23,
          506,
          2.23,
          507,
          2.23,
          508,
          2.23,
          509,
          2.23,
          510,
          2.23,
          511,
          2.23,
          512,
          2.23,
          513,
          2.23,
          514,
          2.23,
          515,
          2.23,
          516,
          2.23,
          517,
          2.23,
          518,
          2.23,
          519,
          2.23,
          520,
          2.23,
          521,
          2.23,
          522,
          2.23,
          523,
          2.23,
          524,
          2.23,
          525,
          2.23,
          526,
          2.23,
          527,
          2.23,
          528,
          2.23,
          529,
          2.23,
          530,
          2.23,
        ],
      ],
      ['title/dependencies.html', [418, 2.107, 531, 2.259]],
      [
        'body/dependencies.html',
        [
          10,
          0.059,
          19,
          0.714,
          37,
          1.396,
          101,
          0.045,
          102,
          0.052,
          103,
          0.045,
          237,
          2.61,
          418,
          2.61,
          421,
          3.147,
          430,
          3.147,
          456,
          3.147,
          458,
          3.147,
          532,
          3.961,
          533,
          3.961,
          534,
          3.961,
          535,
          3.961,
          536,
          3.961,
        ],
      ],
      ['title/miscellaneous/enumerations.html', [537, 0.926, 538, 2.54]],
      [
        'body/miscellaneous/enumerations.html',
        [
          10,
          0.06,
          14,
          2.062,
          15,
          1.111,
          41,
          1.586,
          73,
          0.644,
          101,
          0.04,
          102,
          0.049,
          103,
          0.04,
          316,
          3.433,
          319,
          3.433,
          320,
          2.848,
          321,
          3.433,
          477,
          2.354,
          537,
          1.464,
          538,
          2.838,
          539,
          3.691,
          540,
          3.433,
          541,
          4.321,
          542,
          4.321,
          543,
          4.321,
          544,
          3.433,
          545,
          3.433,
          546,
          4.321,
          547,
          3.572,
          548,
          3.572,
          549,
          2.838,
          550,
          2.838,
        ],
      ],
      ['title/index.html', [73, 0.407, 354, 1.261, 411, 1.489]],
      [
        'body/index.html',
        [
          9,
          1.116,
          10,
          0.061,
          16,
          1.451,
          21,
          0.606,
          24,
          0.706,
          30,
          1.512,
          32,
          2.582,
          33,
          1.069,
          36,
          2.398,
          37,
          1.514,
          38,
          1.817,
          39,
          1.461,
          41,
          0.791,
          44,
          0.821,
          50,
          2.1,
          51,
          1.551,
          53,
          0.96,
          70,
          2.125,
          71,
          0.821,
          76,
          1.914,
          84,
          1.299,
          86,
          1.413,
          89,
          1.512,
          95,
          2.142,
          101,
          0.02,
          102,
          0.036,
          103,
          0.02,
          108,
          0.96,
          110,
          1.367,
          113,
          1.249,
          115,
          1.249,
          121,
          2.296,
          135,
          2.398,
          142,
          2.64,
          144,
          0.96,
          158,
          1.367,
          177,
          1.134,
          198,
          0.96,
          264,
          2.517,
          291,
          1.367,
          295,
          1.367,
          296,
          1.367,
          297,
          2.796,
          302,
          2.517,
          303,
          2.08,
          304,
          1.367,
          305,
          3.676,
          307,
          2.08,
          309,
          1.367,
          310,
          2.08,
          313,
          2.08,
          320,
          1.134,
          340,
          2.517,
          351,
          1.367,
          434,
          1.367,
          442,
          1.134,
          464,
          1.134,
          540,
          2.08,
          544,
          2.813,
          545,
          1.367,
          550,
          3.676,
          551,
          2.618,
          552,
          1.721,
          553,
          1.721,
          554,
          4.402,
          555,
          1.721,
          556,
          1.721,
          557,
          2.618,
          558,
          1.721,
          559,
          2.618,
          560,
          3.168,
          561,
          2.618,
          562,
          2.618,
          563,
          1.721,
          564,
          2.618,
          565,
          1.721,
          566,
          2.618,
          567,
          1.721,
          568,
          1.721,
          569,
          1.721,
          570,
          1.721,
          571,
          1.721,
          572,
          1.721,
          573,
          1.721,
          574,
          1.721,
          575,
          1.721,
          576,
          1.721,
          577,
          1.721,
          578,
          1.721,
          579,
          1.721,
          580,
          1.721,
          581,
          2.618,
          582,
          2.618,
          583,
          2.618,
          584,
          2.618,
          585,
          1.721,
          586,
          4.49,
          587,
          4.012,
          588,
          1.721,
          589,
          1.721,
          590,
          1.721,
          591,
          1.721,
          592,
          1.721,
          593,
          2.618,
          594,
          1.721,
          595,
          1.721,
          596,
          3.809,
          597,
          1.721,
          598,
          1.721,
          599,
          3.168,
          600,
          1.721,
          601,
          3.809,
          602,
          2.618,
          603,
          1.721,
          604,
          1.721,
          605,
          1.721,
          606,
          1.367,
          607,
          1.721,
          608,
          1.721,
          609,
          1.721,
          610,
          1.721,
          611,
          1.721,
          612,
          1.721,
          613,
          1.721,
          614,
          1.721,
          615,
          1.721,
          616,
          1.721,
          617,
          1.721,
          618,
          4.17,
          619,
          4.298,
          620,
          2.618,
          621,
          1.721,
          622,
          1.721,
          623,
          1.721,
          624,
          1.721,
          625,
          1.721,
          626,
          1.721,
          627,
          2.618,
          628,
          3.541,
          629,
          3.809,
          630,
          3.809,
          631,
          3.168,
          632,
          3.168,
          633,
          1.721,
          634,
          3.541,
          635,
          1.721,
          636,
          3.168,
          637,
          1.721,
          638,
          1.721,
          639,
          1.721,
          640,
          1.721,
          641,
          2.618,
          642,
          1.721,
          643,
          1.721,
          644,
          1.721,
          645,
          1.721,
          646,
          1.721,
          647,
          1.721,
          648,
          1.721,
          649,
          1.721,
          650,
          1.721,
          651,
          1.721,
          652,
          1.721,
          653,
          1.721,
          654,
          1.721,
          655,
          1.721,
          656,
          1.721,
          657,
          1.721,
          658,
          1.721,
          659,
          1.721,
          660,
          1.721,
          661,
          1.721,
          662,
          1.721,
          663,
          2.618,
          664,
          1.721,
          665,
          1.721,
          666,
          1.721,
          667,
          1.721,
          668,
          1.721,
          669,
          1.721,
          670,
          3.541,
          671,
          1.721,
          672,
          1.721,
          673,
          1.721,
          674,
          1.721,
          675,
          1.721,
          676,
          1.721,
          677,
          1.721,
          678,
          1.721,
        ],
      ],
      ['title/license.html', [354, 1.261, 411, 1.489, 679, 1.795]],
      [
        'body/license.html',
        [
          10,
          0.047,
          30,
          1.986,
          101,
          0.038,
          102,
          0.047,
          103,
          0.038,
          143,
          2.669,
          169,
          2.214,
          450,
          2.669,
          464,
          2.214,
          606,
          2.669,
          679,
          2.669,
          680,
          3.36,
          681,
          4.522,
          682,
          3.36,
          683,
          3.36,
          684,
          3.36,
          685,
          4.162,
          686,
          3.36,
          687,
          3.36,
          688,
          3.36,
          689,
          3.36,
          690,
          3.36,
          691,
          3.36,
          692,
          4.162,
          693,
          5.111,
          694,
          3.36,
          695,
          3.36,
          696,
          4.522,
          697,
          3.36,
          698,
          4.162,
          699,
          3.36,
          700,
          3.36,
          701,
          3.36,
          702,
          3.36,
          703,
          3.36,
          704,
          3.36,
          705,
          3.36,
          706,
          3.36,
          707,
          3.36,
          708,
          4.162,
          709,
          3.36,
          710,
          3.36,
          711,
          3.36,
          712,
          3.36,
          713,
          3.36,
          714,
          3.36,
          715,
          4.162,
          716,
          4.162,
          717,
          3.36,
          718,
          3.36,
          719,
          3.36,
          720,
          3.36,
          721,
          3.36,
          722,
          3.36,
          723,
          3.36,
          724,
          3.36,
          725,
          3.36,
          726,
          3.36,
          727,
          3.36,
          728,
          3.36,
          729,
          3.36,
          730,
          3.36,
          731,
          3.36,
          732,
          3.36,
          733,
          3.36,
          734,
          3.36,
          735,
          3.36,
          736,
          3.36,
          737,
          3.36,
          738,
          3.36,
          739,
          3.36,
          740,
          3.36,
          741,
          3.36,
          742,
          3.36,
          743,
          3.36,
          744,
          3.36,
          745,
          3.36,
        ],
      ],
      ['title/modules.html', [746, 2.851]],
      [
        'body/modules.html',
        [10, 0.053, 101, 0.047, 102, 0.053, 103, 0.047, 746, 3.282],
      ],
      ['title/overview.html', [747, 2.851]],
      [
        'body/overview.html',
        [
          2,
          1.951,
          10,
          0.053,
          101,
          0.046,
          102,
          0.053,
          103,
          0.046,
          106,
          2.282,
          747,
          3.249,
          748,
          4.679,
        ],
      ],
      ['title/miscellaneous/typealiases.html', [537, 0.926, 749, 3.197]],
      [
        'body/miscellaneous/typealiases.html',
        [
          1,
          1.092,
          6,
          1.272,
          10,
          0.06,
          12,
          1.487,
          15,
          0.922,
          19,
          0.883,
          20,
          2.259,
          21,
          1.675,
          22,
          1.659,
          23,
          1.487,
          24,
          1.092,
          25,
          2.259,
          27,
          2.652,
          28,
          1.092,
          33,
          1.405,
          42,
          2.259,
          43,
          2.652,
          44,
          1.272,
          46,
          1.999,
          47,
          2.259,
          51,
          1.262,
          55,
          1.999,
          56,
          1.71,
          57,
          1.999,
          58,
          1.71,
          59,
          2.52,
          60,
          2.259,
          61,
          2.259,
          62,
          2.259,
          63,
          1.71,
          64,
          2.415,
          65,
          1.999,
          66,
          1.999,
          67,
          2.259,
          69,
          2.259,
          71,
          1.71,
          72,
          2.259,
          73,
          0.481,
          74,
          1.999,
          77,
          1.999,
          78,
          1.999,
          79,
          1.999,
          80,
          1.999,
          81,
          1.999,
          82,
          1.999,
          83,
          1.999,
          89,
          1.71,
          90,
          1.999,
          93,
          1.999,
          97,
          1.999,
          98,
          1.999,
          99,
          1.999,
          101,
          0.03,
          102,
          0.041,
          103,
          0.03,
          298,
          1.756,
          326,
          2.847,
          490,
          2.117,
          537,
          1.092,
          750,
          2.665,
          751,
          5.312,
          752,
          3.583,
          753,
          3.583,
          754,
          2.665,
          755,
          3.583,
          756,
          4.832,
        ],
      ],
      ['title/miscellaneous/variables.html', [537, 0.926, 757, 2.54]],
      [
        'body/miscellaneous/variables.html',
        [
          10,
          0.059,
          16,
          1.862,
          19,
          0.701,
          41,
          1.372,
          73,
          0.701,
          101,
          0.044,
          102,
          0.052,
          103,
          0.044,
          197,
          2.994,
          337,
          3.087,
          375,
          2.994,
          477,
          2.561,
          537,
          1.593,
          539,
          3.609,
          549,
          3.087,
          757,
          3.087,
          758,
          3.886,
          759,
          3.886,
          760,
          3.886,
          761,
          3.886,
        ],
      ],
    ],
    invertedIndex: [
      [
        '',
        {
          _index: 10,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'changelog.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
            'index.html': {},
            'license.html': {},
            'modules.html': {},
            'overview.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        '0',
        {
          _index: 198,
          title: {},
          body: {
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'coverage.html': {},
            'index.html': {},
          },
        },
      ],
      ['0/1', { _index: 468, title: {}, body: { 'coverage.html': {} } }],
      ['0/21', { _index: 479, title: {}, body: { 'coverage.html': {} } }],
      ['0/4', { _index: 467, title: {}, body: { 'coverage.html': {} } }],
      ['0/5', { _index: 469, title: {}, body: { 'coverage.html': {} } }],
      ['003d4ef', { _index: 443, title: {}, body: { 'changelog.html': {} } }],
      ['06', { _index: 439, title: {}, body: { 'changelog.html': {} } }],
      ['07', { _index: 426, title: {}, body: { 'changelog.html': {} } }],
      ['08', { _index: 415, title: {}, body: { 'changelog.html': {} } }],
      ['0b3c577', { _index: 431, title: {}, body: { 'changelog.html': {} } }],
      ['0de24fa', { _index: 453, title: {}, body: { 'changelog.html': {} } }],
      [
        '1',
        {
          _index: 264,
          title: {},
          body: { 'classes/Output.html': {}, 'index.html': {} },
        },
      ],
      ['1.0.4', { _index: 536, title: {}, body: { 'dependencies.html': {} } }],
      ['1.19.0', { _index: 534, title: {}, body: { 'dependencies.html': {} } }],
      ['1/1', { _index: 513, title: {}, body: { 'coverage.html': {} } }],
      ['100', { _index: 512, title: {}, body: { 'coverage.html': {} } }],
      ['12/22', { _index: 476, title: {}, body: { 'coverage.html': {} } }],
      ['15', { _index: 416, title: {}, body: { 'changelog.html': {} } }],
      ['16/31', { _index: 472, title: {}, body: { 'coverage.html': {} } }],
      ['2', { _index: 260, title: {}, body: { 'classes/Output.html': {} } }],
      [
        '200',
        {
          _index: 548,
          title: {},
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      ['2020', { _index: 414, title: {}, body: { 'changelog.html': {} } }],
      ['23', { _index: 445, title: {}, body: { 'changelog.html': {} } }],
      ['248fdf1', { _index: 462, title: {}, body: { 'changelog.html': {} } }],
      ['26', { _index: 440, title: {}, body: { 'changelog.html': {} } }],
      ['3.0.0', { _index: 455, title: {}, body: { 'changelog.html': {} } }],
      ['4', { _index: 748, title: {}, body: { 'overview.html': {} } }],
      [
        '4.1.0',
        {
          _index: 456,
          title: {},
          body: { 'changelog.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        '4.17.15',
        {
          _index: 430,
          title: {},
          body: { 'changelog.html': {}, 'dependencies.html': {} },
        },
      ],
      ['4.17.18', { _index: 427, title: {}, body: { 'changelog.html': {} } }],
      ['4.17.19', { _index: 422, title: {}, body: { 'changelog.html': {} } }],
      ['4.17.20', { _index: 423, title: {}, body: { 'changelog.html': {} } }],
      ['43acdba', { _index: 424, title: {}, body: { 'changelog.html': {} } }],
      ['463449c', { _index: 428, title: {}, body: { 'changelog.html': {} } }],
      [
        '5.0.1',
        {
          _index: 458,
          title: {},
          body: { 'changelog.html': {}, 'dependencies.html': {} },
        },
      ],
      ['5.0.2', { _index: 454, title: {}, body: { 'changelog.html': {} } }],
      ['5.0.3', { _index: 452, title: {}, body: { 'changelog.html': {} } }],
      ['5.0.4', { _index: 444, title: {}, body: { 'changelog.html': {} } }],
      ['5.1.0', { _index: 438, title: {}, body: { 'changelog.html': {} } }],
      ['5.1.1', { _index: 432, title: {}, body: { 'changelog.html': {} } }],
      ['5.1.2', { _index: 429, title: {}, body: { 'changelog.html': {} } }],
      ['5.1.3', { _index: 425, title: {}, body: { 'changelog.html': {} } }],
      ['5.1.4', { _index: 413, title: {}, body: { 'changelog.html': {} } }],
      ['5.7.3', { _index: 460, title: {}, body: { 'changelog.html': {} } }],
      ['5.7.4', { _index: 461, title: {}, body: { 'changelog.html': {} } }],
      [
        '501',
        {
          _index: 550,
          title: {},
          body: { 'miscellaneous/enumerations.html': {}, 'index.html': {} },
        },
      ],
      ['51', { _index: 471, title: {}, body: { 'coverage.html': {} } }],
      ['54', { _index: 475, title: {}, body: { 'coverage.html': {} } }],
      ['56c446c', { _index: 451, title: {}, body: { 'changelog.html': {} } }],
      ['6.14.5', { _index: 435, title: {}, body: { 'changelog.html': {} } }],
      ['6.14.6', { _index: 436, title: {}, body: { 'changelog.html': {} } }],
      ['7df3365', { _index: 437, title: {}, body: { 'changelog.html': {} } }],
      ['_extend', { _index: 503, title: {}, body: { 'coverage.html': {} } }],
      ['above', { _index: 714, title: {}, body: { 'license.html': {} } }],
      ['according', { _index: 667, title: {}, body: { 'index.html': {} } }],
      ['acorn', { _index: 459, title: {}, body: { 'changelog.html': {} } }],
      ['action', { _index: 739, title: {}, body: { 'license.html': {} } }],
      [
        'add',
        {
          _index: 177,
          title: {},
          body: {
            'classes/Output.html': {},
            'changelog.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'add(lines',
        { _index: 199, title: {}, body: { 'classes/Output.html': {} } },
      ],
      ['added', { _index: 632, title: {}, body: { 'index.html': {} } }],
      [
        'addition',
        { _index: 178, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'addition(text',
        { _index: 202, title: {}, body: { 'classes/Output.html': {} } },
      ],
      ['additional', { _index: 654, title: {}, body: { 'index.html': {} } }],
      [
        'additionlabel',
        { _index: 179, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'additionlabel(error',
        { _index: 205, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'addroute',
        { _index: 314, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'addroute(route',
        { _index: 333, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'affected',
        { _index: 353, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'afterall(async',
        { _index: 612, title: {}, body: { 'index.html': {} } },
      ],
      ['aftereach', { _index: 616, title: {}, body: { 'index.html': {} } }],
      ['against', { _index: 582, title: {}, body: { 'index.html': {} } }],
      ['agent', { _index: 656, title: {}, body: { 'index.html': {} } }],
      [
        'aliases',
        {
          _index: 750,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      ['always', { _index: 647, title: {}, body: { 'index.html': {} } }],
      ['and/or', { _index: 706, title: {}, body: { 'license.html': {} } }],
      ['api', { _index: 554, title: {}, body: { 'index.html': {} } }],
      [
        'args',
        {
          _index: 167,
          title: {},
          body: { 'interfaces/Emitter.html': {}, 'classes/Stubborn.html': {} },
        },
      ],
      ['arising', { _index: 743, title: {}, body: { 'license.html': {} } }],
      [
        'array',
        {
          _index: 8,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'array.isarray(lines',
        { _index: 238, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'arraytohash',
        { _index: 504, title: {}, body: { 'coverage.html': {} } },
      ],
      ['associated', { _index: 694, title: {}, body: { 'license.html': {} } }],
      ['async', { _index: 619, title: {}, body: { 'index.html': {} } }],
      ['authors', { _index: 732, title: {}, body: { 'license.html': {} } }],
      ['automatic', { _index: 417, title: {}, body: { 'changelog.html': {} } }],
      [
        'await',
        {
          _index: 305,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      [
        'aweight',
        { _index: 278, title: {}, body: { 'classes/Output.html': {} } },
      ],
      ['b', { _index: 271, title: {}, body: { 'classes/Output.html': {} } }],
      ['based', { _index: 562, title: {}, body: { 'index.html': {} } }],
      ['basically', { _index: 556, title: {}, body: { 'index.html': {} } }],
      [
        'beforeall(async',
        { _index: 610, title: {}, body: { 'index.html': {} } },
      ],
      ['between', { _index: 661, title: {}, body: { 'index.html': {} } }],
      [
        'body',
        {
          _index: 37,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'dependencies.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'bodydefinition',
        {
          _index: 63,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'bodydefinitionarray',
        {
          _index: 1,
          title: { 'interfaces/BodyDefinitionArray.html': {} },
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'bodydefinitionobject',
        {
          _index: 61,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'bodydefinitionprimitive',
        {
          _index: 60,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'bodydefinitionvalue',
        {
          _index: 62,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'bodydiff',
        {
          _index: 123,
          title: {},
          body: { 'classes/Debugger.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'bodydiff(route.getbody',
        { _index: 155, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'boolean',
        {
          _index: 23,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'break',
        {
          _index: 291,
          title: {},
          body: { 'classes/Output.html': {}, 'index.html': {} },
        },
      ],
      ['breaking', { _index: 597, title: {}, body: { 'index.html': {} } }],
      [
        'buffer',
        { _index: 152, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      ['bug', { _index: 446, title: {}, body: { 'changelog.html': {} } }],
      ['bump', { _index: 420, title: {}, body: { 'changelog.html': {} } }],
      [
        'bweight',
        { _index: 281, title: {}, body: { 'classes/Output.html': {} } },
      ],
      ['c', { _index: 682, title: {}, body: { 'license.html': {} } }],
      ['c40f8a5', { _index: 457, title: {}, body: { 'changelog.html': {} } }],
      ['call', { _index: 670, title: {}, body: { 'index.html': {} } }],
      ['called', { _index: 666, title: {}, body: { 'index.html': {} } }],
      ['case', { _index: 289, title: {}, body: { 'classes/Output.html': {} } }],
      ['cat', { _index: 210, title: {}, body: { 'classes/Output.html': {} } }],
      [
        'cat.slice(1',
        { _index: 244, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'cat[0].touppercase',
        { _index: 243, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'category',
        { _index: 180, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'category(cat',
        { _index: 208, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'chalk',
        {
          _index: 237,
          title: {},
          body: {
            'classes/Output.html': {},
            'changelog.html': {},
            'dependencies.html': {},
          },
        },
      ],
      ['change', { _index: 593, title: {}, body: { 'index.html': {} } }],
      ['changelog', { _index: 412, title: { 'changelog.html': {} }, body: {} }],
      ['charge', { _index: 689, title: {}, body: { 'license.html': {} } }],
      ['checkextra', { _index: 491, title: {}, body: { 'coverage.html': {} } }],
      [
        'checkmissing',
        { _index: 492, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'checkparameters',
        { _index: 487, title: {}, body: { 'coverage.html': {} } },
      ],
      ['checkvalue', { _index: 493, title: {}, body: { 'coverage.html': {} } }],
      [
        'checkvalues',
        { _index: 494, title: {}, body: { 'coverage.html': {} } },
      ],
      ['claim', { _index: 735, title: {}, body: { 'license.html': {} } }],
      [
        'class',
        {
          _index: 104,
          title: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
          body: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'classes',
        {
          _index: 106,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'overview.html': {},
          },
        },
      ],
      ['clean', { _index: 614, title: {}, body: { 'index.html': {} } }],
      [
        'clear',
        { _index: 315, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'cleared',
        {
          _index: 759,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['code', { _index: 594, title: {}, body: { 'index.html': {} } }],
      [
        'color',
        { _index: 236, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'color.green',
        { _index: 257, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'color.red',
        { _index: 258, title: {}, body: { 'classes/Output.html': {} } },
      ],
      ['compare', { _index: 650, title: {}, body: { 'index.html': {} } }],
      ['complete', { _index: 603, title: {}, body: { 'index.html': {} } }],
      ['conditions', { _index: 713, title: {}, body: { 'license.html': {} } }],
      ['configuration', { _index: 668, title: {}, body: { 'index.html': {} } }],
      ['connection', { _index: 744, title: {}, body: { 'license.html': {} } }],
      ['connexion', { _index: 657, title: {}, body: { 'index.html': {} } }],
      [
        'console',
        {
          _index: 158,
          title: {},
          body: { 'classes/Debugger.html': {}, 'index.html': {} },
        },
      ],
      [
        'console.log(out.render',
        { _index: 159, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'const',
        {
          _index: 142,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'constants',
        {
          _index: 17,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      [
        'constructor',
        {
          _index: 111,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      [
        'constructor(options',
        { _index: 325, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'constructor(output',
        { _index: 195, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'constructor(private',
        {
          _index: 134,
          title: {},
          body: { 'classes/Debugger.html': {}, 'classes/Output.html': {} },
        },
      ],
      [
        'constructor(request',
        { _index: 112, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'content',
        { _index: 535, title: {}, body: { 'dependencies.html': {} } },
      ],
      ['contract', { _index: 740, title: {}, body: { 'license.html': {} } }],
      ['contributing', { _index: 567, title: {}, body: { 'index.html': {} } }],
      ['copies', { _index: 708, title: {}, body: { 'license.html': {} } }],
      ['copy', { _index: 692, title: {}, body: { 'license.html': {} } }],
      ['copyright', { _index: 681, title: {}, body: { 'license.html': {} } }],
      [
        'coverage',
        {
          _index: 463,
          title: { 'coverage.html': {} },
          body: { 'coverage.html': {} },
        },
      ],
      [
        'create',
        { _index: 343, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'createserver',
        { _index: 376, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'currenttab',
        { _index: 176, title: {}, body: { 'classes/Output.html': {} } },
      ],
      ['d', { _index: 573, title: {}, body: { 'index.html': {} } }],
      ['damages', { _index: 736, title: {}, body: { 'license.html': {} } }],
      ['deal', { _index: 695, title: {}, body: { 'license.html': {} } }],
      ['dealings', { _index: 745, title: {}, body: { 'license.html': {} } }],
      [
        'debugger',
        {
          _index: 105,
          title: { 'classes/Debugger.html': {} },
          body: { 'classes/Debugger.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'default',
        {
          _index: 197,
          title: {},
          body: {
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'defaultheaders',
        { _index: 381, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'defined',
        {
          _index: 113,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'interfaces/Emitter.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'definition',
        {
          _index: 50,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'definitionmatcher',
        {
          _index: 43,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'definitions',
        {
          _index: 53,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'definitionvalue',
        {
          _index: 46,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'delete',
        {
          _index: 316,
          title: {},
          body: {
            'classes/Stubborn.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'delete(path',
        { _index: 341, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'dependencies',
        {
          _index: 418,
          title: { 'dependencies.html': {} },
          body: { 'changelog.html': {}, 'dependencies.html': {} },
        },
      ],
      [
        "describe('test",
        { _index: 609, title: {}, body: { 'index.html': {} } },
      ],
      [
        'description',
        { _index: 336, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['dev', { _index: 571, title: {}, body: { 'index.html': {} } }],
      ['diff', { _index: 660, title: {}, body: { 'index.html': {} } }],
      [
        'diff/bodydiff',
        { _index: 124, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'diff/headersdiff',
        { _index: 126, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'diff/methoddiff',
        { _index: 128, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'diff/pathdiff',
        { _index: 130, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'diff/querydiff',
        { _index: 132, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'diff_types',
        {
          _index: 14,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'diff_types.extra',
        { _index: 273, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'diff_types.extra].includes(e.type',
        { _index: 284, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'diff_types.fail_equality',
        { _index: 274, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'diff_types.fail_function',
        { _index: 276, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'diff_types.fail_matching',
        { _index: 275, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'diff_types.invalid_value_type',
        { _index: 277, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'diff_types.missing',
        { _index: 272, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'differencekeys',
        { _index: 495, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'differror',
        {
          _index: 100,
          title: { 'interfaces/DiffError.html': {} },
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'coverage.html': {},
          },
        },
      ],
      ['distribute', { _index: 704, title: {}, body: { 'license.html': {} } }],
      [
        'documentation',
        {
          _index: 464,
          title: {},
          body: { 'coverage.html': {}, 'index.html': {}, 'license.html': {} },
        },
      ],
      ['dyson', { _index: 559, title: {}, body: { 'index.html': {} } }],
      [
        'each',
        {
          _index: 34,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'element',
        {
          _index: 35,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'emitter',
        {
          _index: 161,
          title: { 'interfaces/Emitter.html': {} },
          body: {
            'interfaces/Emitter.html': {},
            'classes/Stubborn.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'enumerations',
        {
          _index: 538,
          title: { 'miscellaneous/enumerations.html': {} },
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      [
        'err',
        {
          _index: 91,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'error',
        { _index: 207, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'error.definition',
        { _index: 250, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'error.path',
        { _index: 294, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'error.type',
        { _index: 288, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'error.value',
        { _index: 248, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'erroreq',
        { _index: 181, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'erroreq(error',
        { _index: 211, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errorext',
        { _index: 182, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errorext(error',
        { _index: 213, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errormiss',
        { _index: 183, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errormiss(error',
        { _index: 215, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errors',
        { _index: 224, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errors.foreach((e',
        { _index: 283, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errors.length',
        { _index: 261, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errors.pop',
        { _index: 267, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'errors.sort((a',
        { _index: 270, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'etc',
        {
          _index: 39,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'event',
        {
          _index: 169,
          title: {},
          body: {
            'interfaces/Emitter.html': {},
            'classes/Stubborn.html': {},
            'license.html': {},
          },
        },
      ],
      [
        'eventemitter',
        { _index: 328, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'events',
        {
          _index: 375,
          title: {},
          body: {
            'classes/Stubborn.html': {},
            'coverage.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['ex', { _index: 585, title: {}, body: { 'index.html': {} } }],
      ['exactly', { _index: 583, title: {}, body: { 'index.html': {} } }],
      [
        'example',
        { _index: 300, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['examples', { _index: 607, title: {}, body: { 'index.html': {} } }],
      [
        'existing',
        { _index: 368, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'expect(res.body).toequal',
        {
          _index: 309,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      [
        'expect(res.body).toequal(body',
        { _index: 621, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expect(res.calls.length).tobe(1',
        { _index: 677, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expect(res.calls[0]).toequal',
        { _index: 678, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expect(res.statuscode).tobe(501',
        { _index: 673, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expect(res.statuscode).tobe(501);q',
        { _index: 664, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expect(res.statuscode).tobe(status_codes.success',
        { _index: 620, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expect(res.statuscode).toequal(200',
        { _index: 643, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expect(res.statuscode).toequal(status_codes.not_implemented',
        { _index: 631, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expect(res.statuscode).toequal(status_codes.success',
        { _index: 638, title: {}, body: { 'index.html': {} } },
      ],
      [
        'expected',
        {
          _index: 296,
          title: {},
          body: { 'classes/Output.html': {}, 'index.html': {} },
        },
      ],
      [
        'export',
        {
          _index: 18,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      ['express', { _index: 723, title: {}, body: { 'license.html': {} } }],
      [
        'extends',
        {
          _index: 7,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      ['external', { _index: 553, title: {}, body: { 'index.html': {} } }],
      [
        'extra',
        {
          _index: 545,
          title: {},
          body: { 'miscellaneous/enumerations.html': {}, 'index.html': {} },
        },
      ],
      ['fact', { _index: 589, title: {}, body: { 'index.html': {} } }],
      [
        'fail_equality',
        {
          _index: 541,
          title: {},
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      [
        'fail_function',
        {
          _index: 543,
          title: {},
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      [
        'fail_matching',
        {
          _index: 542,
          title: {},
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      ['false', { _index: 626, title: {}, body: { 'index.html': {} } }],
      ['faq', { _index: 566, title: {}, body: { 'index.html': {} } }],
      ['features', { _index: 441, title: {}, body: { 'changelog.html': {} } }],
      [
        'file',
        {
          _index: 5,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'files',
        {
          _index: 450,
          title: {},
          body: { 'changelog.html': {}, 'license.html': {} },
        },
      ],
      ['find', { _index: 602, title: {}, body: { 'index.html': {} } }],
      ['finderrors', { _index: 496, title: {}, body: { 'coverage.html': {} } }],
      [
        'finderrorsobject',
        { _index: 497, title: {}, body: { 'coverage.html': {} } },
      ],
      ['fitness', { _index: 728, title: {}, body: { 'license.html': {} } }],
      ['fix', { _index: 448, title: {}, body: { 'changelog.html': {} } }],
      ['fixes', { _index: 447, title: {}, body: { 'changelog.html': {} } }],
      [
        'following',
        {
          _index: 606,
          title: {},
          body: { 'index.html': {}, 'license.html': {} },
        },
      ],
      [
        'formatarray',
        { _index: 505, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'formatdifferror',
        { _index: 498, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'formaterror',
        { _index: 506, title: {}, body: { 'coverage.html': {} } },
      ],
      ['formatpath', { _index: 499, title: {}, body: { 'coverage.html': {} } }],
      [
        'formatprimitive',
        { _index: 507, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'formatproperty',
        { _index: 508, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'formatvalue',
        { _index: 509, title: {}, body: { 'coverage.html': {} } },
      ],
      ['free', { _index: 688, title: {}, body: { 'license.html': {} } }],
      ['fullname', { _index: 684, title: {}, body: { 'license.html': {} } }],
      [
        'function',
        {
          _index: 33,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'coverage.html': {},
            'index.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      ['furnished', { _index: 711, title: {}, body: { 'license.html': {} } }],
      [
        'generic',
        {
          _index: 31,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'get(path',
        { _index: 344, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'getinfo',
        { _index: 109, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'getorigin',
        { _index: 317, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'getport',
        { _index: 318, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'getserverport',
        { _index: 378, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'getserverport(this.server',
        { _index: 390, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'getting',
        {
          _index: 411,
          title: { 'changelog.html': {}, 'index.html': {}, 'license.html': {} },
          body: {},
        },
      ],
      [
        'got(`${sb.getorigin',
        { _index: 306, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'got(`${sb.getorigin()}${path',
        { _index: 623, title: {}, body: { 'index.html': {} } },
      ],
      ['granted', { _index: 687, title: {}, body: { 'license.html': {} } }],
      [
        'hapi/accept',
        { _index: 532, title: {}, body: { 'dependencies.html': {} } },
      ],
      ['hardcoded', { _index: 600, title: {}, body: { 'index.html': {} } }],
      [
        'hash',
        {
          _index: 85,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      ['hasown', { _index: 510, title: {}, body: { 'coverage.html': {} } }],
      [
        'header',
        {
          _index: 36,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'headerdefinition',
        {
          _index: 57,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'headers',
        {
          _index: 76,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'headersdefinition',
        {
          _index: 58,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'headersdiff',
        {
          _index: 125,
          title: {},
          body: { 'classes/Debugger.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'headersdiff(route.getheaders',
        { _index: 149, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      ['help', { _index: 649, title: {}, body: { 'index.html': {} } }],
      ['here', { _index: 608, title: {}, body: { 'index.html': {} } }],
      ['hereby', { _index: 686, title: {}, body: { 'license.html': {} } }],
      ['holders', { _index: 733, title: {}, body: { 'license.html': {} } }],
      [
        'host',
        { _index: 380, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['hot', { _index: 577, title: {}, body: { 'index.html': {} } }],
      [
        'http',
        {
          _index: 13,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      [
        'http://${this.options.host}:${this.getport',
        { _index: 391, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['identifier', { _index: 465, title: {}, body: { 'coverage.html': {} } }],
      ['implemented', { _index: 628, title: {}, body: { 'index.html': {} } }],
      [
        'implements',
        { _index: 299, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['implied', { _index: 724, title: {}, body: { 'license.html': {} } }],
      [
        'import',
        {
          _index: 9,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      ['included', { _index: 717, title: {}, body: { 'license.html': {} } }],
      ['including', { _index: 698, title: {}, body: { 'license.html': {} } }],
      [
        'incomingmessage',
        {
          _index: 11,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'index',
        {
          _index: 73,
          title: { 'index.html': {} },
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'miscellaneous/enumerations.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'info',
        {
          _index: 3,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      [
        'initialized',
        { _index: 349, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['inspect', { _index: 511, title: {}, body: { 'coverage.html': {} } }],
      ['install', { _index: 569, title: {}, body: { 'index.html': {} } }],
      ['installation', { _index: 564, title: {}, body: { 'index.html': {} } }],
      [
        'instanceof',
        { _index: 151, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'interface',
        {
          _index: 0,
          title: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
          },
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'interfaces',
        {
          _index: 2,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'overview.html': {},
          },
        },
      ],
      [
        'intersectkeys',
        { _index: 500, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'invalid_value_type',
        {
          _index: 546,
          title: {},
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      ['isboolean', { _index: 514, title: {}, body: { 'coverage.html': {} } }],
      ['isdate', { _index: 515, title: {}, body: { 'coverage.html': {} } }],
      ['iserror', { _index: 516, title: {}, body: { 'coverage.html': {} } }],
      ['isfunction', { _index: 517, title: {}, body: { 'coverage.html': {} } }],
      ['isnull', { _index: 518, title: {}, body: { 'coverage.html': {} } }],
      ['isnumber', { _index: 519, title: {}, body: { 'coverage.html': {} } }],
      ['isobject', { _index: 520, title: {}, body: { 'coverage.html': {} } }],
      ['isregexp', { _index: 521, title: {}, body: { 'coverage.html': {} } }],
      ['isstring', { _index: 522, title: {}, body: { 'coverage.html': {} } }],
      [
        'isundefined',
        { _index: 523, title: {}, body: { 'coverage.html': {} } },
      ],
      ["it('should", { _index: 618, title: {}, body: { 'index.html': {} } }],
      [
        'json',
        {
          _index: 307,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      [
        'jsonarray',
        {
          _index: 28,
          title: { 'interfaces/JsonArray.html': {} },
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'jsonobject',
        {
          _index: 25,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'jsonprimitive',
        {
          _index: 20,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'jsonvalue',
        {
          _index: 27,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'key',
        {
          _index: 70,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'keystolowercase',
        { _index: 483, title: {}, body: { 'coverage.html': {} } },
      ],
      ['kind', { _index: 722, title: {}, body: { 'license.html': {} } }],
      ['know', { _index: 665, title: {}, body: { 'index.html': {} } }],
      ['liability', { _index: 737, title: {}, body: { 'license.html': {} } }],
      ['liable', { _index: 734, title: {}, body: { 'license.html': {} } }],
      [
        'license',
        {
          _index: 679,
          title: { 'license.html': {} },
          body: { 'license.html': {} },
        },
      ],
      ['limitation', { _index: 699, title: {}, body: { 'license.html': {} } }],
      ['limited', { _index: 725, title: {}, body: { 'license.html': {} } }],
      [
        'line:no',
        { _index: 157, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'lines',
        { _index: 201, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'lines.foreach(line',
        { _index: 239, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'listener',
        {
          _index: 166,
          title: {},
          body: { 'interfaces/Emitter.html': {}, 'classes/Stubborn.html': {} },
        },
      ],
      [
        'listening',
        { _index: 355, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'literal',
        {
          _index: 756,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      ['load', { _index: 578, title: {}, body: { 'index.html': {} } }],
      [
        'localhost',
        { _index: 384, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'lodash',
        {
          _index: 421,
          title: {},
          body: { 'changelog.html': {}, 'dependencies.html': {} },
        },
      ],
      ['log', { _index: 659, title: {}, body: { 'index.html': {} } }],
      [
        'logdiff',
        {
          _index: 110,
          title: {},
          body: { 'classes/Debugger.html': {}, 'index.html': {} },
        },
      ],
      [
        'logdiff(route',
        { _index: 120, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'logdiffon501',
        {
          _index: 442,
          title: {},
          body: { 'changelog.html': {}, 'coverage.html': {}, 'index.html': {} },
        },
      ],
      [
        'match',
        {
          _index: 32,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
          },
        },
      ],
      ['matched', { _index: 581, title: {}, body: { 'index.html': {} } }],
      ['matches', { _index: 627, title: {}, body: { 'index.html': {} } }],
      [
        'matchfunction',
        {
          _index: 42,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'matching',
        {
          _index: 102,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'changelog.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
            'index.html': {},
            'license.html': {},
            'modules.html': {},
            'overview.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['meets', { _index: 558, title: {}, body: { 'index.html': {} } }],
      [
        'member',
        {
          _index: 26,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'merchantability',
        { _index: 727, title: {}, body: { 'license.html': {} } },
      ],
      ['merge', { _index: 702, title: {}, body: { 'license.html': {} } }],
      [
        'method',
        {
          _index: 86,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'changelog.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'methoddefinition',
        {
          _index: 55,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'methoddiff',
        {
          _index: 127,
          title: {},
          body: { 'classes/Debugger.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'methoddiff(route.getmethod',
        { _index: 146, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'methods',
        {
          _index: 15,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'miscellaneous/enumerations.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'middleware',
        {
          _index: 93,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'miscellaneous',
        {
          _index: 537,
          title: {
            'miscellaneous/enumerations.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
          body: {
            'miscellaneous/enumerations.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['miss', { _index: 653, title: {}, body: { 'index.html': {} } }],
      [
        'missing',
        {
          _index: 544,
          title: {},
          body: { 'miscellaneous/enumerations.html': {}, 'index.html': {} },
        },
      ],
      ['mit', { _index: 680, title: {}, body: { 'license.html': {} } }],
      ['mock', { _index: 552, title: {}, body: { 'index.html': {} } }],
      ['modify', { _index: 701, title: {}, body: { 'license.html': {} } }],
      [
        'modules',
        {
          _index: 746,
          title: { 'modules.html': {} },
          body: { 'modules.html': {} },
        },
      ],
      [
        'name',
        {
          _index: 116,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'interfaces/Emitter.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      ['needed', { _index: 615, title: {}, body: { 'index.html': {} } }],
      [
        'new',
        {
          _index: 144,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'classes/Stubborn.html': {},
            'coverage.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'newline',
        { _index: 184, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'next',
        {
          _index: 96,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'nextfunction',
        {
          _index: 90,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      ['nock', { _index: 557, title: {}, body: { 'index.html': {} } }],
      [
        'noninfringement',
        { _index: 731, title: {}, body: { 'license.html': {} } },
      ],
      [
        'not_implemented',
        {
          _index: 549,
          title: {},
          body: {
            'miscellaneous/enumerations.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['notice', { _index: 715, title: {}, body: { 'license.html': {} } }],
      [
        'npm',
        {
          _index: 434,
          title: {},
          body: { 'changelog.html': {}, 'index.html': {} },
        },
      ],
      [
        'null',
        {
          _index: 24,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'number',
        {
          _index: 22,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'object',
        {
          _index: 337,
          title: {},
          body: {
            'classes/Stubborn.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'object.assign',
        { _index: 383, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'objectorarray',
        {
          _index: 752,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'objecttostring',
        { _index: 524, title: {}, body: { 'coverage.html': {} } },
      ],
      ['obtaining', { _index: 691, title: {}, body: { 'license.html': {} } }],
      [
        'off(event',
        {
          _index: 164,
          title: {},
          body: { 'interfaces/Emitter.html': {}, 'classes/Stubborn.html': {} },
        },
      ],
      [
        'on(event',
        {
          _index: 170,
          title: {},
          body: { 'interfaces/Emitter.html': {}, 'classes/Stubborn.html': {} },
        },
      ],
      [
        'once',
        {
          _index: 163,
          title: {},
          body: { 'interfaces/Emitter.html': {}, 'classes/Stubborn.html': {} },
        },
      ],
      [
        'once(event',
        {
          _index: 172,
          title: {},
          body: { 'interfaces/Emitter.html': {}, 'classes/Stubborn.html': {} },
        },
      ],
      ['one', { _index: 584, title: {}, body: { 'index.html': {} } }],
      [
        'optional',
        {
          _index: 117,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'interfaces/Emitter.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      [
        'options',
        {
          _index: 310,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      [
        'options.port',
        { _index: 350, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'origin',
        { _index: 347, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['otherwise', { _index: 742, title: {}, body: { 'license.html': {} } }],
      [
        'out',
        {
          _index: 143,
          title: {},
          body: { 'classes/Debugger.html': {}, 'license.html': {} },
        },
      ],
      [
        'out.rendererrors',
        { _index: 145, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        "out.rendererrors('body",
        { _index: 154, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        "out.rendererrors('path",
        { _index: 147, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'output',
        {
          _index: 133,
          title: { 'classes/Output.html': {} },
          body: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'coverage.html': {},
          },
        },
      ],
      [
        'overview',
        {
          _index: 747,
          title: { 'overview.html': {} },
          body: { 'overview.html': {} },
        },
      ],
      [
        'pach',
        { _index: 361, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'package',
        { _index: 531, title: { 'dependencies.html': {} }, body: {} },
      ],
      ['packaged', { _index: 449, title: {}, body: { 'changelog.html': {} } }],
      ['page', { _index: 630, title: {}, body: { 'index.html': {} } }],
      [
        'param',
        { _index: 394, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['parameter', { _index: 586, title: {}, body: { 'index.html': {} } }],
      [
        'parameters',
        {
          _index: 115,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'interfaces/Emitter.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'parseint(value',
        { _index: 644, title: {}, body: { 'index.html': {} } },
      ],
      ['parser', { _index: 533, title: {}, body: { 'dependencies.html': {} } }],
      [
        'part',
        {
          _index: 52,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      ['particular', { _index: 729, title: {}, body: { 'license.html': {} } }],
      [
        'patch',
        {
          _index: 319,
          title: {},
          body: {
            'classes/Stubborn.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'patch(path',
        { _index: 359, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'path',
        {
          _index: 84,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'path).setbody(body',
        { _index: 398, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'pathdefinition',
        {
          _index: 56,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'pathdiff',
        {
          _index: 129,
          title: {},
          body: { 'classes/Debugger.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'pathdiff(route.getpath',
        { _index: 148, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      ['permission', { _index: 685, title: {}, body: { 'license.html': {} } }],
      ['permit', { _index: 709, title: {}, body: { 'license.html': {} } }],
      ['person', { _index: 690, title: {}, body: { 'license.html': {} } }],
      ['persons', { _index: 710, title: {}, body: { 'license.html': {} } }],
      ['picked', { _index: 598, title: {}, body: { 'index.html': {} } }],
      [
        'port',
        { _index: 311, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['portions', { _index: 719, title: {}, body: { 'license.html': {} } }],
      [
        'possible',
        {
          _index: 48,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'post',
        {
          _index: 320,
          title: {},
          body: {
            'classes/Stubborn.html': {},
            'miscellaneous/enumerations.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'post(path',
        { _index: 362, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'private',
        {
          _index: 175,
          title: {},
          body: { 'classes/Output.html': {}, 'classes/Stubborn.html': {} },
        },
      ],
      [
        'promise',
        { _index: 371, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'promise(resolve',
        { _index: 403, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'properties',
        {
          _index: 160,
          title: {},
          body: {
            'interfaces/DiffError.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      ['property', { _index: 671, title: {}, body: { 'index.html': {} } }],
      ['provided', { _index: 720, title: {}, body: { 'license.html': {} } }],
      [
        'public',
        {
          _index: 108,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      ['publish', { _index: 703, title: {}, body: { 'license.html': {} } }],
      [
        'pulltab',
        { _index: 185, title: {}, body: { 'classes/Output.html': {} } },
      ],
      ['purpose', { _index: 730, title: {}, body: { 'license.html': {} } }],
      [
        'pushtab',
        { _index: 186, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'put',
        {
          _index: 321,
          title: {},
          body: {
            'classes/Stubborn.html': {},
            'miscellaneous/enumerations.html': {},
          },
        },
      ],
      [
        'put(path',
        { _index: 364, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['q', { _index: 646, title: {}, body: { 'index.html': {} } }],
      [
        'query',
        {
          _index: 38,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'querydefinition',
        {
          _index: 66,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'querydiff',
        {
          _index: 131,
          title: {},
          body: { 'classes/Debugger.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'querydiff(route.getqueryparameters',
        { _index: 150, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'queryparameterdefinition',
        {
          _index: 65,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'queryparameterdefinitionprimitives',
        {
          _index: 64,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'randomly',
        { _index: 352, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['rec', { _index: 481, title: {}, body: { 'coverage.html': {} } }],
      [
        'received',
        {
          _index: 295,
          title: {},
          body: { 'classes/Output.html': {}, 'index.html': {} },
        },
      ],
      ['receiving', { _index: 652, title: {}, body: { 'index.html': {} } }],
      [
        'record',
        {
          _index: 59,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'reducetosinglestring',
        { _index: 525, title: {}, body: { 'coverage.html': {} } },
      ],
      ['regex', { _index: 639, title: {}, body: { 'index.html': {} } }],
      [
        'regexp',
        {
          _index: 44,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'register',
        { _index: 335, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'registerlogdiff',
        { _index: 474, title: {}, body: { 'coverage.html': {} } },
      ],
      ['release', { _index: 568, title: {}, body: { 'index.html': {} } }],
      [
        'remove',
        { _index: 339, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'removeroute',
        { _index: 322, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'removeroute(route',
        { _index: 366, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'render',
        { _index: 187, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'rendererror',
        { _index: 188, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'rendererror(error',
        { _index: 221, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'rendererrors',
        { _index: 189, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'rendererrors(cat',
        { _index: 223, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'rendermultipleserrors',
        { _index: 190, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'rendermultipleserrors(errors',
        { _index: 226, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'renderoneerror',
        { _index: 191, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'renderoneerror(errors',
        { _index: 228, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'repeat(this.currenttab',
        { _index: 259, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'req',
        {
          _index: 94,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'request',
        {
          _index: 51,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'request(`/?page=1&limit=10',
        { _index: 633, title: {}, body: { 'index.html': {} } },
      ],
      [
        'request(`/?page=2',
        { _index: 634, title: {}, body: { 'index.html': {} } },
      ],
      ['request(path', { _index: 622, title: {}, body: { 'index.html': {} } }],
      [
        'request(sb.getorigin',
        { _index: 663, title: {}, body: { 'index.html': {} } },
      ],
      [
        'requestbody',
        {
          _index: 79,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'requestdiff',
        { _index: 489, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'requesthash',
        {
          _index: 81,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'requestheaders',
        {
          _index: 77,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'requestinfo',
        {
          _index: 83,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'requestmatcher',
        {
          _index: 97,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'requestmethod',
        {
          _index: 82,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'requestpath',
        {
          _index: 80,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'requestquery',
        {
          _index: 78,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      ['requests', { _index: 561, title: {}, body: { 'index.html': {} } }],
      [
        'res',
        {
          _index: 95,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'resolve',
        { _index: 406, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'resolved',
        { _index: 372, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['respond', { _index: 587, title: {}, body: { 'index.html': {} } }],
      ['responds', { _index: 590, title: {}, body: { 'index.html': {} } }],
      [
        'response',
        {
          _index: 89,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'responsebody',
        {
          _index: 99,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'responsedefinition',
        {
          _index: 74,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'responseheaders',
        {
          _index: 98,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      ['responses', { _index: 555, title: {}, body: { 'index.html': {} } }],
      ['responsetype', { _index: 624, title: {}, body: { 'index.html': {} } }],
      ['restriction', { _index: 697, title: {}, body: { 'license.html': {} } }],
      [
        'result',
        {
          _index: 101,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'changelog.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
            'index.html': {},
            'license.html': {},
            'modules.html': {},
            'overview.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'results',
        {
          _index: 103,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'changelog.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/enumerations.html': {},
            'index.html': {},
            'license.html': {},
            'modules.html': {},
            'overview.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'return',
        {
          _index: 135,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
          },
        },
      ],
      ['returned', { _index: 651, title: {}, body: { 'index.html': {} } }],
      [
        'returns',
        {
          _index: 119,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      ['rights', { _index: 700, title: {}, body: { 'license.html': {} } }],
      [
        'route',
        {
          _index: 121,
          title: {},
          body: {
            'classes/Debugger.html': {},
            'classes/Stubborn.html': {},
            'changelog.html': {},
            'coverage.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'router',
        { _index: 312, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'routes',
        {
          _index: 340,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      ['save', { _index: 570, title: {}, body: { 'index.html': {} } }],
      [
        'sb',
        {
          _index: 303,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      ['sb.clear', { _index: 617, title: {}, body: { 'index.html': {} } }],
      ['sb.get', { _index: 674, title: {}, body: { 'index.html': {} } }],
      [
        "sb.get('/').setqueryparameters",
        { _index: 629, title: {}, body: { 'index.html': {} } },
      ],
      [
        "sb.get('/').setresponsebody",
        {
          _index: 304,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      ['sb.post', { _index: 640, title: {}, body: { 'index.html': {} } }],
      ['sb.start', { _index: 611, title: {}, body: { 'index.html': {} } }],
      ['sb.stop', { _index: 613, title: {}, body: { 'index.html': {} } }],
      [
        'scope',
        {
          _index: 68,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'searchparams',
        {
          _index: 87,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      ['security', { _index: 433, title: {}, body: { 'changelog.html': {} } }],
      ['see', { _index: 645, title: {}, body: { 'index.html': {} } }],
      ['sell', { _index: 707, title: {}, body: { 'license.html': {} } }],
      ['send', { _index: 595, title: {}, body: { 'index.html': {} } }],
      ['sent', { _index: 592, title: {}, body: { 'index.html': {} } }],
      ['separate', { _index: 563, title: {}, body: { 'index.html': {} } }],
      [
        'server',
        {
          _index: 313,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      [
        'serverresponse',
        {
          _index: 12,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'set',
        {
          _index: 351,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      ['setheaders', { _index: 658, title: {}, body: { 'index.html': {} } }],
      [
        'setheaders(null',
        { _index: 675, title: {}, body: { 'index.html': {} } },
      ],
      [
        'setheaders(wildcard',
        { _index: 635, title: {}, body: { 'index.html': {} } },
      ],
      [
        "setresponsebody('content",
        { _index: 676, title: {}, body: { 'index.html': {} } },
      ],
      ['setup', { _index: 672, title: {}, body: { 'index.html': {} } }],
      ['shall', { _index: 716, title: {}, body: { 'license.html': {} } }],
      ['slug', { _index: 641, title: {}, body: { 'index.html': {} } }],
      ['software', { _index: 693, title: {}, body: { 'license.html': {} } }],
      [
        'source',
        {
          _index: 4,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      [
        'specify',
        {
          _index: 40,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'src/.../constants.ts',
        {
          _index: 539,
          title: {},
          body: {
            'miscellaneous/enumerations.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'src/.../index.ts',
        {
          _index: 751,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'src/.../stubborn.ts',
        {
          _index: 754,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'src/.../utils.ts',
        {
          _index: 753,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'src/@types/emitter.ts',
        {
          _index: 162,
          title: {},
          body: { 'interfaces/Emitter.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/@types/emitter.ts:2',
        { _index: 171, title: {}, body: { 'interfaces/Emitter.html': {} } },
      ],
      [
        'src/@types/emitter.ts:3',
        { _index: 173, title: {}, body: { 'interfaces/Emitter.html': {} } },
      ],
      [
        'src/@types/emitter.ts:4',
        { _index: 168, title: {}, body: { 'interfaces/Emitter.html': {} } },
      ],
      [
        'src/@types/index.ts',
        {
          _index: 6,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'src/constants.ts',
        {
          _index: 477,
          title: {},
          body: {
            'coverage.html': {},
            'miscellaneous/enumerations.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'src/debug/debugger.ts',
        {
          _index: 107,
          title: {},
          body: { 'classes/Debugger.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/debug/debugger.ts:10',
        { _index: 114, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'src/debug/debugger.ts:13',
        { _index: 118, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'src/debug/debugger.ts:24',
        { _index: 122, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'src/debug/output.ts',
        {
          _index: 174,
          title: {},
          body: { 'classes/Output.html': {}, 'coverage.html': {} },
        },
      ],
      [
        'src/debug/output.ts:10',
        { _index: 200, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:130',
        { _index: 222, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:153',
        { _index: 231, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:157',
        { _index: 206, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:21',
        { _index: 209, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:27',
        { _index: 217, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:31',
        { _index: 212, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:42',
        { _index: 216, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:49',
        { _index: 214, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:56',
        { _index: 220, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:60',
        { _index: 219, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:64',
        { _index: 218, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:68',
        { _index: 203, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:7',
        { _index: 196, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:72',
        { _index: 233, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:76',
        { _index: 235, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:80',
        { _index: 225, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:93',
        { _index: 229, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/debug/output.ts:98',
        { _index: 227, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'src/diff/bodydiff.ts',
        { _index: 480, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/diff/headersdiff.ts',
        { _index: 482, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/diff/methoddiff.ts',
        { _index: 484, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/diff/pathdiff.ts',
        { _index: 485, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/diff/querydiff.ts',
        { _index: 486, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/diff/requestdiff.ts',
        { _index: 488, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/diff/utils.ts',
        {
          _index: 490,
          title: {},
          body: { 'coverage.html': {}, 'miscellaneous/typealiases.html': {} },
        },
      ],
      [
        'src/inspect.ts',
        { _index: 502, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/route.ts',
        { _index: 470, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/router.ts',
        { _index: 473, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'src/stubborn.ts',
        {
          _index: 298,
          title: {},
          body: {
            'classes/Stubborn.html': {},
            'coverage.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'src/stubborn.ts:104',
        { _index: 360, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:114',
        { _index: 363, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:124',
        { _index: 365, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:132',
        { _index: 334, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:141',
        { _index: 367, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:149',
        { _index: 370, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:164',
        { _index: 373, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:170',
        { _index: 357, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:175',
        { _index: 358, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:180',
        { _index: 356, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:30',
        { _index: 332, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:31',
        { _index: 330, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:32',
        { _index: 331, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:33',
        { _index: 329, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:34',
        { _index: 327, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:57',
        { _index: 348, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:65',
        { _index: 346, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:72',
        { _index: 338, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:85',
        { _index: 342, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/stubborn.ts:94',
        { _index: 345, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'src/utils.ts',
        { _index: 528, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'start',
        { _index: 323, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'start(port',
        { _index: 369, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'started',
        {
          _index: 354,
          title: { 'changelog.html': {}, 'index.html': {}, 'license.html': {} },
          body: { 'classes/Stubborn.html': {} },
        },
      ],
      ['statements', { _index: 466, title: {}, body: { 'coverage.html': {} } }],
      [
        'status_codes',
        {
          _index: 540,
          title: {},
          body: { 'miscellaneous/enumerations.html': {}, 'index.html': {} },
        },
      ],
      [
        'statuscode',
        {
          _index: 75,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'stop',
        { _index: 324, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'stopped',
        { _index: 374, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      ['strictly', { _index: 560, title: {}, body: { 'index.html': {} } }],
      [
        'string',
        {
          _index: 21,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'index.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'string(this.request.body',
        { _index: 153, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      ['stringify', { _index: 501, title: {}, body: { 'coverage.html': {} } }],
      [
        'stubborn',
        {
          _index: 297,
          title: { 'classes/Stubborn.html': {} },
          body: {
            'classes/Stubborn.html': {},
            'coverage.html': {},
            'index.html': {},
          },
        },
      ],
      [
        'stubbornoptions',
        {
          _index: 326,
          title: {},
          body: {
            'classes/Stubborn.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      ['stuff', { _index: 637, title: {}, body: { 'index.html': {} } }],
      [
        'stylizenocolor',
        { _index: 526, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'stylizewithcolor',
        { _index: 527, title: {}, body: { 'coverage.html': {} } },
      ],
      ['subject', { _index: 712, title: {}, body: { 'license.html': {} } }],
      ['sublicense', { _index: 705, title: {}, body: { 'license.html': {} } }],
      ['substantial', { _index: 718, title: {}, body: { 'license.html': {} } }],
      [
        'substractionlabel',
        { _index: 192, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'substractionlabel(error',
        { _index: 230, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'substration',
        { _index: 193, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'substration(text',
        { _index: 232, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'subtraction',
        { _index: 253, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'success',
        {
          _index: 547,
          title: {},
          body: { 'miscellaneous/enumerations.html': {} },
        },
      ],
      ['suite', { _index: 605, title: {}, body: { 'index.html': {} } }],
      [
        'switch',
        { _index: 287, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'symbol',
        {
          _index: 165,
          title: {},
          body: { 'interfaces/Emitter.html': {}, 'classes/Stubborn.html': {} },
        },
      ],
      [
        "symbol.for('cleared",
        {
          _index: 760,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        "symbol.for('not_implemented",
        {
          _index: 758,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      [
        "symbol.for('wildcard",
        {
          _index: 761,
          title: {},
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['tab', { _index: 194, title: {}, body: { 'classes/Output.html': {} } }],
      [
        'tab(text',
        { _index: 234, title: {}, body: { 'classes/Output.html': {} } },
      ],
      ['table', { _index: 530, title: {}, body: { 'coverage.html': {} } }],
      [
        "tablesort(document.getelementbyid('coverage",
        { _index: 529, title: {}, body: { 'coverage.html': {} } },
      ],
      [
        'template',
        {
          _index: 71,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'templatearray',
        {
          _index: 72,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'templatefunction',
        {
          _index: 67,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      [
        'templateobject',
        {
          _index: 69,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      ['test', { _index: 596, title: {}, body: { 'index.html': {} } }],
      ['testing', { _index: 575, title: {}, body: { 'index.html': {} } }],
      ['text', { _index: 204, title: {}, body: { 'classes/Output.html': {} } }],
      ['therefore', { _index: 648, title: {}, body: { 'index.html': {} } }],
      [
        'this.add',
        { _index: 246, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.add(color.bold.underline(uccat',
        { _index: 245, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.add(line',
        { _index: 240, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.add(this.addition(this.tab(addition',
        { _index: 252, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.add(this.substration(this.tab(substration',
        { _index: 251, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.add(this.substration(this.tab(subtraction',
        { _index: 254, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.additionlabel(error',
        { _index: 249, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.category(cat',
        { _index: 263, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.currenttab',
        { _index: 256, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.emitter',
        { _index: 389, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.emitter.emit(events.cleared',
        { _index: 393, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.emitter.off(event',
        { _index: 410, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.emitter.on(event',
        { _index: 408, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.emitter.once(event',
        { _index: 409, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.erroreq(error',
        { _index: 290, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.errorext(error',
        { _index: 293, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.errormiss(error',
        { _index: 292, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.newline',
        { _index: 262, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.options',
        { _index: 382, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.options.host',
        { _index: 388, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        "this.output.join('\\n",
        { _index: 255, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.output.push(lines',
        { _index: 241, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.port',
        { _index: 385, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.pulltab',
        { _index: 286, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.pushtab',
        { _index: 269, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.rendererror(e',
        { _index: 285, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.rendererror(error',
        { _index: 268, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.rendermultipleserrors(errors',
        { _index: 266, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.renderoneerror(errors',
        { _index: 265, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'this.request.body',
        { _index: 140, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'this.request.hash',
        { _index: 141, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'this.request.headers',
        { _index: 138, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'this.request.method',
        { _index: 136, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'this.request.path',
        { _index: 137, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'this.request.query',
        { _index: 139, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'this.router',
        { _index: 387, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.addroute(route',
        { _index: 401, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.clear',
        { _index: 392, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.createroute(methods.delete',
        { _index: 395, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.createroute(methods.get',
        { _index: 396, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.createroute(methods.patch',
        { _index: 397, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.createroute(methods.post',
        { _index: 399, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.createroute(methods.put',
        { _index: 400, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.handle(this.server',
        { _index: 405, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.router.removeroute(route',
        { _index: 402, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.server',
        { _index: 386, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.server.close',
        { _index: 407, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.server.listen(this.port',
        { _index: 404, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'this.substractionlabel(error',
        { _index: 247, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'throwhttperrors',
        { _index: 625, title: {}, body: { 'index.html': {} } },
      ],
      ['throwing', { _index: 662, title: {}, body: { 'index.html': {} } }],
      [
        'todo',
        {
          _index: 29,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      ['tool', { _index: 576, title: {}, body: { 'index.html': {} } }],
      ['tort', { _index: 741, title: {}, body: { 'license.html': {} } }],
      [
        'true',
        { _index: 308, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'tslint:disable',
        { _index: 156, title: {}, body: { 'classes/Debugger.html': {} } },
      ],
      [
        'type',
        {
          _index: 19,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'coverage.html': {},
            'dependencies.html': {},
            'miscellaneous/typealiases.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'typealiases',
        {
          _index: 749,
          title: { 'miscellaneous/typealiases.html': {} },
          body: {},
        },
      ],
      [
        'typeof',
        {
          _index: 45,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      [
        'types',
        {
          _index: 54,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      [
        'types.indexof(a.type',
        { _index: 280, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'types.indexof(b.type',
        { _index: 282, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'types.length',
        { _index: 279, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'types/emitter',
        { _index: 377, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'typescript',
        { _index: 301, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'uccat',
        { _index: 242, title: {}, body: { 'classes/Output.html': {} } },
      ],
      [
        'undefined',
        {
          _index: 47,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'miscellaneous/typealiases.html': {},
          },
        },
      ],
      ['unload', { _index: 579, title: {}, body: { 'index.html': {} } }],
      ['up', { _index: 599, title: {}, body: { 'index.html': {} } }],
      ['update', { _index: 669, title: {}, body: { 'index.html': {} } }],
      ['upgrade', { _index: 419, title: {}, body: { 'changelog.html': {} } }],
      [
        'urlsearchparams',
        {
          _index: 88,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      ['usage', { _index: 565, title: {}, body: { 'index.html': {} } }],
      [
        'use',
        {
          _index: 30,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'index.html': {},
            'license.html': {},
          },
        },
      ],
      ['user', { _index: 655, title: {}, body: { 'index.html': {} } }],
      ['using', { _index: 601, title: {}, body: { 'index.html': {} } }],
      [
        'utils',
        { _index: 379, title: {}, body: { 'classes/Stubborn.html': {} } },
      ],
      [
        'validatefn',
        {
          _index: 755,
          title: {},
          body: { 'miscellaneous/typealiases.html': {} },
        },
      ],
      ['validates', { _index: 591, title: {}, body: { 'index.html': {} } }],
      [
        'value',
        {
          _index: 41,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
            'miscellaneous/enumerations.html': {},
            'index.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      [
        'values',
        {
          _index: 49,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
          },
        },
      ],
      ['variable', { _index: 478, title: {}, body: { 'coverage.html': {} } }],
      [
        'variables',
        {
          _index: 757,
          title: { 'miscellaneous/variables.html': {} },
          body: { 'miscellaneous/variables.html': {} },
        },
      ],
      ['very', { _index: 588, title: {}, body: { 'index.html': {} } }],
      [
        'void',
        {
          _index: 92,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'classes/Debugger.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/Emitter.html': {},
            'interfaces/JsonArray.html': {},
            'classes/Output.html': {},
            'classes/Stubborn.html': {},
          },
        },
      ],
      ['warranties', { _index: 726, title: {}, body: { 'license.html': {} } }],
      ['warranty', { _index: 721, title: {}, body: { 'license.html': {} } }],
      ['web', { _index: 551, title: {}, body: { 'index.html': {} } }],
      ['webserver', { _index: 580, title: {}, body: { 'index.html': {} } }],
      ['whether', { _index: 738, title: {}, body: { 'license.html': {} } }],
      [
        'wildcard',
        {
          _index: 16,
          title: {},
          body: {
            'interfaces/BodyDefinitionArray.html': {},
            'interfaces/DiffError.html': {},
            'interfaces/JsonArray.html': {},
            'coverage.html': {},
            'index.html': {},
            'miscellaneous/variables.html': {},
          },
        },
      ],
      ['without', { _index: 696, title: {}, body: { 'license.html': {} } }],
      ['working', { _index: 604, title: {}, body: { 'index.html': {} } }],
      [
        'ws',
        {
          _index: 302,
          title: {},
          body: { 'classes/Stubborn.html': {}, 'index.html': {} },
        },
      ],
      ['wsusage', { _index: 574, title: {}, body: { 'index.html': {} } }],
      ['wsyarn', { _index: 572, title: {}, body: { 'index.html': {} } }],
      ['x', { _index: 636, title: {}, body: { 'index.html': {} } }],
      ['year', { _index: 683, title: {}, body: { 'license.html': {} } }],
      ['z', { _index: 642, title: {}, body: { 'index.html': {} } }],
    ],
    pipeline: ['stemmer'],
  },
  store: {
    'interfaces/BodyDefinitionArray.html': {
      url: 'interfaces/BodyDefinitionArray.html',
      title: 'interface - BodyDefinitionArray',
      body:
        '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BodyDefinitionArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from \'http\';\nimport { DIFF_TYPES, METHODS, WILDCARD } from \'../constants\';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Debugger.html': {
      url: 'classes/Debugger.html',
      title: 'class - Debugger',
      body:
        "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Debugger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/Debugger.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getInfo\n                            \n                            \n                                    Public\n                                logDiff\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/debug/Debugger.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInfo\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { method: any; path: any; headers: any; query: any; body: any; hash: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            logDiff\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logDiff(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Request } from '../@types';\nimport { bodyDiff } from '../diff/bodyDiff';\nimport { headersDiff } from '../diff/headersDiff';\nimport { methodDiff } from '../diff/methodDiff';\nimport { pathDiff } from '../diff/pathDiff';\nimport { queryDiff } from '../diff/queryDiff';\nimport { Route } from '../Route';\nimport { Output } from './Output';\n\nexport class Debugger {\n  constructor(private request: Request) {}\n\n  public getInfo() {\n    return {\n      method: this.request.method,\n      path: this.request.path,\n      headers: this.request.headers,\n      query: this.request.query,\n      body: this.request.body,\n      hash: this.request.hash,\n    };\n  }\n\n  public logDiff(route: Route) {\n    const out = new Output();\n\n    out.renderErrors(\n      'Method',\n      methodDiff(route.getMethod(), this.request.method),\n    );\n    out.renderErrors('Path', pathDiff(route.getPath(), this.request.path));\n    out.renderErrors(\n      'Headers',\n      headersDiff(route.getHeaders(), this.request.headers),\n    );\n    out.renderErrors(\n      'Query',\n      queryDiff(route.getQueryParameters(), this.request.query),\n    );\n    const body =\n      this.request.body instanceof Buffer\n        ? String(this.request.body)\n        : this.request.body;\n    out.renderErrors('Body', bodyDiff(route.getBody(), body));\n\n    // tslint:disable-next-line:no-console\n    console.log(out.render());\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'interfaces/DiffError.html': {
      url: 'interfaces/DiffError.html',
      title: 'interface - DiffError',
      body:
        '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  DiffError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        definition\n                                \n                                \n                                        path\n                                \n                                \n                                        type\n                                \n                                \n                                        value\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        definition\n                                    \n                                \n                                \n                                    \n                                        definition:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:         DIFF_TYPES\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DIFF_TYPES\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                    \n                                \n                                \n                                    \n                                        value:         JsonValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JsonValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from \'http\';\nimport { DIFF_TYPES, METHODS, WILDCARD } from \'../constants\';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/Emitter.html': {
      url: 'interfaces/Emitter.html',
      title: 'interface - Emitter',
      body:
        '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Emitter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/Emitter.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    off\n                                \n                                \n                                    on\n                                \n                                \n                                    once\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            off\n                        \n                        \n                    \n                \n            \n            \n                \noff(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/@types/Emitter.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            on\n                        \n                        \n                    \n                \n            \n            \n                \non(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/@types/Emitter.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            once\n                        \n                        \n                    \n                \n            \n            \n                \nonce(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/@types/Emitter.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface Emitter {\n  on(event: symbol, listener: (...args: any[]) => void): this;\n  once(event: symbol, listener: (...args: any[]) => void): this;\n  off(event: symbol, listener: (...args: any[]) => void): this;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/JsonArray.html': {
      url: 'interfaces/JsonArray.html',
      title: 'interface - JsonArray',
      body:
        '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JsonArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from \'http\';\nimport { DIFF_TYPES, METHODS, WILDCARD } from \'../constants\';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type Request = IncomingMessage &\n  RequestInfo & {\n    searchParams?: URLSearchParams;\n  };\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue;\n\nexport interface DiffError {\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Output.html': {
      url: 'classes/Output.html',
      title: 'class - Output',
      body:
        "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Output\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/Output.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentTab\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                addition\n                            \n                            \n                                    Private\n                                additionLabel\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                errorEq\n                            \n                            \n                                    Public\n                                errorExt\n                            \n                            \n                                    Public\n                                errorMiss\n                            \n                            \n                                    Public\n                                newLine\n                            \n                            \n                                    Public\n                                pullTab\n                            \n                            \n                                    Public\n                                pushTab\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                renderError\n                            \n                            \n                                    Public\n                                renderErrors\n                            \n                            \n                                    Public\n                                renderMultiplesErrors\n                            \n                            \n                                    Public\n                                renderOneError\n                            \n                            \n                                    Private\n                                substractionLabel\n                            \n                            \n                                    Public\n                                substration\n                            \n                            \n                                    Public\n                                tab\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(output: string[])\n                    \n                \n                        \n                            \n                                Defined in src/debug/Output.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        output\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            currentTab\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in src/debug/Output.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            add\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    add(lines: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addition\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addition(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            additionLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    additionLabel(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            category\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    category(cat: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorEq\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorEq(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorExt\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorExt(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            errorMiss\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    errorMiss(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            newLine\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    newLine()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            pullTab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    pullTab()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            pushTab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    pushTab()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            render\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderError(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderErrors\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderErrors(cat: string, errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderMultiplesErrors\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderMultiplesErrors(errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            renderOneError\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    renderOneError(errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            substractionLabel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    substractionLabel(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            substration\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    substration(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            tab\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    tab(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Color from 'chalk';\n\nimport { DiffError } from '../@types';\nimport { DIFF_TYPES } from '../constants';\n\nexport class Output {\n  private currentTab = 0;\n  constructor(private output: string[] = []) {}\n\n  public add(lines: string | string[]) {\n    if (Array.isArray(lines)) {\n      lines.forEach(line => this.add(line));\n      return this;\n    }\n\n    this.output.push(lines);\n\n    return this;\n  }\n\n  public category(cat: string) {\n    const ucCat = cat[0].toUpperCase() + cat.slice(1);\n\n    return this.add(Color.bold.underline(ucCat));\n  }\n\n  public newLine() {\n    return this.add('');\n  }\n\n  public errorEq(error: DiffError) {\n    const substration = `${this.substractionLabel(error)}: ${String(\n      error.value,\n    )}`;\n    const addition = `${this.additionLabel(error)}: ${String(\n      error.definition,\n    )}`;\n    this.add(this.substration(this.tab(substration)));\n    this.add(this.addition(this.tab(addition)));\n  }\n\n  public errorMiss(error: DiffError) {\n    const addition = `${this.additionLabel(error)}: ${String(\n      error.definition,\n    )}`;\n    this.add(this.addition(this.tab(addition)));\n  }\n\n  public errorExt(error: DiffError) {\n    const subtraction = `${this.substractionLabel(error)}: ${String(\n      error.value,\n    )}`;\n    this.add(this.substration(this.tab(subtraction)));\n  }\n\n  public render() {\n    return this.output.join('\\n');\n  }\n\n  public pushTab() {\n    this.currentTab++;\n  }\n\n  public pullTab() {\n    this.currentTab--;\n  }\n\n  public addition(text: string) {\n    return Color.green(`+ ${text}`);\n  }\n\n  public substration(text: string) {\n    return Color.red(`- ${text}`);\n  }\n\n  public tab(text: string) {\n    return ' '.repeat(this.currentTab * 2) + text;\n  }\n\n  public renderErrors(cat: string, errors: DiffError[]) {\n    if (errors.length === 0) {\n      return;\n    }\n\n    this.newLine();\n\n    this.category(cat);\n    errors.length === 1\n      ? this.renderOneError(errors)\n      : this.renderMultiplesErrors(errors);\n  }\n\n  public renderOneError(errors: DiffError[]) {\n    const error = errors.pop() as DiffError;\n    this.renderError(error);\n  }\n\n  public renderMultiplesErrors(errors: DiffError[]) {\n    this.pushTab();\n\n    errors.sort((a: DiffError, b: DiffError) => {\n      const types = [\n        DIFF_TYPES.MISSING,\n        DIFF_TYPES.EXTRA,\n        DIFF_TYPES.FAIL_EQUALITY,\n        DIFF_TYPES.FAIL_MATCHING,\n        DIFF_TYPES.FAIL_FUNCTION,\n        DIFF_TYPES.INVALID_VALUE_TYPE,\n      ];\n      const aWeight = types.length - types.indexOf(a.type);\n      const bWeight = types.length - types.indexOf(b.type);\n\n      if (aWeight === bWeight) {\n        return 0;\n      }\n\n      return aWeight > bWeight ? -1 : 1;\n    });\n\n    errors.forEach((e, i) => {\n      if (i !== 0 && ![DIFF_TYPES.MISSING, DIFF_TYPES.EXTRA].includes(e.type)) {\n        this.newLine();\n      }\n\n      this.renderError(e);\n    });\n    this.pullTab();\n  }\n\n  public renderError(error: DiffError) {\n    switch (error.type) {\n      case DIFF_TYPES.FAIL_EQUALITY:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.FAIL_MATCHING:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.FAIL_FUNCTION:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.MISSING:\n        this.errorMiss(error);\n        break;\n      case DIFF_TYPES.EXTRA:\n        this.errorExt(error);\n        break;\n      case DIFF_TYPES.INVALID_VALUE_TYPE:\n        this.errorEq(error);\n        break;\n    }\n  }\n\n  private substractionLabel(error: DiffError) {\n    return error.path === '' ? 'Received' : error.path;\n  }\n\n  private additionLabel(error: DiffError) {\n    return error.path === '' ? 'Expected' : error.path;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'classes/Stubborn.html': {
      url: 'classes/Stubborn.html',
      title: 'class - Stubborn',
      body:
        "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stubborn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Stubborn.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            Emitter\n            \n\n            \n                Example\n            \n            \n                        \n                            ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n                        \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitter\n                            \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRoute\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getOrigin\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                off\n                            \n                            \n                                    Public\n                                on\n                            \n                            \n                                    Public\n                                once\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                            \n                                    Public\n                                removeRoute\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: StubbornOptions)\n                    \n                \n                        \n                            \n                                Defined in src/Stubborn.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        StubbornOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            emitter\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventEmitter\n\n                        \n                    \n                    \n                        \n                            Default value : new EventEmitter()\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         StubbornOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            port\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            router\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Router\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            server\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Server\n\n                        \n                    \n                        \n                            \n                                    Defined in src/Stubborn.ts:30\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            addRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addRoute(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:132\n                \n            \n\n\n            \n                \n                    Register a new route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route a Route object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clear\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:72\n                \n            \n\n\n            \n                \n                    Remove all routes from the server\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:85\n                \n            \n\n\n            \n                \n                    Create and Register a new DELETE route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            get\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:94\n                \n            \n\n\n            \n                \n                    Create and Register a new GET route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getOrigin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrigin()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:65\n                \n            \n\n\n            \n                \n                    Returns the server origin (http://:)\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the server origin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPort\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:57\n                \n            \n\n\n            \n                \n                    Returns the server port.\nIf the server is initialized with options.port set to 0 this method\nwill return the randomly affected port only after the server is started\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        Listening port or null if the server is not started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            off\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    off(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:180\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            on\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    on(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            once\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    once(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:175\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:104\n                \n            \n\n\n            \n                \n                    Create and Register a new PACH route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            post\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:114\n                \n            \n\n\n            \n                \n                    Create and Register a new POST route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            put\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:124\n                \n            \n\n\n            \n                \n                    Create and Register a new PUT route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeRoute\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRoute(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:141\n                \n            \n\n\n            \n                \n                    Remove an existing route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route a Route object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            start\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    start(port: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:149\n                \n            \n\n\n            \n                \n                    Start the Stubborn server\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            stop\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:164\n                \n            \n\n\n            \n                \n                    Stop the Stubborn server\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is stopped\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from 'events';\nimport { createServer, Server } from 'http';\n\nimport { Emitter } from './@types/Emitter';\nimport { BodyDefinition, HeadersDefinition, PathDefinition } from './@types';\nimport { EVENTS, METHODS } from './constants';\nimport { Route } from './Route';\nimport { Router } from './Router';\nimport { getServerPort } from './utils';\n\nexport type StubbornOptions = {\n  host?: string;\n  defaultHeaders?: HeadersDefinition;\n};\n\n/**\n * @example\n * ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n */\nexport class Stubborn implements Emitter {\n  private server: Server;\n  private port: number | null;\n  private router: Router;\n  private options: StubbornOptions;\n  private emitter: EventEmitter = new EventEmitter();\n\n  constructor(options: StubbornOptions = {}) {\n    this.options = Object.assign(\n      {\n        host: 'localhost',\n        defaultHeaders: {},\n      },\n      options,\n    );\n\n    this.port = null;\n    this.server = createServer();\n    this.router = new Router({ host: this.options.host }, this.emitter);\n  }\n\n  /**\n   * Returns the server port.\n   *\n   * If the server is initialized with options.port set to 0 this method\n   * will return the randomly affected port only after the server is started\n   * @returns Listening port or null if the server is not started\n   */\n  public getPort(): number | null {\n    return getServerPort(this.server);\n  }\n\n  /**\n   * Returns the server origin (http://:)\n   * @returns the server origin\n   */\n  public getOrigin(): string {\n    return `http://${this.options.host}:${this.getPort()}`;\n  }\n\n  /**\n   * Remove all routes from the server\n   */\n  public clear() {\n    this.router.clear();\n\n    this.emitter.emit(EVENTS.CLEARED);\n\n    return this;\n  }\n\n  /**\n   * Create and Register a new DELETE route\n   *\n   * @param path Path matching definition\n   */\n  public delete(path: PathDefinition) {\n    return this.router.createRoute(METHODS.DELETE, path);\n  }\n\n  /**\n   * Create and Register a new GET route\n   *\n   * @param path Path matching definition\n   */\n  public get(path: PathDefinition) {\n    return this.router.createRoute(METHODS.GET, path);\n  }\n\n  /**\n   * Create and Register a new PACH route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public patch(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.PATCH, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new POST route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public post(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.POST, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new PUT route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public put(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.PUT, path).setBody(body);\n  }\n  /**\n   * Register a new route\n   *\n   * @param route Route a Route object\n   */\n  public addRoute(route: Route) {\n    return this.router.addRoute(route);\n  }\n\n  /**\n   * Remove an existing route\n   *\n   * @param route Route a Route object\n   */\n  public removeRoute(route: Route) {\n    return this.router.removeRoute(route);\n  }\n\n  /**\n   * Start the Stubborn server\n   * @returns Promise object resolved when server is started\n   */\n  public start(port: number = 0) {\n    this.port = port;\n\n    return new Promise(resolve => {\n      this.server.listen(this.port);\n      this.router.handle(this.server);\n      resolve();\n    });\n  }\n\n  /**\n   * Stop the Stubborn server\n   *\n   * @returns Promise object resolved when server is stopped\n   */\n  public stop() {\n    return new Promise(resolve => {\n      this.server.close(() => resolve());\n    });\n  }\n\n  public on(event: symbol, listener: (...args: any[]) => void): this {\n    this.emitter.on(event, listener);\n    return this;\n  }\n\n  public once(event: symbol, listener: (...args: any[]) => void): this {\n    this.emitter.once(event, listener);\n    return this;\n  }\n\n  public off(event: symbol, listener: (...args: any[]) => void): this {\n    this.emitter.off(event, listener);\n    return this;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'changelog.html': {
      url: 'changelog.html',
      title: 'getting-started - changelog',
      body:
        '\n                   \n\n5.1.4 (2020-08-15)\nAutomatic Dependencies Upgrade\n\nbump lodash from 4.17.19 to 4.17.20 (43acdba)\n\n5.1.3 (2020-07-08)\nAutomatic Dependencies Upgrade\n\nbump lodash from 4.17.18 to 4.17.19 (463449c)\n\n5.1.2 (2020-07-08)\nAutomatic Dependencies Upgrade\n\nbump lodash from 4.17.15 to 4.17.18 (0b3c577)\n\n5.1.1 (2020-07-07)\nAutomatic Dependencies Upgrade\n\n[security] bump npm from 6.14.5 to 6.14.6 (7df3365)\n\n5.1.0 (2020-06-26)\nFeatures\n\nadd logDiffon501 method to route (003d4ef)\n\n5.0.4 (2020-06-23)\nBug Fixes\n\nfix packaged files (56c446c)\n\n5.0.3 (2020-06-23)\nAutomatic Dependencies Upgrade\n\nbump dependencies (0de24fa)\n\n5.0.2 (2020-06-23)\nAutomatic Dependencies Upgrade\n\nbump chalk from 3.0.0 to 4.1.0 (c40f8a5)\n\n5.0.1 (2020-06-23)\nAutomatic Dependencies Upgrade\n\n[security] bump acorn from 5.7.3 to 5.7.4 (248fdf1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'coverage.html': {
      url: 'coverage.html',
      title: 'coverage - coverage',
      body:
        '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/@types/Emitter.ts\n            \n            interface\n            Emitter\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            BodyDefinitionArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            DiffError\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            JsonArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Route.ts\n            \n            class\n            Route\n            \n                51 %\n                (16/31)\n            \n        \n        \n            \n                \n                src/Router.ts\n            \n            function\n            registerLogDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Stubborn.ts\n            \n            class\n            Stubborn\n            \n                54 %\n                (12/22)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            EVENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            WILDCARD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/debug/Debugger.ts\n            \n            class\n            Debugger\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/debug/Output.ts\n            \n            class\n            Output\n            \n                0 %\n                (0/21)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            function\n            bodyDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            function\n            rec\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/headersDiff.ts\n            \n            function\n            headersDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/headersDiff.ts\n            \n            function\n            keysToLowerCase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/methodDiff.ts\n            \n            function\n            methodDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/pathDiff.ts\n            \n            function\n            pathDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            checkParameters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            queryDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/requestDiff.ts\n            \n            function\n            requestDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkExtra\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkMissing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            differenceKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            findErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            findErrorsObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            formatDiffError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            formatPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            intersectKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            stringify\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            _extend\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            arrayToHash\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatPrimitive\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            hasOwn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            inspect\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isFunction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isNull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isRegExp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isUndefined\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            objectToString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            reduceToSingleString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            stylizeNoColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            stylizeWithColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            logDiffOn501\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'dependencies.html': {
      url: 'dependencies.html',
      title: 'package-dependencies - dependencies',
      body:
        '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/accept : ^5.0.1\n        \n            body-parser : ^1.19.0\n        \n            chalk : ^4.1.0\n        \n            content-type : ^1.0.4\n        \n            lodash : ^4.17.15\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/enumerations.html': {
      url: 'miscellaneous/enumerations.html',
      title: 'miscellaneous-enumerations - enumerations',
      body:
        '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DIFF_TYPES   (src/.../constants.ts)\n                        \n                        \n                            METHODS   (src/.../constants.ts)\n                        \n                        \n                            STATUS_CODES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        DIFF_TYPES\n                    \n                \n                        \n                            \n                                 FAIL_EQUALITY\n                            \n                        \n                        \n                            \n                                Value : FAIL_EQUALITY\n                            \n                        \n                        \n                            \n                                 FAIL_MATCHING\n                            \n                        \n                        \n                            \n                                Value : FAIL_MATCHING\n                            \n                        \n                        \n                            \n                                 FAIL_FUNCTION\n                            \n                        \n                        \n                            \n                                Value : FAIL_FUNCTION\n                            \n                        \n                        \n                            \n                                 MISSING\n                            \n                        \n                        \n                            \n                                Value : MISSING\n                            \n                        \n                        \n                            \n                                 EXTRA\n                            \n                        \n                        \n                            \n                                Value : EXTRA\n                            \n                        \n                        \n                            \n                                 INVALID_VALUE_TYPE\n                            \n                        \n                        \n                            \n                                Value : INVALID_VALUE_TYPE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        METHODS\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        STATUS_CODES\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : 200\n                            \n                        \n                        \n                            \n                                 NOT_IMPLEMENTED\n                            \n                        \n                        \n                            \n                                Value : 501\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'index.html': {
      url: 'index.html',
      title: 'getting-started - index',
      body:
        "\n                   \n\nStubborn\n \n\n\nStubborn web server to mock external api responses. It is basically nock meets Dyson. Stubborn will strictly match the requests based on the definition like nock but in a separate web server like Dyson.\n\n\n\nInstallation\nUsage\nAPI\nFAQ\nContributing\nRelease\n\n\n\n\n\nInstallation\nnpm install --save-dev stubborn-wsyarn add -D stubborn-wsUsage\nStubborn is a testing tool that let you hot load and unload routes into a webserver.\nRequests are strictly matched against routes definitions based on Method, Path, Query parameters, Headers and Body.\nIf the request does not exactly match one route definition (ex: extra parameter, missing parameter, value does not match, etc), Stubborn will respond with a 501.\nThe very fact that Stubborn responds to the request validates that the parameters sent are the expected one, any change in the code that send the request will break the test. Any breaking change will be picked up by your test.\nStubborn response headers and body can be hardcoded or defined using a template.\nYou can find a complete working test suite of the following examples here.\nimport got from 'got';\nimport { Stubborn, STATUS_CODES, WILDCARD } from 'stubborn-ws';\n\ndescribe('Test', () => {\n  const sb = new Stubborn();\n\n  beforeAll(async () => await sb.start());\n  afterAll(async () => await sb.stop());\n\n  // Clean up all routes after a test if needed\n  afterEach(() => sb.clear());\n\n  it('should respond to query', async () => {\n    const body = { some: 'body' };\n    sb.get('/').setResponseBody({ some: 'body' });\n\n    const res = await request(`/`);\n\n    expect(res.statusCode).toBe(STATUS_CODES.SUCCESS);\n    expect(res.body).toEqual(body);\n  });\n\n  function request(path = '/', options = {}) {\n    return got(`${sb.getOrigin()}${path}`, {\n      method: 'GET',\n      responseType: 'json',\n      throwHttpErrors: false,\n      ...options,\n    });\n  }\n});Stubborn strictly matches the request against the route definition.\nIf a query parameter or a header is missing, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is missing', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`/`);\n\n  expect(res.statusCode).toEqual(STATUS_CODES.NOT_IMPLEMENTED);\n});If a query parameter or a header is added, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is added', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`/?page=1&limit=10`);\n\n  expect(res.statusCode).toEqual(STATUS_CODES.NOT_IMPLEMENTED);\n});If a query parameter or a header does not match the route definition, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter does not match the definition', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`/?page=2`);\n\n  expect(res.statusCode).toEqual(STATUS_CODES.NOT_IMPLEMENTED);\n});You can use null as wildcard\nit('should match using wildcard', async () => {\n  sb.get('/').setQueryParameters({ page: WILDCARD }).setHeaders(WILDCARD);\n\n  const res = await request(`/?page=2`, {\n    headers: { 'x-api-key': 'api key', 'any-other-header': 'stuff' },\n  });\n\n  expect(res.statusCode).toEqual(STATUS_CODES.SUCCESS);\n});You can use regex to match a parameter, header or body\nit('should match using a regexp', async () => {\n  sb.post('/', {\n    slug: /^[a-z\\-]*$/,\n  });\n\n  const res = await request(`/?page=2`, {\n    method: 'POST',\n    json: { slug: 'stubborn-ws' },\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use a function to match a parameter, header or body\nimport { STATUS_CODES } from 'stubborn-ws';\nit('should match using a function', async () => {\n  sb.get('/').setQueryParameters({\n    page: value => parseInt(value as string) > 0,\n  });\n\n  const res = await request(`/?page=2`);\n\n  expect(res.statusCode).toBe(STATUS_CODES.SUCCESS);\n});Public API\nSee the API documentation\nFAQ\nQ: Stubborn is not matching my route definition and always return a 501\nStubborn is STUBBORN, therefore it will return a 501 if it does not exactly match the route definition you have set up.\nTo help you find what missing in the route definition, you can compare it to the response body returned when receiving a 501 using the logDiff() method of a route:\nconst route = sb\n  .get('/')\n  // This header definition will miss additional header added by got, like user-agent, connexion, etc...\n  .setHeaders({ 'X-Api-Key': 'test' })\n  // Will log in console the diff between the route and any request throwing a 501\n  .logDiffOn501();\n\nconst res = await request(sb.getOrigin(), {\n  headers: { 'x-api-key': 'api key' },\n});\n\nexpect(res.statusCode).toBe(501);Q: How do I know if stubborn has been called and matched the route defined?\nStubborn will return a 501 (Not Implemented) if it received a request but cannot match any route.\nIf the request matches the route it will respond according to the route response configuration and update the call property of the route\n  async function call() {\n    return request(sb.getOrigin());\n  }\n\n  // No route setup in Stubborn\n  const res = await call();\n\n  expect(res.statusCode).toBe(501);\n  expect(res.body).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n    // ...\n  });\n\n\n  const route = sb.get('/')\n    .setHeaders(null)\n    .setResponseBody('content');\n\n\n  const res = await call();\n  expect(res.calls.length).toBe(1);\n  expect(res.calls[0]).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n      // ...\n    });\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
    'license.html': {
      url: 'license.html',
      title: 'getting-started - license',
      body:
        '\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules.html': {
      url: 'modules.html',
      title: 'modules - modules',
      body:
        '\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'overview.html': {
      url: 'overview.html',
      title: 'overview - overview',
      body:
        '\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/typealiases.html': {
      url: 'miscellaneous/typealiases.html',
      title: 'miscellaneous-typealiases - typealiases',
      body:
        '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BodyDefinition   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionObject   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionPrimitive   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionValue   (src/.../index.ts)\n                        \n                        \n                            DefinitionMatcher   (src/.../index.ts)\n                        \n                        \n                            DefinitionValue   (src/.../index.ts)\n                        \n                        \n                            HeaderDefinition   (src/.../index.ts)\n                        \n                        \n                            HeadersDefinition   (src/.../index.ts)\n                        \n                        \n                            JsonObject   (src/.../index.ts)\n                        \n                        \n                            JsonPrimitive   (src/.../index.ts)\n                        \n                        \n                            JsonValue   (src/.../index.ts)\n                        \n                        \n                            MatchFunction   (src/.../index.ts)\n                        \n                        \n                            MethodDefinition   (src/.../index.ts)\n                        \n                        \n                            Middleware   (src/.../index.ts)\n                        \n                        \n                            NextFunction   (src/.../index.ts)\n                        \n                        \n                            ObjectOrArray   (src/.../utils.ts)\n                        \n                        \n                            PathDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryParameterDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryParameterDefinitionPrimitives   (src/.../index.ts)\n                        \n                        \n                            Request   (src/.../index.ts)\n                        \n                        \n                            RequestBody   (src/.../index.ts)\n                        \n                        \n                            RequestHash   (src/.../index.ts)\n                        \n                        \n                            RequestHeaders   (src/.../index.ts)\n                        \n                        \n                            RequestInfo   (src/.../index.ts)\n                        \n                        \n                            RequestMatcher   (src/.../index.ts)\n                        \n                        \n                            RequestMethod   (src/.../index.ts)\n                        \n                        \n                            RequestPath   (src/.../index.ts)\n                        \n                        \n                            RequestQuery   (src/.../index.ts)\n                        \n                        \n                            Response   (src/.../index.ts)\n                        \n                        \n                            ResponseBody   (src/.../index.ts)\n                        \n                        \n                            ResponseDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseHeaders   (src/.../index.ts)\n                        \n                        \n                            StubbornOptions   (src/.../Stubborn.ts)\n                        \n                        \n                            Template   (src/.../index.ts)\n                        \n                        \n                            TemplateArray   (src/.../index.ts)\n                        \n                        \n                            TemplateFunction   (src/.../index.ts)\n                        \n                        \n                            TemplateObject   (src/.../index.ts)\n                        \n                        \n                            ValidateFn   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/@types/index.ts\n    \n    \n        \n            \n                \n                    \n                    BodyDefinition\n                \n            \n            \n                \n                        undefined | BodyDefinitionValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionPrimitive\n                \n            \n            \n                \n                        DefinitionMatcher | JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionValue\n                \n            \n            \n                \n                            BodyDefinitionPrimitive | BodyDefinitionObject | BodyDefinitionArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DefinitionMatcher\n                \n            \n            \n                \n                            RegExp | MatchFunction | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DefinitionValue\n                \n            \n            \n                \n                            DefinitionMatcher | JsonValue | undefined | METHODS\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderDefinition\n                \n            \n            \n                \n                            DefinitionMatcher | string | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersDefinition\n                \n            \n            \n                \n                            Record | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonPrimitive\n                \n            \n            \n                \n                        string | number | boolean | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonValue\n                \n            \n            \n                \n                            JsonPrimitive | JsonObject | JsonArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatchFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodDefinition\n                \n            \n            \n                \n                            METHODS\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Middleware\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PathDefinition\n                \n            \n            \n                \n                            DefinitionMatcher | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryDefinition\n                \n            \n            \n                \n                            Record | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryParameterDefinition\n                \n            \n            \n                \n                        QueryParameterDefinitionPrimitives | QueryParameterDefinitionPrimitives[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryParameterDefinitionPrimitives\n                \n            \n            \n                \n                            DefinitionMatcher | string | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Request\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestBody\n                \n            \n            \n                \n                            JsonValue | undefined\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestHash\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestHeaders\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMatcher\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMethod\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestPath\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestQuery\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                            ServerResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBody\n                \n            \n            \n                \n                            JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseDefinition\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseHeaders\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Template\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject | TemplateArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateArray\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/diff/utils.ts\n    \n    \n        \n            \n                \n                    \n                    ObjectOrArray\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValidateFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/Stubborn.ts\n    \n    \n        \n            \n                \n                    \n                    StubbornOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/variables.html': {
      url: 'miscellaneous/variables.html',
      title: 'miscellaneous-variables - variables',
      body:
        "\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENTS   (src/.../constants.ts)\n                        \n                        \n                            WILDCARD   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            EVENTS\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  NOT_IMPLEMENTED: Symbol.for('NOT_IMPLEMENTED'),\n  CLEARED: Symbol.for('CLEARED'),\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            WILDCARD\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : Symbol.for('WILDCARD')\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n",
    },
  },
};
