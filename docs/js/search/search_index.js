var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/BodyDefinitionArray.html",[0,0.851,1,1.259]],["body/interfaces/BodyDefinitionArray.html",[0,1.161,1,1.716,2,1.174,3,0.607,4,0.695,5,0.455,6,1.174,7,2.254,8,2.622,9,1.134,10,0.052,11,2.246,12,1.931,13,1.174,14,1.47,15,1.679,16,0.881,17,1.873,18,1.028,19,1.683,20,0.937,21,1.931,22,1.796,23,1.74,24,2.254,25,1.134,26,1.931,27,2.246,28,2.944,29,1.47,30,1.57,31,1.174,32,1.57,33,1.35,34,0.793,35,1.57,36,1.57,37,1.35,38,1.014,39,1.29,40,1.35,41,1.57,42,1.323,43,1.931,44,2.707,45,1.174,46,2.622,47,1.35,48,2.254,49,1.35,50,1.35,51,1.679,52,1.81,53,1.57,54,1.35,55,0.793,56,1.35,57,1.174,58,1.35,59,1.174,60,1.981,61,1.931,62,1.931,63,2.254,64,1.174,65,2.254,66,1.35,67,1.35,68,1.931,69,1.57,70,1.931,71,1.931,72,2.139,73,1.931,74,0.455,75,1.35,76,1.57,77,1.29,78,1.679,79,1.931,80,1.931,81,1.931,82,1.931,83,1.931,84,1.931,85,1.931,86,0.994,87,1.35,88,0.695,89,1.931,90,1.57,91,1.57,92,1.47,93,1.931,94,1.57,95,0.793,96,1.35,97,2.246,98,1.174,99,1.57,100,1.35,101,1.35,102,1.35,103,0.793,104,0.793,105,1.679,106,0.03,107,0.03]],["title/classes/Debugger.html",[108,0.646,109,1.923]],["body/classes/Debugger.html",[3,0.754,4,0.862,5,0.564,9,1.7,10,0.052,14,1.275,16,0.876,18,1.275,19,0.862,20,0.725,25,0.983,38,1.009,39,1.498,52,1.976,55,0.983,60,1.275,74,0.564,77,1.498,86,1.154,87,2.242,88,1.154,95,1.316,103,0.983,106,0.035,107,0.035,108,0.655,109,2.608,110,1.275,111,2.314,112,2.647,113,4.623,114,3.097,115,3.841,116,1.457,117,2.869,118,1.804,119,2.869,120,1.924,121,2.198,122,2.198,123,2.869,124,1.924,125,3.841,126,2.716,127,2.869,128,3.841,129,2.869,130,2.054,131,2.314,132,2.869,133,2.242,134,1.948,135,1.95,136,3.841,137,4.329,138,2.869,139,2.869,140,2.869,141,2.869,142,2.518,143,3.097,144,2.198,145,3.841,146,2.869,147,2.242,148,1.948,149,2.314,150,2.242,151,2.869,152,2.869,153,1.675,154,2.314,155,3.841,156,2.869,157,3.841,158,2.869,159,2.869,160,3.841,161,2.869,162,3.841,163,2.314,164,2.869,165,1.948,166,2.869,167,2.869,168,4,169,2.869,170,3.841,171,2.869,172,2.869,173,2.869,174,2.869,175,2.869,176,2.869,177,2.869,178,2.869,179,2.869,180,2.869,181,2.869]],["title/interfaces/DiffError.html",[0,0.851,103,0.971]],["body/interfaces/DiffError.html",[0,1.131,1,1.421,2,1.121,3,0.58,4,0.663,5,0.434,6,1.121,7,1.867,8,2.172,9,1.096,10,0.052,11,2.172,12,1.867,13,1.121,14,1.833,15,2.094,16,0.858,17,1.833,18,0.981,19,1.678,20,0.94,21,1.867,22,1.825,23,1.708,24,2.196,25,1.414,26,1.867,27,2.172,28,2.984,29,1.421,30,1.499,31,1.121,32,1.499,33,1.288,34,0.756,35,1.499,36,1.499,37,1.288,38,0.988,39,1.248,40,1.288,41,1.499,42,1.565,43,1.867,44,2.665,45,1.121,46,2.554,47,1.288,48,2.196,49,1.288,50,1.288,51,2.223,52,1.781,53,1.499,54,1.288,55,0.756,56,1.288,57,1.121,58,1.288,59,1.121,60,1.946,61,1.867,62,1.867,63,2.196,64,1.121,65,2.196,66,1.288,67,1.288,68,1.867,69,1.499,70,1.867,71,1.867,72,2.094,73,1.867,74,0.629,75,1.288,76,1.499,77,1.248,78,1.624,79,1.867,80,1.867,81,1.867,82,1.867,83,1.867,84,1.867,85,1.867,86,1.316,87,1.288,88,0.663,89,1.867,90,1.499,91,1.499,92,1.421,93,1.867,94,1.499,95,0.756,96,1.288,97,2.172,98,1.121,99,1.499,100,1.288,101,1.288,102,1.288,103,1.096,104,1.414,105,1.624,106,0.029,107,0.029,182,1.624]],["title/interfaces/Emitter.html",[0,0.851,183,1.653]],["body/interfaces/Emitter.html",[0,1.06,2,1.79,3,0.926,4,1.06,5,0.693,10,0.051,16,1.001,19,1.06,20,0.837,23,2.006,34,1.637,74,0.693,95,1.796,106,0.04,107,0.04,118,2.006,120,2.221,121,2.537,122,2.537,124,1.567,183,2.561,184,2.843,185,4.03,186,3.538,187,3.538,188,3.526,189,3.538,190,4.368,191,3.678,192,4.227,193,3.526,194,2.788,195,3.538,196,3.526,197,3.538,198,3.526,199,3.538,200,3.526,201,2.843]],["title/classes/ErrorRenderer.html",[108,0.646,133,1.653]],["body/classes/ErrorRenderer.html",[3,0.546,4,0.625,5,0.409,9,1.246,10,0.052,14,2.054,15,1.056,16,0.699,18,0.924,19,0.625,20,0.836,22,1.374,38,0.804,39,1.195,55,1.05,60,1.615,74,0.409,77,1.195,86,0.92,88,0.92,95,1.584,103,1.87,104,1.584,106,0.028,107,0.028,108,0.475,110,0.924,112,2.716,116,1.056,118,1.948,120,2.219,121,2.535,122,2.535,124,2.188,130,2.054,133,1.788,134,1.412,135,2.5,142,2.535,144,1.056,150,2.698,168,2.931,202,1.677,203,3.287,204,3.062,205,3.062,206,3.062,207,3.062,208,3.062,209,3.062,210,3.635,211,3.062,212,3.062,213,3.062,214,1.677,215,2.08,216,3.062,217,2.08,218,3.062,219,2.08,220,3.062,221,2.08,222,3.062,223,2.08,224,3.062,225,2.08,226,3.062,227,2.08,228,2.08,229,3.635,230,2.08,231,3.062,232,2.08,233,3.062,234,2.08,235,3.062,236,2.08,237,2.08,238,3.062,239,1.615,240,1.677,241,2.08,242,2.08,243,2.08,244,2.08,245,3.062,246,2.08,247,2.468,248,2.08,249,2.08,250,2.08,251,2.08,252,3.062,253,4.993,254,2.08,255,2.08,256,2.08,257,1.677,258,1.677,259,1.214,260,2.08,261,2.08,262,2.08,263,2.08,264,2.08,265,3.635,266,3.062,267,3.062,268,3.062,269,3.062,270,3.062,271,3.635,272,3.062,273,2.08,274,3.635,275,2.08,276,2.08,277,2.08,278,2.08,279,2.08,280,2.08,281,4.01,282,3.605,283,2.08,284,2.08,285,4.01,286,1.677,287,1.677,288,1.677,289,3.062,290,3.062,291,2.079,292,3.062,293,3.062,294,2.08,295,3.062,296,2.08,297,2.08]],["title/classes/InvalidRemoveAfterMatchingTimesParameterError.html",[108,0.646,298,1.923]],["body/classes/InvalidRemoveAfterMatchingTimesParameterError.html",[3,1.088,4,1.245,5,0.814,7,2.822,10,0.05,19,1.245,106,0.044,107,0.044,108,0.945,110,1.841,116,2.599,118,1.616,150,2.822,239,1.841,298,3.283,299,3.34,300,4.142,301,4.142,302,3.34,303,4.142,304,4.142,305,4.142]],["title/interfaces/JsonArray.html",[0,0.851,29,1.259]],["body/interfaces/JsonArray.html",[0,1.161,1,1.47,2,1.174,3,0.607,4,0.695,5,0.455,6,1.174,7,2.254,8,2.622,9,1.134,10,0.052,11,2.246,12,1.931,13,1.174,14,1.47,15,1.679,16,0.881,17,1.873,18,1.028,19,1.683,20,0.937,21,1.931,22,1.796,23,1.74,24,2.254,25,1.134,26,1.931,27,2.246,28,2.944,29,1.716,30,1.57,31,1.174,32,1.57,33,1.35,34,0.793,35,1.57,36,1.57,37,1.35,38,1.014,39,1.29,40,1.35,41,1.57,42,1.323,43,1.931,44,2.707,45,1.174,46,2.622,47,1.35,48,2.254,49,1.35,50,1.35,51,1.679,52,1.81,53,1.57,54,1.35,55,0.793,56,1.35,57,1.174,58,1.35,59,1.174,60,1.981,61,1.931,62,1.931,63,2.254,64,1.174,65,2.254,66,1.35,67,1.35,68,1.931,69,1.57,70,1.931,71,1.931,72,2.139,73,1.931,74,0.455,75,1.35,76,1.57,77,1.29,78,1.679,79,1.931,80,1.931,81,1.931,82,1.931,83,1.931,84,1.931,85,1.931,86,0.994,87,1.35,88,0.695,89,1.931,90,1.57,91,1.57,92,1.47,93,1.931,94,1.57,95,0.793,96,1.35,97,2.246,98,1.174,99,1.57,100,1.35,101,1.35,102,1.35,103,0.793,104,0.793,105,1.679,106,0.03,107,0.03]],["title/classes/Output.html",[108,0.646,130,1.259]],["body/classes/Output.html",[3,0.654,4,0.749,5,0.49,9,1.195,10,0.052,16,0.795,19,0.749,20,0.888,22,1.902,23,1.569,25,1.195,42,1.195,55,0.853,74,0.49,95,1.195,105,2.041,106,0.032,107,0.032,108,0.568,110,1.107,112,2.833,116,1.264,118,2.101,120,2.34,121,2.674,122,2.674,124,2.37,130,1.936,134,1.691,135,2.041,142,1.264,163,3.243,182,1.77,203,2.73,214,2.008,239,1.787,240,2.008,247,2.367,259,2.035,288,2.811,291,2.367,306,2.008,307,4.021,308,2.367,309,3.486,310,3.486,311,3.486,312,3.486,313,3.486,314,3.486,315,4.021,316,4.021,317,3.486,318,2.811,319,3.486,320,3.486,321,3.486,322,2.49,323,2.49,324,2.49,325,2.49,326,4.878,327,2.49,328,2.49,329,2.49,330,2.49,331,3.486,332,2.49,333,2.49,334,2.49,335,2.49,336,2.49,337,2.008,338,3.486,339,2.49,340,2.49,341,2.49,342,2.49,343,2.49,344,2.49,345,2.49,346,2.49,347,2.49,348,2.49,349,2.49,350,2.49,351,2.49,352,2.49,353,2.49,354,1.691,355,2.49,356,2.49,357,2.49,358,2.49,359,2.49,360,2.49,361,2.49,362,2.49]],["title/classes/Stubborn.html",[108,0.646,363,1.438]],["body/classes/Stubborn.html",[3,0.326,4,0.373,5,0.244,9,1.455,10,0.052,13,1.325,16,0.595,18,0.552,19,0.615,20,0.827,22,0.894,23,1.734,25,1.305,34,0.894,38,1.336,42,1.147,51,2.526,52,1.552,55,0.426,57,2.526,59,1.039,64,2.155,74,0.244,86,1.565,88,0.615,95,1.234,98,1.039,106,0.019,107,0.043,108,0.283,110,0.552,112,2.769,116,0.63,118,1.975,120,2.072,121,2.367,122,2.367,124,2.225,126,2.688,135,2.508,142,1.536,144,2.541,153,1.766,182,1.039,183,2.102,185,2.44,186,1.65,187,1.65,189,1.65,190,3.325,191,3.018,192,2.904,194,1.523,195,1.65,197,1.65,199,1.65,201,1.001,203,3.166,239,1.345,259,1.953,363,2.209,364,0.843,365,3.424,366,2.046,367,1.65,368,1.65,369,1.242,370,1.65,371,1.242,372,1.389,373,2.046,374,1.65,375,2.046,376,4.352,377,3.208,378,3.485,379,3.325,380,2.046,381,3.026,382,2.44,383,3.026,384,3.026,385,2.445,386,1.766,387,1.65,388,2.054,389,2.44,390,2.046,391,3.026,392,3.601,393,2.046,394,2.046,395,3.346,396,1.242,397,1.242,398,1.242,399,1.242,400,2.046,401,1.242,402,4.721,403,3.208,404,1.242,405,1.389,406,2.046,407,1.242,408,4.599,409,2.046,410,1.242,411,1.242,412,1.242,413,3.026,414,1.242,415,2.046,416,2.046,417,1.65,418,2.046,419,2.046,420,2.102,421,2.046,422,2.046,423,1.242,424,1.242,425,1.242,426,1.242,427,2.046,428,1.242,429,2.046,430,1.242,431,2.046,432,2.046,433,1.242,434,2.046,435,1.242,436,2.046,437,1.242,438,2.046,439,1.242,440,2.046,441,1.242,442,2.44,443,3.026,444,1.242,445,2.046,446,1.389,447,2.046,448,1.242,449,1.242,450,1.242,451,2.609,452,2.046,453,1.242,454,1.001,455,1.242,456,1.242,457,1.242,458,1.242,459,2.046,460,1.242,461,1.242,462,1.242,463,1.242,464,1.242,465,1.242,466,1.242,467,1.242,468,4.599,469,1.242,470,1.242,471,1.242,472,2.609,473,1.242,474,1.242,475,1.242,476,1.242,477,1.242,478,1.242,479,2.046,480,1.242,481,1.242,482,2.046,483,1.242,484,1.242,485,1.242,486,1.242,487,1.242,488,1.242]],["title/changelog.html",[420,1.398,489,1.626,490,2.394]],["body/changelog.html",[3,0.535,5,0.4,10,0.039,16,0.465,20,0.341,25,0.698,38,0.792,55,0.698,78,1.034,86,0.906,88,0.906,92,1.34,103,0.698,104,0.698,106,0.028,107,0.033,126,2.331,130,1.34,147,2.096,148,2.047,150,1.188,153,2.317,165,2.437,191,1.382,194,1.188,308,2.695,318,1.642,337,2.431,354,2.437,372,1.382,385,1.382,386,1.188,405,1.382,491,1.642,492,3.59,493,4.591,494,4.437,495,3.969,496,3.969,497,2.895,498,3.59,499,2.036,500,2.036,501,3.951,502,2.036,503,2.036,504,2.036,505,2.036,506,1.382,507,2.036,508,2.036,509,2.036,510,3.802,511,2.036,512,2.036,513,2.036,514,3.802,515,3.015,516,2.036,517,2.036,518,2.036,519,2.431,520,2.036,521,2.036,522,2.036,523,2.431,524,2.431,525,3.015,526,2.036,527,2.036,528,3.59,529,3.969,530,2.036,531,5.373,532,1.642,533,1.642,534,2.036,535,2.036,536,4.437,537,2.036,538,2.036,539,2.431,540,2.036,541,2.036,542,5.168,543,2.036,544,1.642,545,2.036,546,2.036,547,1.642,548,3.66,549,2.036,550,3.015,551,2.036,552,2.431,553,2.036,554,2.036,555,2.036,556,2.036,557,2.036,558,2.431,559,1.382,560,1.642,561,1.642,562,2.036,563,2.036,564,2.036,565,1.642,566,4.591,567,5.373,568,2.036,569,2.036,570,2.036,571,1.642,572,2.036,573,5.128,574,2.036,575,2.036,576,2.036,577,2.036,578,2.036,579,3.015,580,3.015,581,2.036,582,2.036,583,5.082,584,5.355,585,2.036,586,2.036,587,2.036,588,2.036,589,2.036,590,4.237,591,2.036,592,3.015,593,2.036,594,2.036,595,2.036,596,3.015,597,2.036,598,2.036,599,2.036,600,2.036,601,2.036,602,2.036,603,2.431,604,2.036,605,2.036,606,3.969,607,2.036,608,2.036,609,2.036,610,2.036,611,2.036,612,2.036,613,2.036,614,3.015,615,2.036,616,2.036,617,2.036,618,2.036,619,2.036,620,2.036,621,2.036,622,2.036,623,2.036,624,2.036,625,2.036,626,2.036,627,2.036,628,2.036,629,2.036,630,1.642,631,2.036,632,2.036,633,2.036,634,2.036,635,1.642,636,2.036,637,2.036,638,3.015,639,3.201,640,3.015,641,2.036,642,2.036,643,2.036,644,2.036,645,1.642,646,3.015,647,3.015,648,2.036,649,2.036,650,5.168,651,2.036,652,2.036,653,2.036,654,2.036,655,2.036,656,2.036,657,2.036,658,2.036,659,2.036,660,2.036,661,2.036,662,2.036,663,2.036,664,2.036,665,2.036,666,2.431,667,1.642,668,2.036,669,2.036,670,2.036,671,2.036,672,2.036,673,2.036,674,2.036,675,2.036,676,2.036,677,2.036,678,2.036,679,1.642,680,2.036,681,2.036,682,2.036,683,3.015,684,2.036,685,2.036,686,3.015,687,2.036,688,2.036,689,1.642,690,2.036,691,2.036,692,2.036,693,2.036,694,2.036,695,2.036,696,2.036,697,2.036,698,2.036,699,2.036,700,2.036,701,1.642,702,2.036,703,2.036,704,2.036,705,2.036,706,2.036,707,2.036,708,2.036,709,2.036]],["title/coverage.html",[710,3.07]],["body/coverage.html",[0,1.263,1,1.02,5,0.451,6,1.953,10,0.052,17,1.02,20,0.384,29,1.02,34,1.932,103,0.787,104,1.128,106,0.03,107,0.03,108,1.056,109,1.559,111,1.852,126,1.166,130,1.02,131,1.852,133,1.34,144,1.166,147,1.34,183,1.34,184,1.852,202,1.852,239,2.519,298,1.559,299,1.852,306,1.852,363,1.166,364,1.559,446,1.559,710,1.852,711,1.559,712,2.296,713,2.296,714,3.291,715,5.654,716,2.296,717,2.296,718,2.296,719,3.846,720,2.296,721,2.296,722,2.296,723,2.296,724,2.296,725,2.234,726,4.446,727,2.296,728,2.296,729,2.296,730,3.102,731,2.296,732,2.296,733,3.291,734,2.296,735,2.296,736,2.296,737,2.296,738,2.296,739,2.296,740,3.387,741,2.296,742,2.296,743,2.296,744,2.296,745,4.111,746,2.296,747,2.296,748,2.296,749,2.296,750,2.296,751,2.296,752,2.296,753,2.296,754,2.296,755,2.296,756,2.296,757,2.296,758,5.444,759,2.296,760,2.296,761,2.296,762,2.296,763,2.296,764,2.296,765,2.296,766,2.296,767,2.296,768,2.296,769,2.296,770,2.296,771,2.296,772,2.296,773,2.296,774,2.296,775,2.296,776,2.296,777,2.296,778,2.296,779,2.296,780,2.296,781,2.296,782,2.296,783,2.296,784,2.296,785,2.296,786,3.387,787,2.296,788,2.296,789,1.852,790,2.296,791,2.296]],["title/dependencies.html",[548,2.302,792,1.626]],["body/dependencies.html",[10,0.051,20,0.704,38,1.104,106,0.045,107,0.045,354,2.855,539,3.391,548,2.855,603,3.391,630,3.391,639,3.391,645,3.391,689,3.391,793,4.205,794,4.205,795,4.205,796,4.205,797,4.205]],["title/miscellaneous/enumerations.html",[798,1.064,799,2.734]],["body/miscellaneous/enumerations.html",[10,0.052,14,1.967,15,2.248,16,1.01,38,1.163,39,1.727,42,1.935,74,0.703,77,1.727,86,1.331,88,1.331,106,0.04,107,0.04,382,3.57,385,3.006,386,2.584,387,3.57,388,3.006,389,3.57,506,2.429,725,2.429,798,1.59,799,2.885,800,4.051,801,3.57,802,4.427,803,4.427,804,4.427,805,3.57,806,3.57,807,4.427,808,3.578,809,2.885,810,3.578,811,2.885,812,3.578,813,3.578,814,2.885]],["title/index.html",[74,0.471,420,1.398,489,1.626]],["body/index.html",[5,0.29,9,1.148,10,0.052,17,1.626,22,0.506,31,1.7,33,2.955,34,1.148,37,2.48,38,1.116,39,1.428,40,1.374,42,0.807,45,0.749,49,1.374,50,0.862,51,2.223,52,1.82,54,0.862,71,2.136,72,0.749,77,1.521,86,1.23,88,1.172,92,1.488,98,2.279,106,0.021,107,0.031,112,0.749,114,1.19,118,1.145,120,1.046,124,0.656,126,2.626,135,2.368,142,2.437,144,1.98,147,0.862,148,1.598,153,1.955,154,3.145,165,1.002,239,0.656,247,2.484,282,1.19,286,1.19,287,1.19,291,1.002,302,3.62,308,1.002,363,2.659,367,2.701,368,1.898,370,3.762,372,1.598,374,1.19,377,1.19,378,1.598,386,1.374,388,1.002,405,2.274,417,1.19,442,1.19,454,1.19,497,1.19,501,1.19,506,3.167,510,3.299,514,3.957,519,1.898,523,1.898,524,1.19,532,2.367,533,2.367,544,1.19,547,1.19,552,2.367,558,1.19,559,2.973,560,1.898,561,3.145,565,3.145,571,1.19,635,1.19,666,1.19,667,1.19,679,1.19,711,1.002,792,2.973,801,1.898,805,2.701,806,1.19,809,2.367,811,1.898,815,1.898,816,1.19,817,1.19,818,3.531,819,1.476,820,1.476,821,1.898,822,1.476,823,1.898,824,2.935,825,3.349,826,2.354,827,1.476,828,2.354,829,1.476,830,2.354,831,1.476,832,2.354,833,1.476,834,3.349,835,1.476,836,1.476,837,1.476,838,2.354,839,4.379,840,2.354,841,2.354,842,3.349,843,2.354,844,1.476,845,1.476,846,1.476,847,1.476,848,2.935,849,1.19,850,1.476,851,2.935,852,2.354,853,1.476,854,1.476,855,1.476,856,1.476,857,1.476,858,2.354,859,2.354,860,1.476,861,1.476,862,1.476,863,1.476,864,1.476,865,1.476,866,1.476,867,1.476,868,1.476,869,2.354,870,1.476,871,1.476,872,1.476,873,1.476,874,1.476,875,1.476,876,1.476,877,1.476,878,1.476,879,2.354,880,2.354,881,2.354,882,1.19,883,2.354,884,2.354,885,1.476,886,1.476,887,1.476,888,1.476,889,1.476,890,1.476,891,2.354,892,1.476,893,1.476,894,1.476,895,2.354,896,1.476,897,2.935,898,1.476,899,1.476,900,1.476,901,1.476,902,2.354,903,1.476,904,1.476,905,1.476,906,1.476,907,1.476,908,1.476,909,1.476,910,1.476,911,1.476,912,1.476,913,1.476,914,1.476,915,1.476,916,1.476,917,1.476,918,1.476,919,1.19,920,1.476,921,1.476,922,1.476,923,1.476,924,1.476,925,2.354,926,3.349,927,1.476,928,3.899,929,1.476,930,1.476,931,1.476,932,1.476,933,1.476,934,2.354,935,2.951,936,1.476,937,2.935,938,1.476,939,2.354,940,1.476,941,1.476,942,1.476,943,1.19,944,1.476,945,1.476,946,1.476,947,1.476,948,1.476,949,1.476,950,1.476,951,1.476,952,1.476,953,1.476,954,1.476,955,4.091,956,4.248,957,2.354,958,1.476,959,1.476,960,1.476,961,1.476,962,1.476,963,1.476,964,2.354,965,3.349,966,3.659,967,3.659,968,2.935,969,2.935,970,1.476,971,3.349,972,1.476,973,1.476,974,2.354,975,1.476,976,1.476,977,1.476,978,1.476,979,1.476,980,1.476,981,1.476,982,1.476,983,1.476,984,1.476,985,2.354,986,1.476,987,1.476,988,1.476,989,1.476,990,1.476,991,1.476,992,1.476,993,1.476,994,1.476,995,1.476,996,1.476,997,2.354,998,1.476,999,1.476,1000,1.476,1001,1.476,1002,1.476,1003,1.476,1004,1.476,1005,1.476,1006,1.476,1007,1.476,1008,1.476,1009,2.354,1010,1.476,1011,3.349,1012,1.476,1013,1.476,1014,1.476,1015,1.476,1016,2.935,1017,2.935,1018,1.476,1019,2.354,1020,2.354,1021,1.476,1022,1.476,1023,1.476,1024,2.935,1025,3.349,1026,3.349,1027,3.349,1028,3.349,1029,2.354,1030,1.476,1031,1.476,1032,1.476,1033,1.476]],["title/license.html",[420,1.398,489,1.626,1034,1.626]],["body/license.html",[10,0.041,31,2.273,104,1.249,106,0.041,107,0.041,143,2.939,149,3.909,194,2.127,701,2.939,711,2.475,849,2.939,882,2.939,943,2.939,1034,2.475,1035,2.939,1036,4.848,1037,3.645,1038,3.645,1039,3.645,1040,4.478,1041,3.645,1042,3.645,1043,3.645,1044,3.645,1045,3.645,1046,3.645,1047,4.478,1048,5.447,1049,3.645,1050,3.645,1051,3.645,1052,4.478,1053,3.645,1054,3.645,1055,3.645,1056,3.645,1057,3.645,1058,3.645,1059,3.645,1060,3.645,1061,4.478,1062,3.645,1063,3.645,1064,3.645,1065,3.645,1066,3.645,1067,4.478,1068,4.478,1069,3.645,1070,3.645,1071,3.645,1072,3.645,1073,3.645,1074,3.645,1075,3.645,1076,3.645,1077,3.645,1078,3.645,1079,3.645,1080,3.645,1081,3.645,1082,3.645,1083,3.645,1084,3.645,1085,3.645,1086,3.645,1087,3.645,1088,3.645,1089,3.645,1090,3.645,1091,3.645,1092,3.645,1093,3.645,1094,3.645,1095,3.645,1096,3.645]],["title/modules.html",[1097,3.07]],["body/modules.html",[10,0.046,106,0.046,107,0.046,1097,3.545]],["title/overview.html",[1098,3.07]],["body/overview.html",[2,2.211,10,0.045,106,0.045,107,0.045,110,1.936,1098,3.513,1099,4.356,1100,4.356]],["title/properties.html",[182,1.721,792,1.626]],["body/properties.html",[10,0.051,13,2.055,106,0.044,107,0.044,182,2.055,363,2.055,365,3.264,378,3.238,491,3.264,559,2.748,815,3.846,816,3.264,817,3.264,818,3.264,821,3.264,823,3.264,919,3.846,935,3.846,1034,2.748,1035,3.264,1101,4.047,1102,4.047,1103,4.047,1104,4.047,1105,4.047,1106,4.047,1107,4.047,1108,4.047,1109,4.047,1110,4.047,1111,4.047]],["title/miscellaneous/typealiases.html",[798,1.064,1112,3.39]],["body/miscellaneous/typealiases.html",[1,1.286,6,1.47,10,0.051,12,1.69,16,0.882,20,0.883,21,2.538,22,1.74,23,1.697,24,1.69,25,0.992,26,2.538,28,2.963,29,1.286,34,1.704,43,2.538,44,2.963,45,1.47,47,2.255,48,2.538,52,1.507,56,2.255,57,1.961,58,2.255,59,1.961,60,2.148,61,2.538,62,2.538,63,2.538,64,1.961,65,2.708,66,2.255,67,2.255,68,2.538,70,2.538,72,1.961,73,2.538,74,0.569,75,2.255,78,1.47,79,2.255,80,2.255,81,2.255,82,2.255,83,2.255,84,2.255,85,2.255,89,2.255,92,1.717,93,2.255,96,2.255,100,2.255,101,2.255,102,2.255,105,1.961,106,0.035,107,0.035,364,1.966,379,3.116,745,2.335,798,1.286,1113,2.895,1114,5.652,1115,2.895,1116,3.863,1117,3.116,1118,2.895,1119,3.863,1120,5.222,1121,2.895]],["title/miscellaneous/variables.html",[798,1.064,1122,2.734]],["body/miscellaneous/variables.html",[10,0.051,17,2.086,20,0.66,42,1.818,74,0.775,104,1.779,106,0.043,107,0.043,257,3.178,258,3.178,259,3.096,403,3.178,446,3.187,725,2.675,730,3.178,740,3.178,786,3.178,789,3.786,798,1.751,800,3.786,814,3.178,1117,3.178,1122,3.178,1123,3.941,1124,3.941,1125,3.941,1126,3.941,1127,3.941,1128,3.941,1129,3.941,1130,3.941,1131,3.941]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":239,"title":{},"body":{"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["0/1",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["003d4ef",{"_index":697,"title":{},"body":{"changelog.html":{}}}],["02",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["03",{"_index":529,"title":{},"body":{"changelog.html":{}}}],["05",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["06",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["07",{"_index":590,"title":{},"body":{"changelog.html":{}}}],["08",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["09",{"_index":579,"title":{},"body":{"changelog.html":{}}}],["0b3c577",{"_index":690,"title":{},"body":{"changelog.html":{}}}],["0de24fa",{"_index":704,"title":{},"body":{"changelog.html":{}}}],["0f8ad66",{"_index":549,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":247,"title":{},"body":{"classes/ErrorRenderer.html":{},"classes/Output.html":{},"index.html":{}}}],["1.0",{"_index":575,"title":{},"body":{"changelog.html":{}}}],["1.0.0",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["1.0.1",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["1.0.5",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["1.1",{"_index":576,"title":{},"body":{"changelog.html":{}}}],["1.20.2",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["1.3.5",{"_index":657,"title":{},"body":{"changelog.html":{}}}],["1.3.7",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["1/1",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["10.x",{"_index":563,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":566,"title":{},"body":{"changelog.html":{}}}],["11.x",{"_index":564,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":606,"title":{},"body":{"changelog.html":{}}}],["12.x",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["13.x",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["14",{"_index":596,"title":{},"body":{"changelog.html":{}}}],["14.x",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["15",{"_index":682,"title":{},"body":{"changelog.html":{}}}],["15.x",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["15/26",{"_index":724,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["1606f9c",{"_index":499,"title":{},"body":{"changelog.html":{}}}],["17",{"_index":665,"title":{},"body":{"changelog.html":{}}}],["17368e6",{"_index":581,"title":{},"body":{"changelog.html":{}}}],["18",{"_index":525,"title":{},"body":{"changelog.html":{}}}],["18/38",{"_index":718,"title":{},"body":{"coverage.html":{}}}],["1811453",{"_index":577,"title":{},"body":{"changelog.html":{}}}],["19",{"_index":526,"title":{},"body":{"changelog.html":{}}}],["1d45f92",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["1dfd2d6",{"_index":594,"title":{},"body":{"changelog.html":{}}}],["2.6.0",{"_index":674,"title":{},"body":{"changelog.html":{}}}],["2.6.1",{"_index":675,"title":{},"body":{"changelog.html":{}}}],["2.8.8",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["2.8.9",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["20",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["200",{"_index":809,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["2020",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["2021",{"_index":573,"title":{},"body":{"changelog.html":{}}}],["2023",{"_index":528,"title":{},"body":{"changelog.html":{}}}],["2024",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["21",{"_index":580,"title":{},"body":{"changelog.html":{}}}],["22",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["23",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["248fdf1",{"_index":709,"title":{},"body":{"changelog.html":{}}}],["26",{"_index":696,"title":{},"body":{"changelog.html":{}}}],["27",{"_index":678,"title":{},"body":{"changelog.html":{}}}],["2a096e1",{"_index":518,"title":{},"body":{"changelog.html":{}}}],["3.0.0",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["3.2.1",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["3.2.2",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["30",{"_index":591,"title":{},"body":{"changelog.html":{}}}],["341bc30",{"_index":601,"title":{},"body":{"changelog.html":{}}}],["346ce4c",{"_index":516,"title":{},"body":{"changelog.html":{}}}],["3814881",{"_index":521,"title":{},"body":{"changelog.html":{}}}],["3903fb0",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["4",{"_index":1100,"title":{},"body":{"overview.html":{}}}],["4.1.0",{"_index":603,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["4.1.1",{"_index":592,"title":{},"body":{"changelog.html":{}}}],["4.1.2",{"_index":593,"title":{},"body":{"changelog.html":{}}}],["4.17.15",{"_index":689,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["4.17.18",{"_index":686,"title":{},"body":{"changelog.html":{}}}],["4.17.19",{"_index":683,"title":{},"body":{"changelog.html":{}}}],["4.17.20",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["4.17.21",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["4.2.3",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["4.4.13",{"_index":586,"title":{},"body":{"changelog.html":{}}}],["4.4.15",{"_index":587,"title":{},"body":{"changelog.html":{}}}],["4.5.0",{"_index":599,"title":{},"body":{"changelog.html":{}}}],["4.5.1",{"_index":600,"title":{},"body":{"changelog.html":{}}}],["4.7.6",{"_index":608,"title":{},"body":{"changelog.html":{}}}],["4.7.7",{"_index":609,"title":{},"body":{"changelog.html":{}}}],["400",{"_index":811,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["404",{"_index":813,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["43acdba",{"_index":684,"title":{},"body":{"changelog.html":{}}}],["463449c",{"_index":687,"title":{},"body":{"changelog.html":{}}}],["47",{"_index":717,"title":{},"body":{"coverage.html":{}}}],["474d3b3",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["4f53c32",{"_index":671,"title":{},"body":{"changelog.html":{}}}],["5.0.1",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["5.0.2",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["5.0.3",{"_index":703,"title":{},"body":{"changelog.html":{}}}],["5.0.4",{"_index":698,"title":{},"body":{"changelog.html":{}}}],["5.1.0",{"_index":695,"title":{},"body":{"changelog.html":{}}}],["5.1.1",{"_index":691,"title":{},"body":{"changelog.html":{}}}],["5.1.2",{"_index":688,"title":{},"body":{"changelog.html":{}}}],["5.1.3",{"_index":685,"title":{},"body":{"changelog.html":{}}}],["5.1.4",{"_index":681,"title":{},"body":{"changelog.html":{}}}],["5.2.0",{"_index":677,"title":{},"body":{"changelog.html":{}}}],["5.2.1",{"_index":672,"title":{},"body":{"changelog.html":{}}}],["5.2.2",{"_index":664,"title":{},"body":{"changelog.html":{}}}],["5.3.0",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["5.3.1",{"_index":655,"title":{},"body":{"changelog.html":{}}}],["5.3.10",{"_index":605,"title":{},"body":{"changelog.html":{}}}],["5.3.11",{"_index":602,"title":{},"body":{"changelog.html":{}}}],["5.3.12",{"_index":595,"title":{},"body":{"changelog.html":{}}}],["5.3.13",{"_index":589,"title":{},"body":{"changelog.html":{}}}],["5.3.14",{"_index":582,"title":{},"body":{"changelog.html":{}}}],["5.3.2",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["5.3.3",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["5.3.4",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["5.3.5",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["5.3.6",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["5.3.7",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["5.3.8",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["5.3.9",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["5.4.0",{"_index":578,"title":{},"body":{"changelog.html":{}}}],["5.5.0",{"_index":572,"title":{},"body":{"changelog.html":{}}}],["5.7.3",{"_index":707,"title":{},"body":{"changelog.html":{}}}],["5.7.4",{"_index":708,"title":{},"body":{"changelog.html":{}}}],["5.x",{"_index":568,"title":{},"body":{"changelog.html":{}}}],["500",{"_index":1020,"title":{},"body":{"index.html":{}}}],["501",{"_index":506,"title":{},"body":{"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["56c446c",{"_index":702,"title":{},"body":{"changelog.html":{}}}],["57",{"_index":723,"title":{},"body":{"coverage.html":{}}}],["5be48f0",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["5ea3da5",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":1099,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["6.0.1",{"_index":630,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["6.0.2",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["6.1.0",{"_index":535,"title":{},"body":{"changelog.html":{}}}],["6.14.5",{"_index":692,"title":{},"body":{"changelog.html":{}}}],["6.14.6",{"_index":693,"title":{},"body":{"changelog.html":{}}}],["6.2.0",{"_index":527,"title":{},"body":{"changelog.html":{}}}],["6.x",{"_index":569,"title":{},"body":{"changelog.html":{}}}],["60b6b39",{"_index":534,"title":{},"body":{"changelog.html":{}}}],["7.0.0",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["7.1.0",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["7.1.1",{"_index":491,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["7522554",{"_index":588,"title":{},"body":{"changelog.html":{}}}],["79594e9",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["7cd4a01",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["7df3365",{"_index":694,"title":{},"body":{"changelog.html":{}}}],["8.0.0",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["8.0.1",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["828e4f8",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["8824574",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["8c9ed84",{"_index":522,"title":{},"body":{"changelog.html":{}}}],["9787627",{"_index":680,"title":{},"body":{"changelog.html":{}}}],["__dirname",{"_index":1131,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_extend",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":1066,"title":{},"body":{"license.html":{}}}],["acc",{"_index":172,"title":{},"body":{"classes/Debugger.html":{}}}],["acc[error.subject",{"_index":170,"title":{},"body":{"classes/Debugger.html":{}}}],["acc[error.subject].push(error",{"_index":171,"title":{},"body":{"classes/Debugger.html":{}}}],["accept",{"_index":879,"title":{},"body":{"index.html":{}}}],["according",{"_index":1000,"title":{},"body":{"index.html":{}}}],["acorn",{"_index":706,"title":{},"body":{"changelog.html":{}}}],["action",{"_index":1090,"title":{},"body":{"license.html":{}}}],["add",{"_index":308,"title":{},"body":{"classes/Output.html":{},"changelog.html":{},"index.html":{}}}],["add(lines",{"_index":321,"title":{},"body":{"classes/Output.html":{}}}],["added",{"_index":969,"title":{},"body":{"index.html":{}}}],["addition",{"_index":291,"title":{},"body":{"classes/ErrorRenderer.html":{},"classes/Output.html":{},"index.html":{}}}],["addition(text",{"_index":324,"title":{},"body":{"classes/Output.html":{}}}],["additional",{"_index":991,"title":{},"body":{"index.html":{}}}],["additionlabel",{"_index":204,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["additionlabel(error",{"_index":216,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["addroute",{"_index":380,"title":{},"body":{"classes/Stubborn.html":{}}}],["addroute(route",{"_index":400,"title":{},"body":{"classes/Stubborn.html":{}}}],["advantage",{"_index":868,"title":{},"body":{"index.html":{}}}],["advised",{"_index":979,"title":{},"body":{"index.html":{}}}],["affected",{"_index":419,"title":{},"body":{"classes/Stubborn.html":{}}}],["afterall(async",{"_index":949,"title":{},"body":{"index.html":{}}}],["aftereach",{"_index":953,"title":{},"body":{"index.html":{}}}],["against",{"_index":897,"title":{},"body":{"index.html":{}}}],["agent",{"_index":992,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":1113,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":679,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["allows",{"_index":885,"title":{},"body":{"index.html":{}}}],["although",{"_index":978,"title":{},"body":{"index.html":{}}}],["always",{"_index":834,"title":{},"body":{"index.html":{}}}],["amount",{"_index":850,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1059,"title":{},"body":{"license.html":{}}}],["another",{"_index":1014,"title":{},"body":{"index.html":{}}}],["api",{"_index":818,"title":{},"body":{"index.html":{},"properties.html":{}}}],["apis",{"_index":1101,"title":{},"body":{"properties.html":{}}}],["args",{"_index":192,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["arising",{"_index":1094,"title":{},"body":{"license.html":{}}}],["array",{"_index":8,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["array.isarray(lines",{"_index":355,"title":{},"body":{"classes/Output.html":{}}}],["arraytohash",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["associated",{"_index":1049,"title":{},"body":{"license.html":{}}}],["async",{"_index":956,"title":{},"body":{"index.html":{}}}],["attempt",{"_index":889,"title":{},"body":{"index.html":{}}}],["author",{"_index":1111,"title":{},"body":{"properties.html":{}}}],["authors",{"_index":1083,"title":{},"body":{"license.html":{}}}],["automatic",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["available",{"_index":869,"title":{},"body":{"index.html":{}}}],["await",{"_index":370,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["aweight",{"_index":271,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["aws",{"_index":574,"title":{},"body":{"changelog.html":{}}}],["b",{"_index":264,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["b8103b1",{"_index":604,"title":{},"body":{"changelog.html":{}}}],["b92e576",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["bad_request",{"_index":810,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["based",{"_index":826,"title":{},"body":{"index.html":{}}}],["basically",{"_index":820,"title":{},"body":{"index.html":{}}}],["become",{"_index":871,"title":{},"body":{"index.html":{}}}],["beforeall(async",{"_index":947,"title":{},"body":{"index.html":{}}}],["between",{"_index":996,"title":{},"body":{"index.html":{}}}],["blue",{"_index":309,"title":{},"body":{"classes/Output.html":{}}}],["blue(text",{"_index":327,"title":{},"body":{"classes/Output.html":{}}}],["body",{"_index":38,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"changelog.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["bodydefinition",{"_index":64,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionarray",{"_index":1,"title":{"interfaces/BodyDefinitionArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionobject",{"_index":62,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionprimitive",{"_index":61,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydefinitionvalue",{"_index":63,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["bodydiff",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["bold",{"_index":310,"title":{},"body":{"classes/Output.html":{}}}],["bold(text",{"_index":329,"title":{},"body":{"classes/Output.html":{}}}],["boolean",{"_index":24,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["break",{"_index":282,"title":{},"body":{"classes/ErrorRenderer.html":{},"index.html":{}}}],["breaking",{"_index":523,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["buffer",{"_index":78,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["bug",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["bump",{"_index":584,"title":{},"body":{"changelog.html":{}}}],["bweight",{"_index":274,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["c",{"_index":1037,"title":{},"body":{"license.html":{}}}],["c40f8a5",{"_index":705,"title":{},"body":{"changelog.html":{}}}],["call",{"_index":154,"title":{},"body":{"classes/Debugger.html":{},"index.html":{}}}],["called",{"_index":519,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["calls",{"_index":1031,"title":{},"body":{"index.html":{}}}],["case",{"_index":253,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["cat",{"_index":240,"title":{},"body":{"classes/ErrorRenderer.html":{},"classes/Output.html":{}}}],["cat.slice(1",{"_index":361,"title":{},"body":{"classes/Output.html":{}}}],["cat[0].touppercase",{"_index":360,"title":{},"body":{"classes/Output.html":{}}}],["category",{"_index":311,"title":{},"body":{"classes/Output.html":{}}}],["category(cat",{"_index":331,"title":{},"body":{"classes/Output.html":{}}}],["caterrors",{"_index":242,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["cea8793",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["chalk",{"_index":354,"title":{},"body":{"classes/Output.html":{},"changelog.html":{},"dependencies.html":{}}}],["change",{"_index":552,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["changelog",{"_index":490,"title":{"changelog.html":{}},"body":{}}],["changes",{"_index":524,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["charge",{"_index":1044,"title":{},"body":{"license.html":{}}}],["checkextra",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["checkmissing",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["checkparameters",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["checkvalue",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["checkvalues",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["chore",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["claim",{"_index":1086,"title":{},"body":{"license.html":{}}}],["class",{"_index":108,"title":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"coverage.html":{}}}],["classes",{"_index":110,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"overview.html":{}}}],["clean",{"_index":951,"title":{},"body":{"index.html":{}}}],["clear",{"_index":381,"title":{},"body":{"classes/Stubborn.html":{}}}],["cleared",{"_index":1126,"title":{},"body":{"miscellaneous/variables.html":{}}}],["closed",{"_index":571,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["code",{"_index":884,"title":{},"body":{"index.html":{}}}],["color",{"_index":353,"title":{},"body":{"classes/Output.html":{}}}],["commitment",{"_index":892,"title":{},"body":{"index.html":{}}}],["compare",{"_index":987,"title":{},"body":{"index.html":{}}}],["complete",{"_index":940,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1065,"title":{},"body":{"license.html":{}}}],["configuration",{"_index":1001,"title":{},"body":{"index.html":{}}}],["connection",{"_index":1095,"title":{},"body":{"license.html":{}}}],["connexion",{"_index":993,"title":{},"body":{"index.html":{}}}],["considered",{"_index":875,"title":{},"body":{"index.html":{}}}],["console",{"_index":995,"title":{},"body":{"index.html":{}}}],["const",{"_index":142,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["constant",{"_index":980,"title":{},"body":{"index.html":{}}}],["constants",{"_index":18,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{}}}],["constructor",{"_index":116,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["constructor(options",{"_index":393,"title":{},"body":{"classes/Stubborn.html":{}}}],["constructor(output",{"_index":214,"title":{},"body":{"classes/ErrorRenderer.html":{},"classes/Output.html":{}}}],["constructor(private",{"_index":134,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{}}}],["constructor(request",{"_index":117,"title":{},"body":{"classes/Debugger.html":{}}}],["content",{"_index":539,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["continuous",{"_index":893,"title":{},"body":{"index.html":{}}}],["contract",{"_index":1091,"title":{},"body":{"license.html":{}}}],["contributing",{"_index":831,"title":{},"body":{"index.html":{}}}],["copies",{"_index":1061,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1047,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1036,"title":{},"body":{"license.html":{}}}],["correctly",{"_index":857,"title":{},"body":{"index.html":{}}}],["count",{"_index":340,"title":{},"body":{"classes/Output.html":{}}}],["coverage",{"_index":710,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":408,"title":{},"body":{"classes/Stubborn.html":{}}}],["createserver",{"_index":447,"title":{},"body":{"classes/Stubborn.html":{}}}],["current",{"_index":899,"title":{},"body":{"index.html":{}}}],["currenttab",{"_index":307,"title":{},"body":{"classes/Output.html":{}}}],["cyan",{"_index":312,"title":{},"body":{"classes/Output.html":{}}}],["cyan(text",{"_index":333,"title":{},"body":{"classes/Output.html":{}}}],["d",{"_index":917,"title":{},"body":{"index.html":{}}}],["d22119e",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["d452bf9",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["damages",{"_index":1087,"title":{},"body":{"license.html":{}}}],["data",{"_index":538,"title":{},"body":{"changelog.html":{}}}],["deal",{"_index":1050,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1096,"title":{},"body":{"license.html":{}}}],["debugger",{"_index":109,"title":{"classes/Debugger.html":{}},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["default",{"_index":259,"title":{},"body":{"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/variables.html":{}}}],["defaultheaders",{"_index":452,"title":{},"body":{"classes/Stubborn.html":{}}}],["defined",{"_index":118,"title":{},"body":{"classes/Debugger.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["definition",{"_index":51,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["definitionmatcher",{"_index":44,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["definitions",{"_index":54,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["definitionvalue",{"_index":47,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["delete",{"_index":382,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["delete(path",{"_index":406,"title":{},"body":{"classes/Stubborn.html":{}}}],["dependencies",{"_index":548,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["describe('test",{"_index":946,"title":{},"body":{"index.html":{}}}],["description",{"_index":365,"title":{},"body":{"classes/Stubborn.html":{},"properties.html":{}}}],["dev",{"_index":914,"title":{},"body":{"index.html":{}}}],["diff",{"_index":165,"title":{},"body":{"classes/Debugger.html":{},"changelog.html":{},"index.html":{}}}],["diff.reduce((acc",{"_index":169,"title":{},"body":{"classes/Debugger.html":{}}}],["diff/requestdiff",{"_index":132,"title":{},"body":{"classes/Debugger.html":{}}}],["diff_subjects",{"_index":14,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"miscellaneous/enumerations.html":{}}}],["diff_subjects.body",{"_index":258,"title":{},"body":{"classes/ErrorRenderer.html":{},"miscellaneous/variables.html":{}}}],["diff_subjects.headers",{"_index":256,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_subjects.method",{"_index":254,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_subjects.path",{"_index":255,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_subjects.query",{"_index":257,"title":{},"body":{"classes/ErrorRenderer.html":{},"miscellaneous/variables.html":{}}}],["diff_types",{"_index":15,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"miscellaneous/enumerations.html":{}}}],["diff_types.extra",{"_index":266,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_types.extra].includes(e.type",{"_index":277,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_types.fail_equality",{"_index":267,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_types.fail_function",{"_index":269,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_types.fail_matching",{"_index":268,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_types.invalid_value_type",{"_index":270,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["diff_types.missing",{"_index":265,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["differencekeys",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["different",{"_index":1010,"title":{},"body":{"index.html":{}}}],["differror",{"_index":103,"title":{"interfaces/DiffError.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"changelog.html":{},"coverage.html":{}}}],["diffs",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["distribute",{"_index":1057,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":711,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["drop",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["dyson",{"_index":823,"title":{},"body":{"index.html":{},"properties.html":{}}}],["e.subject",{"_index":244,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["e065d1a",{"_index":676,"title":{},"body":{"changelog.html":{}}}],["e8f3e78",{"_index":511,"title":{},"body":{"changelog.html":{}}}],["each",{"_index":35,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["eba1ebe",{"_index":663,"title":{},"body":{"changelog.html":{}}}],["effort",{"_index":866,"title":{},"body":{"index.html":{}}}],["element",{"_index":36,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["emitter",{"_index":183,"title":{"interfaces/Emitter.html":{}},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{},"coverage.html":{}}}],["encounter",{"_index":907,"title":{},"body":{"index.html":{}}}],["end",{"_index":880,"title":{},"body":{"index.html":{}}}],["endpoints",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["engines",{"_index":906,"title":{},"body":{"index.html":{}}}],["engines.node",{"_index":841,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":890,"title":{},"body":{"index.html":{}}}],["entail",{"_index":876,"title":{},"body":{"index.html":{}}}],["enumerations",{"_index":799,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":94,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["error",{"_index":150,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"changelog.html":{}}}],["error(`unknown",{"_index":261,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["error.definition",{"_index":293,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["error.path",{"_index":285,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["error.type",{"_index":280,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["error.value",{"_index":290,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["erroreq",{"_index":205,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["erroreq(error",{"_index":218,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errorext",{"_index":206,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errorext(error",{"_index":220,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errormiss",{"_index":207,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errormiss(error",{"_index":222,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errorrenderer",{"_index":133,"title":{"classes/ErrorRenderer.html":{}},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"coverage.html":{}}}],["errorrenderer(out",{"_index":164,"title":{},"body":{"classes/Debugger.html":{}}}],["errors",{"_index":168,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{}}}],["errors.filter(e",{"_index":243,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errors.foreach((e",{"_index":276,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errors.length",{"_index":238,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errors.pop",{"_index":250,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errors.sort((a",{"_index":263,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errorsbysubjects",{"_index":229,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["errorsbysubjects[subject",{"_index":237,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["etc",{"_index":40,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["even",{"_index":859,"title":{},"body":{"index.html":{}}}],["event",{"_index":194,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{},"changelog.html":{},"license.html":{}}}],["eventemitter",{"_index":395,"title":{},"body":{"classes/Stubborn.html":{}}}],["events",{"_index":446,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ex",{"_index":927,"title":{},"body":{"index.html":{}}}],["exactly",{"_index":925,"title":{},"body":{"index.html":{}}}],["example",{"_index":453,"title":{},"body":{"classes/Stubborn.html":{}}}],["examples",{"_index":944,"title":{},"body":{"index.html":{}}}],["existing",{"_index":438,"title":{},"body":{"classes/Stubborn.html":{}}}],["expect(await",{"_index":1025,"title":{},"body":{"index.html":{}}}],["expect(res.body).toequal",{"_index":374,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["expect(res.body).toequal(body",{"_index":958,"title":{},"body":{"index.html":{}}}],["expect(res.calls.length).tobe(1",{"_index":1006,"title":{},"body":{"index.html":{}}}],["expect(res.calls[0]).toequal",{"_index":1007,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).tobe(501",{"_index":1002,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).tobe(501);q",{"_index":998,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).tobe(status_codes.success",{"_index":957,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(200",{"_index":976,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(status_codes.not_implemented",{"_index":968,"title":{},"body":{"index.html":{}}}],["expect(res.statuscode).toequal(status_codes.success",{"_index":983,"title":{},"body":{"index.html":{}}}],["expected",{"_index":287,"title":{},"body":{"classes/ErrorRenderer.html":{},"index.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["express",{"_index":1075,"title":{},"body":{"license.html":{}}}],["extends",{"_index":7,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"interfaces/JsonArray.html":{}}}],["external",{"_index":817,"title":{},"body":{"index.html":{},"properties.html":{}}}],["extra",{"_index":806,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["extractfileinfofromstackline",{"_index":787,"title":{},"body":{"coverage.html":{}}}],["eyes",{"_index":570,"title":{},"body":{"changelog.html":{}}}],["faa6a7e",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["fac4187",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["fact",{"_index":930,"title":{},"body":{"index.html":{}}}],["fail_equality",{"_index":802,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fail_function",{"_index":804,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fail_matching",{"_index":803,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["fall",{"_index":903,"title":{},"body":{"index.html":{}}}],["false",{"_index":963,"title":{},"body":{"index.html":{}}}],["faq",{"_index":830,"title":{},"body":{"index.html":{}}}],["features",{"_index":501,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["fetch",{"_index":673,"title":{},"body":{"changelog.html":{}}}],["ff51a8f",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["files",{"_index":701,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["finally",{"_index":1022,"title":{},"body":{"index.html":{}}}],["find",{"_index":939,"title":{},"body":{"index.html":{}}}],["findcaller",{"_index":788,"title":{},"body":{"coverage.html":{}}}],["findendpointroutediffs",{"_index":720,"title":{},"body":{"coverage.html":{}}}],["finderrors",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["finderrorsobject",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["first",{"_index":1011,"title":{},"body":{"index.html":{}}}],["fitness",{"_index":1079,"title":{},"body":{"license.html":{}}}],["fix",{"_index":699,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["following",{"_index":943,"title":{},"body":{"index.html":{},"license.html":{}}}],["forget",{"_index":152,"title":{},"body":{"classes/Debugger.html":{}}}],["formatarray",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["formatdifferror",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["formaterror",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["formatlineinfo",{"_index":313,"title":{},"body":{"classes/Output.html":{}}}],["formatlineinfo(line",{"_index":335,"title":{},"body":{"classes/Output.html":{}}}],["formatpath",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["formatprimitive",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["formatproperty",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["formatvalue",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["free",{"_index":1043,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":1039,"title":{},"body":{"license.html":{}}}],["function",{"_index":34,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["furnished",{"_index":1064,"title":{},"body":{"license.html":{}}}],["furthermore",{"_index":888,"title":{},"body":{"index.html":{}}}],["generic",{"_index":32,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["get(path",{"_index":409,"title":{},"body":{"classes/Stubborn.html":{}}}],["getdiffsubjectlabel",{"_index":208,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["getdiffsubjectlabel(subject",{"_index":224,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["getinfo",{"_index":113,"title":{},"body":{"classes/Debugger.html":{}}}],["getmaxlisteners",{"_index":185,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["getorigin",{"_index":383,"title":{},"body":{"classes/Stubborn.html":{}}}],["getport",{"_index":384,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport",{"_index":449,"title":{},"body":{"classes/Stubborn.html":{}}}],["getserverport(this.server",{"_index":464,"title":{},"body":{"classes/Stubborn.html":{}}}],["getting",{"_index":489,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{}}],["git",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["got(${sb.getorigin",{"_index":371,"title":{},"body":{"classes/Stubborn.html":{}}}],["got(`${sb.getorigin",{"_index":455,"title":{},"body":{"classes/Stubborn.html":{}}}],["got(`${sb.getorigin()}${path",{"_index":960,"title":{},"body":{"index.html":{}}}],["granted",{"_index":1042,"title":{},"body":{"license.html":{}}}],["greater",{"_index":305,"title":{},"body":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{}}}],["greatest",{"_index":854,"title":{},"body":{"index.html":{}}}],["handlebars",{"_index":607,"title":{},"body":{"changelog.html":{}}}],["hapi/accept",{"_index":645,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["hardcoded",{"_index":938,"title":{},"body":{"index.html":{}}}],["hash",{"_index":87,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["hasown",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["head",{"_index":385,"title":{},"body":{"classes/Stubborn.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["head(path",{"_index":422,"title":{},"body":{"classes/Stubborn.html":{}}}],["header",{"_index":37,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["headerdefinition",{"_index":58,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["headers",{"_index":77,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["headersdefinition",{"_index":59,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["headersdiff",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["help",{"_index":891,"title":{},"body":{"index.html":{}}}],["here",{"_index":945,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1041,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1084,"title":{},"body":{"license.html":{}}}],["homepage",{"_index":1107,"title":{},"body":{"properties.html":{}}}],["host",{"_index":451,"title":{},"body":{"classes/Stubborn.html":{}}}],["hosted",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["hot",{"_index":921,"title":{},"body":{"index.html":{}}}],["http",{"_index":13,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"properties.html":{}}}],["http://${this.stubbornoptions.host}:${this.getport",{"_index":465,"title":{},"body":{"classes/Stubborn.html":{}}}],["httpclient.request",{"_index":1026,"title":{},"body":{"index.html":{}}}],["https://github.com/ybonnefond/stubborn#stubborn",{"_index":1108,"title":{},"body":{"properties.html":{}}}],["https://github.com/ybonnefond/stubborn.git",{"_index":1110,"title":{},"body":{"properties.html":{}}}],["identifier",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["implemented",{"_index":965,"title":{},"body":{"index.html":{}}}],["implements",{"_index":375,"title":{},"body":{"classes/Stubborn.html":{}}}],["implied",{"_index":1076,"title":{},"body":{"license.html":{}}}],["import",{"_index":9,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["included",{"_index":1069,"title":{},"body":{"license.html":{}}}],["including",{"_index":1052,"title":{},"body":{"license.html":{}}}],["incomingmessage",{"_index":11,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["index",{"_index":74,"title":{"index.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{}}}],["ini",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["initialized",{"_index":415,"title":{},"body":{"classes/Stubborn.html":{}}}],["inspect",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["install",{"_index":902,"title":{},"body":{"index.html":{}}}],["installation",{"_index":828,"title":{},"body":{"index.html":{}}}],["installing",{"_index":908,"title":{},"body":{"index.html":{}}}],["integer",{"_index":304,"title":{},"body":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{}}}],["integration",{"_index":894,"title":{},"body":{"index.html":{}}}],["interface",{"_index":0,"title":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"interfaces/JsonArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"interfaces/JsonArray.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"interfaces/JsonArray.html":{},"overview.html":{}}}],["intersectkeys",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["invalid_value_type",{"_index":807,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invalidremoveaftermatchingtimesparametererror",{"_index":298,"title":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{}},"body":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"coverage.html":{}}}],["investment",{"_index":855,"title":{},"body":{"index.html":{}}}],["isboolean",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["isdate",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["iserror",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["isfunction",{"_index":773,"title":{},"body":{"coverage.html":{}}}],["isnull",{"_index":774,"title":{},"body":{"coverage.html":{}}}],["isnumber",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["isobject",{"_index":776,"title":{},"body":{"coverage.html":{}}}],["isregexp",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["isstring",{"_index":778,"title":{},"body":{"coverage.html":{}}}],["issue",{"_index":911,"title":{},"body":{"index.html":{}}}],["issues",{"_index":883,"title":{},"body":{"index.html":{}}}],["isundefined",{"_index":779,"title":{},"body":{"coverage.html":{}}}],["it's",{"_index":856,"title":{},"body":{"index.html":{}}}],["it('should",{"_index":955,"title":{},"body":{"index.html":{}}}],["jasmine",{"_index":1105,"title":{},"body":{"properties.html":{}}}],["javascript",{"_index":900,"title":{},"body":{"index.html":{}}}],["jest",{"_index":1104,"title":{},"body":{"properties.html":{}}}],["json",{"_index":372,"title":{},"body":{"classes/Stubborn.html":{},"changelog.html":{},"index.html":{}}}],["jsonarray",{"_index":29,"title":{"interfaces/JsonArray.html":{}},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["jsonobject",{"_index":26,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["jsonprimitive",{"_index":21,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["jsonvalue",{"_index":28,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["key",{"_index":71,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["keystolowercase",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["keywords",{"_index":1103,"title":{},"body":{"properties.html":{}}}],["kind",{"_index":1074,"title":{},"body":{"license.html":{}}}],["know",{"_index":999,"title":{},"body":{"index.html":{}}}],["last",{"_index":1032,"title":{},"body":{"index.html":{}}}],["latest",{"_index":560,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["liability",{"_index":1088,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1085,"title":{},"body":{"license.html":{}}}],["license",{"_index":1034,"title":{"license.html":{}},"body":{"license.html":{},"properties.html":{}}}],["life",{"_index":881,"title":{},"body":{"index.html":{}}}],["limit",{"_index":846,"title":{},"body":{"index.html":{}}}],["limitation",{"_index":1053,"title":{},"body":{"license.html":{}}}],["limited",{"_index":849,"title":{},"body":{"index.html":{},"license.html":{}}}],["line",{"_index":337,"title":{},"body":{"classes/Output.html":{},"changelog.html":{}}}],["lineinfo",{"_index":105,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"miscellaneous/typealiases.html":{}}}],["lines",{"_index":323,"title":{},"body":{"classes/Output.html":{}}}],["lines.foreach(line",{"_index":356,"title":{},"body":{"classes/Output.html":{}}}],["listener",{"_index":191,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{},"changelog.html":{}}}],["listening",{"_index":421,"title":{},"body":{"classes/Stubborn.html":{}}}],["literal",{"_index":1120,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["load",{"_index":922,"title":{},"body":{"index.html":{}}}],["localhost",{"_index":458,"title":{},"body":{"classes/Stubborn.html":{}}}],["lodash",{"_index":639,"title":{},"body":{"changelog.html":{},"dependencies.html":{}}}],["log",{"_index":497,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["logdiff",{"_index":114,"title":{},"body":{"classes/Debugger.html":{},"index.html":{}}}],["logdiff(route",{"_index":125,"title":{},"body":{"classes/Debugger.html":{}}}],["logdiffon501",{"_index":147,"title":{},"body":{"classes/Debugger.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["long",{"_index":835,"title":{},"body":{"index.html":{}}}],["longer",{"_index":557,"title":{},"body":{"changelog.html":{}}}],["lts",{"_index":561,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["major",{"_index":878,"title":{},"body":{"index.html":{}}}],["make",{"_index":865,"title":{},"body":{"index.html":{}}}],["manager",{"_index":912,"title":{},"body":{"index.html":{}}}],["managers",{"_index":901,"title":{},"body":{"index.html":{}}}],["match",{"_index":33,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["matched",{"_index":148,"title":{},"body":{"classes/Debugger.html":{},"changelog.html":{},"index.html":{}}}],["matches",{"_index":964,"title":{},"body":{"index.html":{}}}],["matchfunction",{"_index":43,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["matching",{"_index":107,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mathcing",{"_index":520,"title":{},"body":{"changelog.html":{}}}],["max",{"_index":543,"title":{},"body":{"changelog.html":{}}}],["meets",{"_index":822,"title":{},"body":{"index.html":{}}}],["member",{"_index":27,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["merchantability",{"_index":1078,"title":{},"body":{"license.html":{}}}],["merge",{"_index":882,"title":{},"body":{"index.html":{},"license.html":{}}}],["message",{"_index":350,"title":{},"body":{"classes/Output.html":{}}}],["method",{"_index":88,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["methoddefinition",{"_index":56,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["methoddiff",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["methods",{"_index":16,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["middleware",{"_index":96,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["miscellaneous",{"_index":798,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":990,"title":{},"body":{"index.html":{}}}],["missing",{"_index":805,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["mit",{"_index":1035,"title":{},"body":{"license.html":{},"properties.html":{}}}],["mocha",{"_index":1106,"title":{},"body":{"properties.html":{}}}],["mock",{"_index":816,"title":{},"body":{"index.html":{},"properties.html":{}}}],["modify",{"_index":1055,"title":{},"body":{"license.html":{}}}],["modules",{"_index":1097,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":862,"title":{},"body":{"index.html":{}}}],["move",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["multipart/form",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["multiparty",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["multiple",{"_index":1009,"title":{},"body":{"index.html":{}}}],["name",{"_index":121,"title":{},"body":{"classes/Debugger.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["nb",{"_index":201,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["needed",{"_index":952,"title":{},"body":{"index.html":{}}}],["never",{"_index":1033,"title":{},"body":{"index.html":{}}}],["new",{"_index":144,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/Stubborn.html":{},"coverage.html":{},"index.html":{}}}],["newer",{"_index":858,"title":{},"body":{"index.html":{}}}],["newline",{"_index":314,"title":{},"body":{"classes/Output.html":{}}}],["newline(count",{"_index":338,"title":{},"body":{"classes/Output.html":{}}}],["newlines",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["next",{"_index":99,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["nextfunction",{"_index":93,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["nock",{"_index":821,"title":{},"body":{"index.html":{},"properties.html":{}}}],["node",{"_index":514,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["non",{"_index":887,"title":{},"body":{"index.html":{}}}],["noninfringement",{"_index":1082,"title":{},"body":{"license.html":{}}}],["normalize",{"_index":597,"title":{},"body":{"changelog.html":{}}}],["not_found",{"_index":812,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["not_implemented",{"_index":814,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["notice",{"_index":1067,"title":{},"body":{"license.html":{}}}],["notifier",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["now",{"_index":562,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":666,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":25,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{},"miscellaneous/typealiases.html":{}}}],["number",{"_index":23,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":403,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":457,"title":{},"body":{"classes/Stubborn.html":{}}}],["objectorarray",{"_index":1116,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["objecttostring",{"_index":780,"title":{},"body":{"coverage.html":{}}}],["obtaining",{"_index":1046,"title":{},"body":{"license.html":{}}}],["off(event",{"_index":189,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["offers",{"_index":853,"title":{},"body":{"index.html":{}}}],["older",{"_index":838,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":870,"title":{},"body":{"index.html":{}}}],["on(event",{"_index":195,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["once",{"_index":186,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["once(event",{"_index":197,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["one",{"_index":926,"title":{},"body":{"index.html":{}}}],["optional",{"_index":122,"title":{},"body":{"classes/Debugger.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["options",{"_index":386,"title":{},"body":{"classes/Stubborn.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["options(path",{"_index":427,"title":{},"body":{"classes/Stubborn.html":{}}}],["options.port",{"_index":416,"title":{},"body":{"classes/Stubborn.html":{}}}],["origin",{"_index":413,"title":{},"body":{"classes/Stubborn.html":{}}}],["otherwise",{"_index":1093,"title":{},"body":{"license.html":{}}}],["out",{"_index":143,"title":{},"body":{"classes/Debugger.html":{},"license.html":{}}}],["out.add",{"_index":145,"title":{},"body":{"classes/Debugger.html":{}}}],["out.add(out.tab(`at",{"_index":175,"title":{},"body":{"classes/Debugger.html":{}}}],["out.add(out.tab(out.yellow(`at",{"_index":158,"title":{},"body":{"classes/Debugger.html":{}}}],["out.add(out.yellow('did",{"_index":151,"title":{},"body":{"classes/Debugger.html":{}}}],["out.blue(out.bold(this.request.method",{"_index":173,"title":{},"body":{"classes/Debugger.html":{}}}],["out.cyan",{"_index":174,"title":{},"body":{"classes/Debugger.html":{}}}],["out.formatlineinfo(position",{"_index":159,"title":{},"body":{"classes/Debugger.html":{}}}],["out.formatlineinfo(route.getinitializerpath",{"_index":176,"title":{},"body":{"classes/Debugger.html":{}}}],["out.newline(2",{"_index":161,"title":{},"body":{"classes/Debugger.html":{}}}],["out.pulltab",{"_index":160,"title":{},"body":{"classes/Debugger.html":{}}}],["out.pushtab",{"_index":157,"title":{},"body":{"classes/Debugger.html":{}}}],["out.warn('detected",{"_index":146,"title":{},"body":{"classes/Debugger.html":{}}}],["output",{"_index":130,"title":{"classes/Output.html":{}},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{},"changelog.html":{},"coverage.html":{}}}],["overview",{"_index":1098,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["pach",{"_index":431,"title":{},"body":{"classes/Stubborn.html":{}}}],["package",{"_index":792,"title":{"dependencies.html":{},"properties.html":{}},"body":{"index.html":{}}}],["package's",{"_index":873,"title":{},"body":{"index.html":{}}}],["package.json",{"_index":843,"title":{},"body":{"index.html":{}}}],["packaged",{"_index":700,"title":{},"body":{"changelog.html":{}}}],["packages",{"_index":844,"title":{},"body":{"index.html":{}}}],["page",{"_index":967,"title":{},"body":{"index.html":{}}}],["param",{"_index":468,"title":{},"body":{"classes/Stubborn.html":{}}}],["parameter",{"_index":302,"title":{},"body":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"index.html":{}}}],["parameters",{"_index":120,"title":{},"body":{"classes/Debugger.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["parseint(value",{"_index":977,"title":{},"body":{"index.html":{}}}],["parser",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":53,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["particular",{"_index":1080,"title":{},"body":{"license.html":{}}}],["pass",{"_index":517,"title":{},"body":{"changelog.html":{}}}],["patch",{"_index":387,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["patch(path",{"_index":429,"title":{},"body":{"classes/Stubborn.html":{}}}],["path",{"_index":86,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["path).setbody(body",{"_index":472,"title":{},"body":{"classes/Stubborn.html":{}}}],["pathdefinition",{"_index":57,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["pathdiff",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["permission",{"_index":1040,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1062,"title":{},"body":{"license.html":{}}}],["person",{"_index":1045,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1063,"title":{},"body":{"license.html":{}}}],["picked",{"_index":936,"title":{},"body":{"index.html":{}}}],["please",{"_index":909,"title":{},"body":{"index.html":{}}}],["policy",{"_index":833,"title":{},"body":{"index.html":{}}}],["port",{"_index":376,"title":{},"body":{"classes/Stubborn.html":{}}}],["portions",{"_index":1071,"title":{},"body":{"license.html":{}}}],["position",{"_index":155,"title":{},"body":{"classes/Debugger.html":{}}}],["positive",{"_index":303,"title":{},"body":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{}}}],["possible",{"_index":49,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["post",{"_index":388,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["post(path",{"_index":432,"title":{},"body":{"classes/Stubborn.html":{}}}],["previous",{"_index":872,"title":{},"body":{"index.html":{}}}],["private",{"_index":203,"title":{},"body":{"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["process.stdout.write(out.render",{"_index":162,"title":{},"body":{"classes/Debugger.html":{}}}],["promise",{"_index":442,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["promise(resolve",{"_index":479,"title":{},"body":{"classes/Stubborn.html":{}}}],["properties",{"_index":182,"title":{"properties.html":{}},"body":{"interfaces/DiffError.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"properties.html":{}}}],["property",{"_index":842,"title":{},"body":{"index.html":{}}}],["provide",{"_index":837,"title":{},"body":{"index.html":{}}}],["provided",{"_index":1072,"title":{},"body":{"license.html":{}}}],["public",{"_index":112,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["publish",{"_index":1056,"title":{},"body":{"license.html":{}}}],["publishing",{"_index":877,"title":{},"body":{"index.html":{}}}],["pulltab",{"_index":315,"title":{},"body":{"classes/Output.html":{}}}],["purpose",{"_index":1081,"title":{},"body":{"license.html":{}}}],["pushtab",{"_index":316,"title":{},"body":{"classes/Output.html":{}}}],["put",{"_index":389,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{}}}],["put(path",{"_index":434,"title":{},"body":{"classes/Stubborn.html":{}}}],["q",{"_index":985,"title":{},"body":{"index.html":{}}}],["query",{"_index":39,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["querydefinition",{"_index":67,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["querydiff",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["queryparameterdefinition",{"_index":66,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["queryparameterdefinitionprimitives",{"_index":65,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["randomly",{"_index":418,"title":{},"body":{"classes/Stubborn.html":{}}}],["range",{"_index":840,"title":{},"body":{"index.html":{}}}],["rec",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["received",{"_index":286,"title":{},"body":{"classes/ErrorRenderer.html":{},"index.html":{}}}],["receiving",{"_index":989,"title":{},"body":{"index.html":{}}}],["recent",{"_index":898,"title":{},"body":{"index.html":{}}}],["record",{"_index":60,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["reducetosinglestring",{"_index":781,"title":{},"body":{"coverage.html":{}}}],["regex",{"_index":972,"title":{},"body":{"index.html":{}}}],["regexp",{"_index":45,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["register",{"_index":402,"title":{},"body":{"classes/Stubborn.html":{}}}],["registerlogdiff",{"_index":721,"title":{},"body":{"coverage.html":{}}}],["release",{"_index":832,"title":{},"body":{"index.html":{}}}],["remove",{"_index":153,"title":{},"body":{"classes/Debugger.html":{},"classes/Stubborn.html":{},"changelog.html":{},"index.html":{}}}],["removed",{"_index":1024,"title":{},"body":{"index.html":{}}}],["removeroute",{"_index":390,"title":{},"body":{"classes/Stubborn.html":{}}}],["removeroute(route",{"_index":436,"title":{},"body":{"classes/Stubborn.html":{}}}],["removerouteaftermatching",{"_index":1019,"title":{},"body":{"index.html":{}}}],["removing",{"_index":874,"title":{},"body":{"index.html":{}}}],["render",{"_index":163,"title":{},"body":{"classes/Debugger.html":{},"classes/Output.html":{}}}],["render.rendererrors(diff_subjects.body",{"_index":181,"title":{},"body":{"classes/Debugger.html":{}}}],["render.rendererrors(diff_subjects.headers",{"_index":179,"title":{},"body":{"classes/Debugger.html":{}}}],["render.rendererrors(diff_subjects.method",{"_index":177,"title":{},"body":{"classes/Debugger.html":{}}}],["render.rendererrors(diff_subjects.path",{"_index":178,"title":{},"body":{"classes/Debugger.html":{}}}],["render.rendererrors(diff_subjects.query",{"_index":180,"title":{},"body":{"classes/Debugger.html":{}}}],["rendererror",{"_index":209,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["rendererror(error",{"_index":226,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["rendererrors",{"_index":210,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["rendererrors(subject",{"_index":228,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["rendermultipleserrors",{"_index":211,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["rendermultipleserrors(errors",{"_index":231,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["renderoneerror",{"_index":212,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["renderoneerror(errors",{"_index":233,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["replied",{"_index":1128,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reply",{"_index":722,"title":{},"body":{"coverage.html":{}}}],["report",{"_index":910,"title":{},"body":{"index.html":{}}}],["repository",{"_index":1109,"title":{},"body":{"properties.html":{}}}],["req",{"_index":97,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["request",{"_index":52,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["request's",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["request(`/?page=1&limit=10",{"_index":970,"title":{},"body":{"index.html":{}}}],["request(`/?page=2",{"_index":971,"title":{},"body":{"index.html":{}}}],["request(path",{"_index":959,"title":{},"body":{"index.html":{}}}],["request(sb.getorigin",{"_index":997,"title":{},"body":{"index.html":{}}}],["requestbody",{"_index":81,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestdiff",{"_index":131,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["requestdiff(route",{"_index":166,"title":{},"body":{"classes/Debugger.html":{}}}],["requesthash",{"_index":83,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestheaders",{"_index":79,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestinfo",{"_index":85,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestinfowithsearchparam",{"_index":89,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestmatcher",{"_index":100,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestmethod",{"_index":84,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestpath",{"_index":82,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requestquery",{"_index":80,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["requests",{"_index":825,"title":{},"body":{"index.html":{}}}],["res",{"_index":98,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["res.write",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["resolve(null",{"_index":482,"title":{},"body":{"classes/Stubborn.html":{}}}],["resolved",{"_index":443,"title":{},"body":{"classes/Stubborn.html":{}}}],["respond",{"_index":928,"title":{},"body":{"index.html":{}}}],["responds",{"_index":931,"title":{},"body":{"index.html":{}}}],["response",{"_index":92,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["responsebody",{"_index":102,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responsedefinition",{"_index":75,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responseheaders",{"_index":101,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["responses",{"_index":819,"title":{},"body":{"index.html":{}}}],["responsetype",{"_index":961,"title":{},"body":{"index.html":{}}}],["restriction",{"_index":1051,"title":{},"body":{"license.html":{}}}],["results",{"_index":106,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrun",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["return",{"_index":135,"title":{},"body":{"classes/Debugger.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["returned",{"_index":988,"title":{},"body":{"index.html":{}}}],["returns",{"_index":124,"title":{},"body":{"classes/Debugger.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{}}}],["rights",{"_index":1054,"title":{},"body":{"license.html":{}}}],["route",{"_index":126,"title":{},"body":{"classes/Debugger.html":{},"classes/Stubborn.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["route(methods.get",{"_index":1017,"title":{},"body":{"index.html":{}}}],["route.getlogdiffposition",{"_index":156,"title":{},"body":{"classes/Debugger.html":{}}}],["route.removerouteaftermatching",{"_index":1012,"title":{},"body":{"index.html":{}}}],["router",{"_index":377,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["routes",{"_index":405,"title":{},"body":{"classes/Stubborn.html":{},"changelog.html":{},"index.html":{}}}],["run",{"_index":886,"title":{},"body":{"index.html":{}}}],["runs",{"_index":896,"title":{},"body":{"index.html":{}}}],["same",{"_index":1008,"title":{},"body":{"index.html":{}}}],["save",{"_index":913,"title":{},"body":{"index.html":{}}}],["sb",{"_index":368,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.addroute",{"_index":1016,"title":{},"body":{"index.html":{}}}],["sb.clear",{"_index":954,"title":{},"body":{"index.html":{}}}],["sb.get",{"_index":1003,"title":{},"body":{"index.html":{}}}],["sb.get('/').setqueryparameters",{"_index":966,"title":{},"body":{"index.html":{}}}],["sb.get('/').setresponsebody",{"_index":454,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["sb.post",{"_index":973,"title":{},"body":{"index.html":{}}}],["sb.start",{"_index":948,"title":{},"body":{"index.html":{}}}],["sb.stop",{"_index":950,"title":{},"body":{"index.html":{}}}],["scope",{"_index":69,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["searchparams",{"_index":90,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["second",{"_index":1029,"title":{},"body":{"index.html":{}}}],["security",{"_index":583,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":984,"title":{},"body":{"index.html":{}}}],["sell",{"_index":1060,"title":{},"body":{"license.html":{}}}],["send",{"_index":934,"title":{},"body":{"index.html":{}}}],["sent",{"_index":933,"title":{},"body":{"index.html":{}}}],["separate",{"_index":827,"title":{},"body":{"index.html":{}}}],["server",{"_index":378,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{},"properties.html":{}}}],["serverresponse",{"_index":12,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["set",{"_index":417,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["setheaders",{"_index":994,"title":{},"body":{"index.html":{}}}],["setheaders(null",{"_index":1004,"title":{},"body":{"index.html":{}}}],["setheaders(wildcard",{"_index":981,"title":{},"body":{"index.html":{}}}],["setmaxlisteners",{"_index":187,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["setmaxlisteners(nb",{"_index":199,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["setresponsebody('content",{"_index":1005,"title":{},"body":{"index.html":{}}}],["setresponsestatuscode(200",{"_index":1023,"title":{},"body":{"index.html":{}}}],["setresponsestatuscode(400",{"_index":1018,"title":{},"body":{"index.html":{}}}],["setresponsestatuscode(500",{"_index":1021,"title":{},"body":{"index.html":{}}}],["setup",{"_index":895,"title":{},"body":{"index.html":{}}}],["shall",{"_index":1068,"title":{},"body":{"license.html":{}}}],["show",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["slug",{"_index":974,"title":{},"body":{"index.html":{}}}],["software",{"_index":1048,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["specifically",{"_index":845,"title":{},"body":{"index.html":{}}}],["specified",{"_index":905,"title":{},"body":{"index.html":{}}}],["specify",{"_index":41,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["src/.../bodydiff.ts",{"_index":1123,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":800,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../index.ts",{"_index":1114,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../lineinfo.ts",{"_index":1115,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../querydiff.ts",{"_index":1124,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../stubborn.ts",{"_index":1118,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.ts",{"_index":1117,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/@types/emitter.ts",{"_index":184,"title":{},"body":{"interfaces/Emitter.html":{},"coverage.html":{}}}],["src/@types/emitter.ts:2",{"_index":200,"title":{},"body":{"interfaces/Emitter.html":{}}}],["src/@types/emitter.ts:3",{"_index":188,"title":{},"body":{"interfaces/Emitter.html":{}}}],["src/@types/emitter.ts:4",{"_index":196,"title":{},"body":{"interfaces/Emitter.html":{}}}],["src/@types/emitter.ts:5",{"_index":198,"title":{},"body":{"interfaces/Emitter.html":{}}}],["src/@types/emitter.ts:6",{"_index":193,"title":{},"body":{"interfaces/Emitter.html":{}}}],["src/@types/index.ts",{"_index":6,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/@types/lineinfo.ts",{"_index":1121,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/constants.ts",{"_index":725,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/debug/debugger.ts",{"_index":111,"title":{},"body":{"classes/Debugger.html":{},"coverage.html":{}}}],["src/debug/debugger.ts:12",{"_index":123,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/debugger.ts:23",{"_index":129,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/debugger.ts:41",{"_index":127,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/debugger.ts:9",{"_index":119,"title":{},"body":{"classes/Debugger.html":{}}}],["src/debug/errorrenderer.ts",{"_index":202,"title":{},"body":{"classes/ErrorRenderer.html":{},"coverage.html":{}}}],["src/debug/errorrenderer.ts:107",{"_index":236,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:111",{"_index":217,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:115",{"_index":219,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:126",{"_index":223,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:133",{"_index":221,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:30",{"_index":234,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:35",{"_index":225,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:5",{"_index":215,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:52",{"_index":232,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:8",{"_index":230,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/errorrenderer.ts:84",{"_index":227,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["src/debug/output.ts",{"_index":306,"title":{},"body":{"classes/Output.html":{},"coverage.html":{}}}],["src/debug/output.ts:19",{"_index":332,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:25",{"_index":339,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:33",{"_index":343,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:37",{"_index":342,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:41",{"_index":341,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:45",{"_index":325,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:49",{"_index":345,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:5",{"_index":320,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:53",{"_index":347,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:57",{"_index":349,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:61",{"_index":352,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:65",{"_index":328,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:69",{"_index":334,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:73",{"_index":330,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:77",{"_index":336,"title":{},"body":{"classes/Output.html":{}}}],["src/debug/output.ts:8",{"_index":322,"title":{},"body":{"classes/Output.html":{}}}],["src/diff/bodydiff.ts",{"_index":730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/diff/headersdiff.ts",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["src/diff/methoddiff.ts",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["src/diff/pathdiff.ts",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["src/diff/querydiff.ts",{"_index":740,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/diff/requestdiff.ts",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["src/diff/utils.ts",{"_index":745,"title":{},"body":{"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/errors/invalidremoveaftermatchingtimesparametererror.ts",{"_index":299,"title":{},"body":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{},"coverage.html":{}}}],["src/errors/invalidremoveaftermatchingtimesparametererror.ts:1",{"_index":300,"title":{},"body":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{}}}],["src/inspect.ts",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["src/middlewares/bodymultipartformdata.ts",{"_index":784,"title":{},"body":{"coverage.html":{}}}],["src/route.ts",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["src/router.ts",{"_index":719,"title":{},"body":{"coverage.html":{}}}],["src/stubborn.ts",{"_index":364,"title":{},"body":{"classes/Stubborn.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/stubborn.ts:104",{"_index":430,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:114",{"_index":433,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:124",{"_index":435,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:134",{"_index":423,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:144",{"_index":428,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:153",{"_index":401,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:162",{"_index":437,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:170",{"_index":441,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:185",{"_index":444,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:191",{"_index":425,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:196",{"_index":426,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:201",{"_index":424,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:206",{"_index":439,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:212",{"_index":411,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:30",{"_index":398,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:31",{"_index":396,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:32",{"_index":397,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:33",{"_index":399,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:34",{"_index":394,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:57",{"_index":414,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:65",{"_index":412,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:72",{"_index":404,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:85",{"_index":407,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/stubborn.ts:94",{"_index":410,"title":{},"body":{"classes/Stubborn.html":{}}}],["src/utils.ts",{"_index":786,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ssri",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["start",{"_index":391,"title":{},"body":{"classes/Stubborn.html":{}}}],["start(port",{"_index":440,"title":{},"body":{"classes/Stubborn.html":{}}}],["started",{"_index":420,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/Stubborn.html":{}}}],["statements",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":1028,"title":{},"body":{"index.html":{}}}],["status_codes",{"_index":801,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["statuscode",{"_index":76,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["stop",{"_index":392,"title":{},"body":{"classes/Stubborn.html":{}}}],["stopped",{"_index":445,"title":{},"body":{"classes/Stubborn.html":{}}}],["streamtostring",{"_index":785,"title":{},"body":{"coverage.html":{}}}],["strictly",{"_index":824,"title":{},"body":{"index.html":{}}}],["string",{"_index":22,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["stringify",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["stubborn",{"_index":363,"title":{"classes/Stubborn.html":{}},"body":{"classes/Stubborn.html":{},"coverage.html":{},"index.html":{},"properties.html":{}}}],["stubborn();sb.get('/').setresponsebody",{"_index":369,"title":{},"body":{"classes/Stubborn.html":{}}}],["stubborn_src_dir",{"_index":789,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["stubbornoptions",{"_index":379,"title":{},"body":{"classes/Stubborn.html":{},"miscellaneous/typealiases.html":{}}}],["stuff",{"_index":982,"title":{},"body":{"index.html":{}}}],["stylizenocolor",{"_index":782,"title":{},"body":{"coverage.html":{}}}],["stylizewithcolor",{"_index":783,"title":{},"body":{"coverage.html":{}}}],["subject",{"_index":104,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["sublicense",{"_index":1058,"title":{},"body":{"license.html":{}}}],["subsequent",{"_index":1030,"title":{},"body":{"index.html":{}}}],["substantial",{"_index":1070,"title":{},"body":{"license.html":{}}}],["substractionlabel",{"_index":213,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["substractionlabel(error",{"_index":235,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["substration",{"_index":288,"title":{},"body":{"classes/ErrorRenderer.html":{},"classes/Output.html":{}}}],["substration(text",{"_index":344,"title":{},"body":{"classes/Output.html":{}}}],["subtraction",{"_index":296,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["success",{"_index":808,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["suite",{"_index":942,"title":{},"body":{"index.html":{}}}],["super('\"times",{"_index":301,"title":{},"body":{"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{}}}],["support",{"_index":510,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["supported",{"_index":558,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["supporting",{"_index":852,"title":{},"body":{"index.html":{}}}],["switch",{"_index":252,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["symbol",{"_index":190,"title":{},"body":{"interfaces/Emitter.html":{},"classes/Stubborn.html":{}}}],["symbol.for('cleared",{"_index":1127,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.for('not_implemented",{"_index":1125,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.for('replied",{"_index":1129,"title":{},"body":{"miscellaneous/variables.html":{}}}],["symbol.for('wildcard",{"_index":1130,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tab",{"_index":317,"title":{},"body":{"classes/Output.html":{}}}],["tab(text",{"_index":346,"title":{},"body":{"classes/Output.html":{}}}],["table",{"_index":791,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":790,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":867,"title":{},"body":{"index.html":{}}}],["tar",{"_index":585,"title":{},"body":{"changelog.html":{}}}],["tell",{"_index":1013,"title":{},"body":{"index.html":{}}}],["template",{"_index":72,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["templatearray",{"_index":73,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["templatefunction",{"_index":68,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["templateobject",{"_index":70,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["term",{"_index":836,"title":{},"body":{"index.html":{}}}],["test",{"_index":935,"title":{},"body":{"index.html":{},"properties.html":{}}}],["testing",{"_index":919,"title":{},"body":{"index.html":{},"properties.html":{}}}],["tests",{"_index":1102,"title":{},"body":{"properties.html":{}}}],["text",{"_index":326,"title":{},"body":{"classes/Output.html":{}}}],["that's",{"_index":861,"title":{},"body":{"index.html":{}}}],["therefore",{"_index":986,"title":{},"body":{"index.html":{}}}],["this.add(color.bold.underline(uccat",{"_index":362,"title":{},"body":{"classes/Output.html":{}}}],["this.add(line",{"_index":357,"title":{},"body":{"classes/Output.html":{}}}],["this.additionlabel(error",{"_index":292,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.emitter",{"_index":463,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.emit(events.cleared",{"_index":467,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.getmaxlisteners",{"_index":488,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.off(event",{"_index":486,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.on(event",{"_index":484,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.once(event",{"_index":485,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.emitter.setmaxlisteners(nb",{"_index":487,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.erroreq(error",{"_index":281,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.errorext(error",{"_index":284,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.errormiss(error",{"_index":283,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.getdiffsubjectlabel(subject",{"_index":241,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.output.add(this.output.addition(this.output.tab(addition",{"_index":295,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.output.add(this.output.substration(this.output.tab(substration",{"_index":294,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.output.add(this.output.substration(this.output.tab(subtraction",{"_index":297,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.output.category(cat",{"_index":246,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.output.newline",{"_index":245,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.output.pulltab",{"_index":279,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.output.push(lines",{"_index":358,"title":{},"body":{"classes/Output.html":{}}}],["this.output.pushtab",{"_index":262,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.port",{"_index":459,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.rendererror(e",{"_index":278,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.rendererror(error",{"_index":251,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.rendermultipleserrors(caterrors",{"_index":249,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.renderoneerror(caterrors",{"_index":248,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["this.request",{"_index":167,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.body",{"_index":140,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.hash",{"_index":141,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.headers",{"_index":138,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.method",{"_index":136,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.path",{"_index":137,"title":{},"body":{"classes/Debugger.html":{}}}],["this.request.query",{"_index":139,"title":{},"body":{"classes/Debugger.html":{}}}],["this.router",{"_index":461,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.addroute(route",{"_index":477,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.clear",{"_index":466,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.delete",{"_index":469,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.get",{"_index":470,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.head",{"_index":475,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.options",{"_index":476,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.patch",{"_index":471,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.post",{"_index":473,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.createroute(methods.put",{"_index":474,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.handle(this.server",{"_index":481,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.router.removeroute(route",{"_index":478,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server",{"_index":460,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.close",{"_index":483,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.server.listen(this.port",{"_index":480,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.stubbornoptions",{"_index":456,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.stubbornoptions.host",{"_index":462,"title":{},"body":{"classes/Stubborn.html":{}}}],["this.substractionlabel(error",{"_index":289,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["though",{"_index":860,"title":{},"body":{"index.html":{}}}],["throw",{"_index":260,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["throwhttperrors",{"_index":962,"title":{},"body":{"index.html":{}}}],["throwing",{"_index":635,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["time",{"_index":851,"title":{},"body":{"index.html":{}}}],["times",{"_index":533,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["title",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["todo",{"_index":30,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["tool",{"_index":920,"title":{},"body":{"index.html":{}}}],["toreplywith",{"_index":1027,"title":{},"body":{"index.html":{}}}],["tort",{"_index":1092,"title":{},"body":{"license.html":{}}}],["trim",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":373,"title":{},"body":{"classes/Stubborn.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":1112,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":46,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["types",{"_index":55,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"changelog.html":{}}}],["types.indexof(a.type",{"_index":273,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["types.indexof(b.type",{"_index":275,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["types.length",{"_index":272,"title":{},"body":{"classes/ErrorRenderer.html":{}}}],["types/emitter",{"_index":448,"title":{},"body":{"classes/Stubborn.html":{}}}],["typescript",{"_index":366,"title":{},"body":{"classes/Stubborn.html":{}}}],["uccat",{"_index":359,"title":{},"body":{"classes/Output.html":{}}}],["undefined",{"_index":48,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"miscellaneous/typealiases.html":{}}}],["unlikely",{"_index":863,"title":{},"body":{"index.html":{}}}],["unload",{"_index":923,"title":{},"body":{"index.html":{}}}],["up",{"_index":937,"title":{},"body":{"index.html":{}}}],["update",{"_index":547,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["upgrade",{"_index":567,"title":{},"body":{"changelog.html":{}}}],["url",{"_index":598,"title":{},"body":{"changelog.html":{}}}],["urlsearchparams",{"_index":91,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{}}}],["usage",{"_index":829,"title":{},"body":{"index.html":{}}}],["use",{"_index":31,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{},"license.html":{}}}],["used",{"_index":1015,"title":{},"body":{"index.html":{}}}],["user",{"_index":667,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["using",{"_index":565,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["utils",{"_index":450,"title":{},"body":{"classes/Stubborn.html":{}}}],["validate",{"_index":668,"title":{},"body":{"changelog.html":{}}}],["validatefn",{"_index":1119,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["validatequery",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["validates",{"_index":932,"title":{},"body":{"index.html":{}}}],["value",{"_index":42,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":50,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"index.html":{}}}],["variable",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1122,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":559,"title":{},"body":{"changelog.html":{},"index.html":{},"properties.html":{}}}],["versions",{"_index":839,"title":{},"body":{"index.html":{}}}],["very",{"_index":929,"title":{},"body":{"index.html":{}}}],["void",{"_index":95,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"classes/Debugger.html":{},"interfaces/DiffError.html":{},"interfaces/Emitter.html":{},"classes/ErrorRenderer.html":{},"interfaces/JsonArray.html":{},"classes/Output.html":{},"classes/Stubborn.html":{}}}],["warn",{"_index":318,"title":{},"body":{"classes/Output.html":{},"changelog.html":{}}}],["warn(message",{"_index":348,"title":{},"body":{"classes/Output.html":{}}}],["warning",{"_index":544,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["warnlogdiffonmatched",{"_index":115,"title":{},"body":{"classes/Debugger.html":{}}}],["warnlogdiffonmatched(route",{"_index":128,"title":{},"body":{"classes/Debugger.html":{}}}],["warranties",{"_index":1077,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1073,"title":{},"body":{"license.html":{}}}],["we'll",{"_index":864,"title":{},"body":{"index.html":{}}}],["web",{"_index":815,"title":{},"body":{"index.html":{},"properties.html":{}}}],["webserver",{"_index":924,"title":{},"body":{"index.html":{}}}],["whether",{"_index":1089,"title":{},"body":{"license.html":{}}}],["wildcard",{"_index":17,"title":{},"body":{"interfaces/BodyDefinitionArray.html":{},"interfaces/DiffError.html":{},"interfaces/JsonArray.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["within",{"_index":904,"title":{},"body":{"index.html":{}}}],["without",{"_index":149,"title":{},"body":{"classes/Debugger.html":{},"license.html":{}}}],["won't",{"_index":847,"title":{},"body":{"index.html":{}}}],["work",{"_index":848,"title":{},"body":{"index.html":{}}}],["working",{"_index":941,"title":{},"body":{"index.html":{}}}],["ws",{"_index":367,"title":{},"body":{"classes/Stubborn.html":{},"index.html":{}}}],["wsor",{"_index":915,"title":{},"body":{"index.html":{}}}],["wsusage",{"_index":918,"title":{},"body":{"index.html":{}}}],["x",{"_index":532,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["y18n",{"_index":618,"title":{},"body":{"changelog.html":{}}}],["yarn",{"_index":916,"title":{},"body":{"index.html":{}}}],["year",{"_index":1038,"title":{},"body":{"license.html":{}}}],["yellow",{"_index":319,"title":{},"body":{"classes/Output.html":{}}}],["yellow(text",{"_index":351,"title":{},"body":{"classes/Output.html":{}}}],["z",{"_index":975,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/BodyDefinitionArray.html":{"url":"interfaces/BodyDefinitionArray.html","title":"interface - BodyDefinitionArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BodyDefinitionArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_SUBJECTS, DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template | Buffer;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type RequestInfoWithSearchParam = RequestInfo & {\n  searchParams: URLSearchParams;\n};\n\nexport type Request = IncomingMessage & RequestInfoWithSearchParam;\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue | Buffer;\n\nexport interface DiffError {\n  subject: DIFF_SUBJECTS;\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\nexport { LineInfo } from './LineInfo';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Debugger.html":{"url":"classes/Debugger.html","title":"class - Debugger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Debugger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/Debugger.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                getInfo\n                            \n                            \n                                    Public\n                                logDiff\n                            \n                            \n                                    Public\n                                warnLogDiffOnMatched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/debug/Debugger.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                        Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getInfo()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { method: any; path: any; headers: any; query: any; body: any; hash: any; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        logDiff\n                        \n                    \n                \n            \n            \n                \n                    \n                    logDiff(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        warnLogDiffOnMatched\n                        \n                    \n                \n            \n            \n                \n                    \n                    warnLogDiffOnMatched(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Debugger.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { DiffError, Request } from '../@types';\n\nimport { Route } from '../Route';\nimport { Output } from './Output';\nimport { requestDiff } from '../diff/requestDiff';\nimport { DIFF_SUBJECTS } from '../constants';\nimport { ErrorRenderer } from './ErrorRenderer';\n\nexport class Debugger {\n  constructor(private request: Request) {}\n\n  public getInfo() {\n    return {\n      method: this.request.method,\n      path: this.request.path,\n      headers: this.request.headers,\n      query: this.request.query,\n      body: this.request.body,\n      hash: this.request.hash,\n    };\n  }\n\n  public warnLogDiffOnMatched(route: Route) {\n    const out = new Output();\n\n    out.add(`## Request: ${this.request.method} ${this.request.path}`);\n\n    out.warn('Detected logDiffOn501 on a matched route without error ');\n    out.add(out.yellow('Did you forget to remove the call to logDiffOn501?'));\n    const position = route.getLogDiffPosition();\n    if (position !== null) {\n      out.pushTab();\n      out.add(out.tab(out.yellow(`at ${out.formatLineInfo(position)}`)));\n      out.pullTab();\n    }\n    out.newLine(2);\n\n    process.stdout.write(out.render());\n  }\n\n  public logDiff(route: Route) {\n    const out = new Output();\n    const render = new ErrorRenderer(out);\n\n    const diff = requestDiff(route, this.request);\n\n    const errors = diff.reduce((acc, error) => {\n      if (!acc[error.subject]) {\n        acc[error.subject] = [];\n      }\n\n      acc[error.subject].push(error);\n\n      return acc;\n    }, {} as Record);\n\n    out.add(\n      `## Route: ${out.blue(out.bold(this.request.method))} ${out.cyan(\n        this.request.path,\n      )}`,\n    );\n    out.pushTab();\n    out.add(out.tab(`at ${out.formatLineInfo(route.getInitializerPath())}`));\n    out.pullTab();\n\n    render.renderErrors(DIFF_SUBJECTS.METHOD, errors);\n    render.renderErrors(DIFF_SUBJECTS.PATH, errors);\n    render.renderErrors(DIFF_SUBJECTS.HEADERS, errors);\n    render.renderErrors(DIFF_SUBJECTS.QUERY, errors);\n    render.renderErrors(DIFF_SUBJECTS.BODY, errors);\n\n    process.stdout.write(out.render());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DiffError.html":{"url":"interfaces/DiffError.html","title":"interface - DiffError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DiffError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            definition\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                                \n                                        \n                                            type\n                                        \n                                \n                                \n                                        \n                                            value\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        definition\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        definition:     string | null\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | null\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         DIFF_SUBJECTS\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DIFF_SUBJECTS\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         DIFF_TYPES\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         DIFF_TYPES\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        value\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        value:         JsonValue\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         JsonValue\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_SUBJECTS, DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template | Buffer;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type RequestInfoWithSearchParam = RequestInfo & {\n  searchParams: URLSearchParams;\n};\n\nexport type Request = IncomingMessage & RequestInfoWithSearchParam;\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue | Buffer;\n\nexport interface DiffError {\n  subject: DIFF_SUBJECTS;\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\nexport { LineInfo } from './LineInfo';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Emitter.html":{"url":"interfaces/Emitter.html","title":"interface - Emitter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Emitter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/Emitter.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMaxListeners\n                                    \n                                \n                                \n                                    \n                                        off\n                                    \n                                \n                                \n                                    \n                                        on\n                                    \n                                \n                                \n                                    \n                                        once\n                                    \n                                \n                                \n                                    \n                                        setMaxListeners\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMaxListeners\n                        \n                    \n                \n            \n            \n                \ngetMaxListeners()\n                \n            \n\n\n            \n                \n                    Defined in src/@types/Emitter.ts:3\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        off\n                        \n                    \n                \n            \n            \n                \noff(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/@types/Emitter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        on\n                        \n                    \n                \n            \n            \n                \non(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/@types/Emitter.ts:4\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        once\n                        \n                    \n                \n            \n            \n                \nonce(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/@types/Emitter.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMaxListeners\n                        \n                    \n                \n            \n            \n                \nsetMaxListeners(nb: number)\n                \n            \n\n\n            \n                \n                    Defined in src/@types/Emitter.ts:2\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nb\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        export interface Emitter {\n  setMaxListeners(nb: number): this;\n  getMaxListeners(): number;\n  on(event: symbol, listener: (...args: any[]) => void): this;\n  once(event: symbol, listener: (...args: any[]) => void): this;\n  off(event: symbol, listener: (...args: any[]) => void): this;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ErrorRenderer.html":{"url":"classes/ErrorRenderer.html","title":"class - ErrorRenderer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ErrorRenderer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/ErrorRenderer.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                additionLabel\n                            \n                            \n                                    Public\n                                errorEq\n                            \n                            \n                                    Public\n                                errorExt\n                            \n                            \n                                    Public\n                                errorMiss\n                            \n                            \n                                    Private\n                                getDiffSubjectLabel\n                            \n                            \n                                    Public\n                                renderError\n                            \n                            \n                                    Public\n                                renderErrors\n                            \n                            \n                                    Public\n                                renderMultiplesErrors\n                            \n                            \n                                    Public\n                                renderOneError\n                            \n                            \n                                    Private\n                                substractionLabel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(output: Output)\n                    \n                \n                        \n                            \n                                Defined in src/debug/ErrorRenderer.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        output\n                                                  \n                                                        \n                                                                        Output\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        additionLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    additionLabel(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        errorEq\n                        \n                    \n                \n            \n            \n                \n                    \n                    errorEq(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        errorExt\n                        \n                    \n                \n            \n            \n                \n                    \n                    errorExt(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:133\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        errorMiss\n                        \n                    \n                \n            \n            \n                \n                    \n                    errorMiss(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        getDiffSubjectLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    getDiffSubjectLabel(subject: DIFF_SUBJECTS)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subject\n                                    \n                                                DIFF_SUBJECTS\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     \"Method\" | \"Path\" | \"Headers\" | \"Query\" | \"Body\"\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        renderError\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderError(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        renderErrors\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderErrors(subject: DIFF_SUBJECTS, errorsBySubjects: Record)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subject\n                                    \n                                                DIFF_SUBJECTS\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    errorsBySubjects\n                                    \n                                                Record\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        renderMultiplesErrors\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderMultiplesErrors(errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        renderOneError\n                        \n                    \n                \n            \n            \n                \n                    \n                    renderOneError(errors: DiffError[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                                DiffError[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        substractionLabel\n                        \n                    \n                \n            \n            \n                \n                    \n                    substractionLabel(error: DiffError)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/ErrorRenderer.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    error\n                                    \n                                                DiffError\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Output } from './Output';\nimport { DiffError } from '../@types';\nimport { DIFF_SUBJECTS, DIFF_TYPES } from '../constants';\n\nexport class ErrorRenderer {\n  constructor(private output: Output) {}\n\n  public renderErrors(\n    subject: DIFF_SUBJECTS,\n    errorsBySubjects: Record,\n  ) {\n    const errors = errorsBySubjects[subject] ?? [];\n\n    if (errors.length === 0) {\n      return;\n    }\n\n    const cat = this.getDiffSubjectLabel(subject);\n\n    const catErrors = errors.filter(e => e.subject === subject);\n\n    this.output.newLine();\n\n    this.output.category(cat);\n    errors.length === 1\n      ? this.renderOneError(catErrors)\n      : this.renderMultiplesErrors(catErrors);\n  }\n\n  public renderOneError(errors: DiffError[]) {\n    const error = errors.pop() as DiffError;\n    this.renderError(error);\n  }\n\n  private getDiffSubjectLabel(subject: DIFF_SUBJECTS) {\n    switch (subject) {\n      case DIFF_SUBJECTS.METHOD:\n        return 'Method';\n      case DIFF_SUBJECTS.PATH:\n        return 'Path';\n      case DIFF_SUBJECTS.HEADERS:\n        return 'Headers';\n      case DIFF_SUBJECTS.QUERY:\n        return 'Query';\n      case DIFF_SUBJECTS.BODY:\n        return 'Body';\n      default:\n        throw new Error(`Unknown subject: ${subject}`);\n    }\n  }\n\n  public renderMultiplesErrors(errors: DiffError[]) {\n    this.output.pushTab();\n\n    errors.sort((a: DiffError, b: DiffError) => {\n      const types = [\n        DIFF_TYPES.MISSING,\n        DIFF_TYPES.EXTRA,\n        DIFF_TYPES.FAIL_EQUALITY,\n        DIFF_TYPES.FAIL_MATCHING,\n        DIFF_TYPES.FAIL_FUNCTION,\n        DIFF_TYPES.INVALID_VALUE_TYPE,\n      ];\n      const aWeight = types.length - types.indexOf(a.type);\n      const bWeight = types.length - types.indexOf(b.type);\n\n      if (aWeight === bWeight) {\n        return 0;\n      }\n\n      return aWeight > bWeight ? -1 : 1;\n    });\n\n    errors.forEach((e, i) => {\n      if (i !== 0 && ![DIFF_TYPES.MISSING, DIFF_TYPES.EXTRA].includes(e.type)) {\n        this.output.newLine();\n      }\n\n      this.renderError(e);\n    });\n    this.output.pullTab();\n  }\n\n  public renderError(error: DiffError) {\n    switch (error.type) {\n      case DIFF_TYPES.FAIL_EQUALITY:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.FAIL_MATCHING:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.FAIL_FUNCTION:\n        this.errorEq(error);\n        break;\n      case DIFF_TYPES.MISSING:\n        this.errorMiss(error);\n        break;\n      case DIFF_TYPES.EXTRA:\n        this.errorExt(error);\n        break;\n      case DIFF_TYPES.INVALID_VALUE_TYPE:\n        this.errorEq(error);\n        break;\n    }\n  }\n\n  private substractionLabel(error: DiffError) {\n    return error.path === '' ? 'Received' : error.path;\n  }\n\n  private additionLabel(error: DiffError) {\n    return error.path === '' ? 'Expected' : error.path;\n  }\n\n  public errorEq(error: DiffError) {\n    const substration = `${this.substractionLabel(error)}: ${String(\n      error.value,\n    )}`;\n    const addition = `${this.additionLabel(error)}: ${String(\n      error.definition,\n    )}`;\n    this.output.add(this.output.substration(this.output.tab(substration)));\n    this.output.add(this.output.addition(this.output.tab(addition)));\n  }\n\n  public errorMiss(error: DiffError) {\n    const addition = `${this.additionLabel(error)}: ${String(\n      error.definition,\n    )}`;\n    this.output.add(this.output.addition(this.output.tab(addition)));\n  }\n\n  public errorExt(error: DiffError) {\n    const subtraction = `${this.substractionLabel(error)}: ${String(\n      error.value,\n    )}`;\n    this.output.add(this.output.substration(this.output.tab(subtraction)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InvalidRemoveAfterMatchingTimesParameterError.html":{"url":"classes/InvalidRemoveAfterMatchingTimesParameterError.html","title":"class - InvalidRemoveAfterMatchingTimesParameterError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InvalidRemoveAfterMatchingTimesParameterError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/InvalidRemoveAfterMatchingTimesParameterError.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/errors/InvalidRemoveAfterMatchingTimesParameterError.ts:1\n                            \n                        \n\n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class InvalidRemoveAfterMatchingTimesParameterError extends Error {\n  constructor() {\n    super('\"times\" parameter must be a positive integer greater that 0');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JsonArray.html":{"url":"interfaces/JsonArray.html","title":"interface - JsonArray","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JsonArray\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/@types/index.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Array\n            \n\n\n\n\n    \n\n\n    \n        import { IncomingMessage, ServerResponse } from 'http';\nimport { DIFF_SUBJECTS, DIFF_TYPES, METHODS, WILDCARD } from '../constants';\n\nexport type JsonPrimitive = string | number | boolean | null;\nexport type JsonObject = { [member: string]: JsonValue };\nexport interface JsonArray extends Array {}\nexport type JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n// TODO use generic type in match function so each element (header, body, query, etc...) can specify the type of the value\nexport type MatchFunction = (value: JsonValue) => boolean;\nexport type DefinitionMatcher = RegExp | MatchFunction | typeof WILDCARD;\nexport type DefinitionValue =\n  | DefinitionMatcher\n  | JsonValue\n  | undefined\n  | METHODS; // Any possible values for definition\n\n// Request part definitions types\nexport type MethodDefinition = METHODS;\nexport type PathDefinition = DefinitionMatcher | string;\nexport type HeaderDefinition = DefinitionMatcher | string | number;\nexport type HeadersDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type BodyDefinitionPrimitive = DefinitionMatcher | JsonValue;\nexport type BodyDefinitionObject = {\n  [member: string]: BodyDefinitionValue;\n};\nexport interface BodyDefinitionArray extends Array {}\nexport type BodyDefinitionValue =\n  | BodyDefinitionPrimitive\n  | BodyDefinitionObject\n  | BodyDefinitionArray;\nexport type BodyDefinition = undefined | BodyDefinitionValue;\n\nexport type QueryParameterDefinitionPrimitives =\n  | DefinitionMatcher\n  | string\n  | number;\nexport type QueryParameterDefinition =\n  | QueryParameterDefinitionPrimitives\n  | QueryParameterDefinitionPrimitives[];\nexport type QueryDefinition =\n  | Record\n  | typeof WILDCARD;\n\nexport type TemplateFunction = (request: Request, scope: any) => JsonValue;\nexport type TemplateObject = { [key: string]: Template };\nexport type TemplateArray = { [index: number]: Template };\n\nexport type Template =\n  | JsonValue\n  | TemplateFunction\n  | TemplateObject\n  | TemplateArray;\n\nexport type ResponseDefinition = {\n  statusCode: number;\n  headers: Record;\n  body: Template | Buffer;\n};\n\nexport type RequestHeaders = Record;\nexport type RequestQuery = Record;\nexport type RequestBody = JsonValue | undefined;\nexport type RequestPath = string;\nexport type RequestHash = string;\nexport type RequestMethod = string;\n\nexport type RequestInfo = {\n  headers: RequestHeaders;\n  body: RequestBody;\n  path: RequestPath;\n  query: RequestQuery;\n  hash: RequestHash;\n  method: RequestMethod;\n};\n\nexport type RequestInfoWithSearchParam = RequestInfo & {\n  searchParams: URLSearchParams;\n};\n\nexport type Request = IncomingMessage & RequestInfoWithSearchParam;\n\nexport type Response = ServerResponse;\nexport type NextFunction = (err?: any) => void;\n\nexport type Middleware = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n) => any;\n\nexport type RequestMatcher = (req: Request) => boolean;\n\nexport type ResponseHeaders = {\n  [key: string]: string;\n};\n\nexport type ResponseBody = JsonValue | Buffer;\n\nexport interface DiffError {\n  subject: DIFF_SUBJECTS;\n  type: DIFF_TYPES;\n  definition: string | null;\n  value: JsonValue;\n  path: string;\n}\nexport { LineInfo } from './LineInfo';\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Output.html":{"url":"classes/Output.html","title":"class - Output","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Output\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/debug/Output.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                currentTab\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                addition\n                            \n                            \n                                    Public\n                                blue\n                            \n                            \n                                    Public\n                                bold\n                            \n                            \n                                    Public\n                                category\n                            \n                            \n                                    Public\n                                cyan\n                            \n                            \n                                    Public\n                                formatLineInfo\n                            \n                            \n                                    Public\n                                newLine\n                            \n                            \n                                    Public\n                                pullTab\n                            \n                            \n                                    Public\n                                pushTab\n                            \n                            \n                                    Public\n                                render\n                            \n                            \n                                    Public\n                                substration\n                            \n                            \n                                    Public\n                                tab\n                            \n                            \n                                    Public\n                                warn\n                            \n                            \n                                    Public\n                                yellow\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(output: string[])\n                    \n                \n                        \n                            \n                                Defined in src/debug/Output.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        output\n                                                  \n                                                        \n                                                                    string[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        currentTab\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/debug/Output.ts:5\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        add\n                        \n                    \n                \n            \n            \n                \n                    \n                    add(lines: string | string[])\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    lines\n                                    \n                                            string | string[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addition\n                        \n                    \n                \n            \n            \n                \n                    \n                    addition(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        blue\n                        \n                    \n                \n            \n            \n                \n                    \n                    blue(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        bold\n                        \n                    \n                \n            \n            \n                \n                    \n                    bold(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        category\n                        \n                    \n                \n            \n            \n                \n                    \n                    category(cat: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    cat\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        cyan\n                        \n                    \n                \n            \n            \n                \n                    \n                    cyan(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        formatLineInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    formatLineInfo(line: LineInfo | null)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    line\n                                    \n                                                LineInfo | null\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        newLine\n                        \n                    \n                \n            \n            \n                \n                    \n                    newLine(count: number)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    count\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        1\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        pullTab\n                        \n                    \n                \n            \n            \n                \n                    \n                    pullTab()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        pushTab\n                        \n                    \n                \n            \n            \n                \n                    \n                    pushTab()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        render\n                        \n                    \n                \n            \n            \n                \n                    \n                    render()\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        substration\n                        \n                    \n                \n            \n            \n                \n                    \n                    substration(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        tab\n                        \n                    \n                \n            \n            \n                \n                    \n                    tab(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        warn\n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     this\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        yellow\n                        \n                    \n                \n            \n            \n                \n                    \n                    yellow(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/debug/Output.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import Color from 'chalk';\nimport { LineInfo } from '../@types';\n\nexport class Output {\n  private currentTab = 0;\n  constructor(private output: string[] = []) {}\n\n  public add(lines: string | string[]) {\n    if (Array.isArray(lines)) {\n      lines.forEach(line => this.add(line));\n      return this;\n    }\n\n    this.output.push(lines);\n\n    return this;\n  }\n\n  public category(cat: string) {\n    const ucCat = cat[0].toUpperCase() + cat.slice(1);\n\n    return this.add(Color.bold.underline(ucCat));\n  }\n\n  public newLine(count = 1) {\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Stubborn.html":{"url":"classes/Stubborn.html","title":"class - Stubborn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Stubborn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/Stubborn.ts\n        \n\n\n            \n                Description\n            \n            \n                ```typescript\nimport { Stubborn } from 'stubborn-ws';\nconst sb = new Stubborn();sb.get('/').setResponseBody({ some: 'body' });\nconst res = await got(${sb.getOrigin()}, { json: true });\nexpect(res.body).toEqual({ some: 'body' });\n\n            \n\n\n            \n                Implements\n            \n            \n                            Emitter\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                emitter\n                            \n                            \n                                    Private\n                                port\n                            \n                            \n                                    Private\n                                router\n                            \n                            \n                                    Private\n                                server\n                            \n                            \n                                    Private\n                                stubbornOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                addRoute\n                            \n                            \n                                    Public\n                                clear\n                            \n                            \n                                    Public\n                                delete\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                getMaxListeners\n                            \n                            \n                                    Public\n                                getOrigin\n                            \n                            \n                                    Public\n                                getPort\n                            \n                            \n                                    Public\n                                head\n                            \n                            \n                                    Public\n                                off\n                            \n                            \n                                    Public\n                                on\n                            \n                            \n                                    Public\n                                once\n                            \n                            \n                                    Public\n                                options\n                            \n                            \n                                    Public\n                                patch\n                            \n                            \n                                    Public\n                                post\n                            \n                            \n                                    Public\n                                put\n                            \n                            \n                                    Public\n                                removeRoute\n                            \n                            \n                                    Public\n                                setMaxListeners\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: StubbornOptions)\n                    \n                \n                        \n                            \n                                Defined in src/Stubborn.ts:34\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        StubbornOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        emitter\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EventEmitter\n\n                    \n                \n                \n                    \n                        Default value : new EventEmitter()\n                    \n                \n                    \n                        \n                                Defined in src/Stubborn.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                    \n                        \n                                Defined in src/Stubborn.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        router\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Router\n\n                    \n                \n                    \n                        \n                                Defined in src/Stubborn.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                    \n                        \n                                Defined in src/Stubborn.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stubbornOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         StubbornOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/Stubborn.ts:33\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        addRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    addRoute(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:153\n                \n            \n\n\n            \n                \n                    Register a new route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route a Route object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        clear\n                        \n                    \n                \n            \n            \n                \n                    \n                    clear()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:72\n                \n            \n\n\n            \n                \n                    Remove all routes from the server\n\n\n                    \n                        Returns :     this\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:85\n                \n            \n\n\n            \n                \n                    Create and Register a new DELETE route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:94\n                \n            \n\n\n            \n                \n                    Create and Register a new GET route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getMaxListeners\n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxListeners()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getOrigin\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOrigin()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:65\n                \n            \n\n\n            \n                \n                    Returns the server origin (http://:)\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        the server origin\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getPort\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPort()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:57\n                \n            \n\n\n            \n                \n                    Returns the server port.\nIf the server is initialized with options.port set to 0 this method\nwill return the randomly affected port only after the server is started\n\n\n                    \n                    \n                    \n                        Returns :     number | null\n\n                    \n                    \n                        Listening port or null if the server is not started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        head\n                        \n                    \n                \n            \n            \n                \n                    \n                    head(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:134\n                \n            \n\n\n            \n                \n                    Create and Register a new HEAD route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        off\n                        \n                    \n                \n            \n            \n                \n                    \n                    off(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:201\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        on\n                        \n                    \n                \n            \n            \n                \n                    \n                    on(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:191\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        once\n                        \n                    \n                \n            \n            \n                \n                    \n                    once(event: symbol, listener: (args: any[]) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:196\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            symbol\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    listener\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        options\n                        \n                    \n                \n            \n            \n                \n                    \n                    options(path: PathDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:144\n                \n            \n\n\n            \n                \n                    Create and Register a new HEAD route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        patch\n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:104\n                \n            \n\n\n            \n                \n                    Create and Register a new PACH route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        post\n                        \n                    \n                \n            \n            \n                \n                    \n                    post(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:114\n                \n            \n\n\n            \n                \n                    Create and Register a new POST route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        put\n                        \n                    \n                \n            \n            \n                \n                    \n                    put(path: PathDefinition, body: BodyDefinition)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:124\n                \n            \n\n\n            \n                \n                    Create and Register a new PUT route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                    Description\n                                \n                            \n                            \n                                \n                                    path\n                                    \n                                                PathDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                    \n                                        Path matching definition\n\n                                    \n                                \n                                \n                                    body\n                                    \n                                                BodyDefinition\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        ''\n                                    \n\n                                    \n                                        Request body definition\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        removeRoute\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRoute(route: Route)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:162\n                \n            \n\n\n            \n                \n                    Remove an existing route\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    route\n                                    \n                                                Route\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Route a Route object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        setMaxListeners\n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxListeners(nb: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:206\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    nb\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        start\n                        \n                    \n                \n            \n            \n                \n                    \n                    start(port: number)\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:170\n                \n            \n\n\n            \n                \n                    Start the Stubborn server\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    port\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        0\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is started\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        stop\n                        \n                    \n                \n            \n            \n                \n                    \n                    stop()\n                \n            \n\n\n            \n                \n                    Defined in src/Stubborn.ts:185\n                \n            \n\n\n            \n                \n                    Stop the Stubborn server\n\n\n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        Promise object resolved when server is stopped\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from 'events';\nimport { createServer, Server } from 'http';\n\nimport { Emitter } from './@types/Emitter';\nimport { BodyDefinition, HeadersDefinition, PathDefinition } from './@types';\nimport { EVENTS, METHODS } from './constants';\nimport { Route } from './Route';\nimport { Router } from './Router';\nimport { getServerPort } from './utils';\n\nexport type StubbornOptions = {\n  host?: string;\n  defaultHeaders?: HeadersDefinition;\n};\n\n/**\n * @example\n * ```typescript\n * import { Stubborn } from 'stubborn-ws';\n * const sb = new Stubborn();\n *\n * sb.get('/').setResponseBody({ some: 'body' });\n *\n * const res = await got(`${sb.getOrigin()}`, { json: true });\n *\n * expect(res.body).toEqual({ some: 'body' });\n * ```\n */\nexport class Stubborn implements Emitter {\n  private server: Server;\n  private port: number | null;\n  private router: Router;\n  private stubbornOptions: StubbornOptions;\n  private emitter: EventEmitter = new EventEmitter();\n\n  constructor(options: StubbornOptions = {}) {\n    this.stubbornOptions = Object.assign(\n      {\n        host: 'localhost',\n        defaultHeaders: {},\n      },\n      options,\n    );\n\n    this.port = null;\n    this.server = createServer();\n    this.router = new Router({ host: this.stubbornOptions.host }, this.emitter);\n  }\n\n  /**\n   * Returns the server port.\n   *\n   * If the server is initialized with options.port set to 0 this method\n   * will return the randomly affected port only after the server is started\n   * @returns Listening port or null if the server is not started\n   */\n  public getPort(): number | null {\n    return getServerPort(this.server);\n  }\n\n  /**\n   * Returns the server origin (http://:)\n   * @returns the server origin\n   */\n  public getOrigin(): string {\n    return `http://${this.stubbornOptions.host}:${this.getPort()}`;\n  }\n\n  /**\n   * Remove all routes from the server\n   */\n  public clear() {\n    this.router.clear();\n\n    this.emitter.emit(EVENTS.CLEARED);\n\n    return this;\n  }\n\n  /**\n   * Create and Register a new DELETE route\n   *\n   * @param path Path matching definition\n   */\n  public delete(path: PathDefinition) {\n    return this.router.createRoute(METHODS.DELETE, path);\n  }\n\n  /**\n   * Create and Register a new GET route\n   *\n   * @param path Path matching definition\n   */\n  public get(path: PathDefinition) {\n    return this.router.createRoute(METHODS.GET, path);\n  }\n\n  /**\n   * Create and Register a new PACH route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public patch(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.PATCH, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new POST route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public post(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.POST, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new PUT route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public put(path: PathDefinition, body: BodyDefinition = '') {\n    return this.router.createRoute(METHODS.PUT, path).setBody(body);\n  }\n\n  /**\n   * Create and Register a new HEAD route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public head(path: PathDefinition) {\n    return this.router.createRoute(METHODS.HEAD, path);\n  }\n\n  /**\n   * Create and Register a new HEAD route\n   *\n   * @param path Path matching definition\n   * @param body Request body definition\n   */\n  public options(path: PathDefinition) {\n    return this.router.createRoute(METHODS.OPTIONS, path);\n  }\n\n  /**\n   * Register a new route\n   *\n   * @param route Route a Route object\n   */\n  public addRoute(route: Route) {\n    return this.router.addRoute(route);\n  }\n\n  /**\n   * Remove an existing route\n   *\n   * @param route Route a Route object\n   */\n  public removeRoute(route: Route) {\n    return this.router.removeRoute(route);\n  }\n\n  /**\n   * Start the Stubborn server\n   * @returns Promise object resolved when server is started\n   */\n  public start(port: number = 0) {\n    this.port = port;\n\n    return new Promise(resolve => {\n      this.server.listen(this.port);\n      this.router.handle(this.server);\n      resolve(null);\n    });\n  }\n\n  /**\n   * Stop the Stubborn server\n   *\n   * @returns Promise object resolved when server is stopped\n   */\n  public stop() {\n    return new Promise(resolve => {\n      this.server.close(() => resolve(null));\n    });\n  }\n\n  public on(event: symbol, listener: (...args: any[]) => void): this {\n    this.emitter.on(event, listener);\n    return this;\n  }\n\n  public once(event: symbol, listener: (...args: any[]) => void): this {\n    this.emitter.once(event, listener);\n    return this;\n  }\n\n  public off(event: symbol, listener: (...args: any[]) => void): this {\n    this.emitter.off(event, listener);\n    return this;\n  }\n\n  public setMaxListeners(nb: number): this {\n    this.emitter.setMaxListeners(nb);\n\n    return this;\n  }\n\n  public getMaxListeners(): number {\n    return this.emitter.getMaxListeners();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\n7.1.1 (2024-10-23)\nBug Fixes\n\noutput of log diff show route and path (1606f9c)\n\n7.1.0 (2024-10-23)\nFeatures\n\noutput the line of the route on log diff (7cd4a01)\nretrun diffs for matched endpoints routes in 501 response (79594e9)\n\n7.0.0 (2024-10-22)\nFeatures\n\nadd support for HEAD methods (e8f3e78)\nadd support for options (d452bf9)\nmove to node 20 (346ce4c)\npass subject in DiffError (2a096e1)\nshow file line when logDiffOn501 called on a mathcing route (3814881)\nshow warn when log diff called and route matched (8c9ed84)\n\nBREAKING CHANGES\n\nremove support for node 18 & 19\n\n6.2.0 (2023-03-16)\nFeatures\n\nautomatic remove route after matching X times (60b6b39)\n\n6.1.0 (2023-03-08)\nFeatures\n\nsupport multipart/form-data content type (cea8793)\n\n6.0.0 (2023-03-06)\nBug Fixes\n\nremove max event listener warning (faa6a7e)\n\nchore\n\nupdate dependencies (0f8ad66)\n\nFeatures\n\ndrop support for node 3903fb0)\n\nBREAKING CHANGES\n\nCHANGE\nnode 12.x, 13.x, 14.x, 15.x are no longer supported\nOnly version >= to latest LTS are now supported\nCHANGE\nDrop support for node 10.x and 11.x\n\nIf you are not using node 10 or 11 you can upgrade\nfrom 5.x to 6.x eyes closed 😘\n5.5.0 (2021-10-06)\nFeatures\n\nsupport AWS JSON 1.0 and 1.1 content-types (1811453)\n\n5.4.0 (2021-09-21)\nFeatures\n\nsupport buffer as response body (17368e6)\n\n5.3.14 (2021-08-03)\nAutomatic Dependencies Upgrade\n\n[security] bump tar from 4.4.13 to 4.4.15 (7522554)\n\n5.3.13 (2021-07-30)\nAutomatic Dependencies Upgrade\n\nbump chalk from 4.1.1 to 4.1.2 (1dfd2d6)\n\n5.3.12 (2021-06-14)\nAutomatic Dependencies Upgrade\n\n[security] bump normalize-url from 4.5.0 to 4.5.1 (341bc30)\n\n5.3.11 (2021-06-14)\nAutomatic Dependencies Upgrade\n\nbump chalk from 4.1.0 to 4.1.1 (b8103b1)\n\n5.3.10 (2021-06-12)\nAutomatic Dependencies Upgrade\n\n[security] bump handlebars from 4.7.6 to 4.7.7 (ff51a8f)\n\n5.3.9 (2021-06-12)\nAutomatic Dependencies Upgrade\n\n[security] bump trim-newlines from 3.0.0 to 3.0.1 (8824574)\n\n5.3.8 (2021-06-11)\nAutomatic Dependencies Upgrade\n\n[security] bump y18n from 3.2.1 to 3.2.2 (b92e576)\n\n5.3.7 (2021-06-11)\nAutomatic Dependencies Upgrade\n\n[security] bump hosted-git-info from 2.8.8 to 2.8.9 (828e4f8)\n\n5.3.6 (2021-06-11)\nAutomatic Dependencies Upgrade\n\n[security] bump ssri from 6.0.1 to 6.0.2 (474d3b3)\n\n5.3.5 (2021-06-11)\nBug Fixes\n\nres.write throwing error if body is null (d22119e)\n\n5.3.4 (2021-02-20)\nAutomatic Dependencies Upgrade\n\nbump lodash from 4.17.20 to 4.17.21 (fac4187)\n\n5.3.3 (2021-02-05)\nAutomatic Dependencies Upgrade\n\nbump @hapi/accept from 5.0.1 to 5.0.2 (5be48f0)\n\n5.3.2 (2020-12-21)\nAutomatic Dependencies Upgrade\n\n[security] bump node-notifier from 8.0.0 to 8.0.1 (5ea3da5)\n\n5.3.1 (2020-12-10)\nAutomatic Dependencies Upgrade\n\n[security] bump ini from 1.3.5 to 1.3.7 (1d45f92)\n\n5.3.0 (2020-11-18)\nFeatures\n\nadd title with request's method and path on logDiffOn501 (eba1ebe)\n\n5.2.2 (2020-10-17)\nAutomatic Dependencies Upgrade\n\n[security] bump npm-user-validate from 1.0.0 to 1.0.1 (4f53c32)\n\n5.2.1 (2020-09-11)\nAutomatic Dependencies Upgrade\n\n[security] bump node-fetch from 2.6.0 to 2.6.1 (e065d1a)\n\n5.2.0 (2020-08-27)\nFeatures\n\nallow to remove a route (9787627)\n\n5.1.4 (2020-08-15)\nAutomatic Dependencies Upgrade\n\nbump lodash from 4.17.19 to 4.17.20 (43acdba)\n\n5.1.3 (2020-07-08)\nAutomatic Dependencies Upgrade\n\nbump lodash from 4.17.18 to 4.17.19 (463449c)\n\n5.1.2 (2020-07-08)\nAutomatic Dependencies Upgrade\n\nbump lodash from 4.17.15 to 4.17.18 (0b3c577)\n\n5.1.1 (2020-07-07)\nAutomatic Dependencies Upgrade\n\n[security] bump npm from 6.14.5 to 6.14.6 (7df3365)\n\n5.1.0 (2020-06-26)\nFeatures\n\nadd logDiffon501 method to route (003d4ef)\n\n5.0.4 (2020-06-23)\nBug Fixes\n\nfix packaged files (56c446c)\n\n5.0.3 (2020-06-23)\nAutomatic Dependencies Upgrade\n\nbump dependencies (0de24fa)\n\n5.0.2 (2020-06-23)\nAutomatic Dependencies Upgrade\n\nbump chalk from 3.0.0 to 4.1.0 (c40f8a5)\n\n5.0.1 (2020-06-23)\nAutomatic Dependencies Upgrade\n\n[security] bump acorn from 5.7.3 to 5.7.4 (248fdf1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/@types/Emitter.ts\n            \n            interface\n            Emitter\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            BodyDefinitionArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            DiffError\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/@types/index.ts\n            \n            interface\n            JsonArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Route.ts\n            \n            class\n            Route\n            \n                47 %\n                (18/38)\n            \n        \n        \n            \n                \n                src/Router.ts\n            \n            function\n            findEndpointRouteDiffs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Router.ts\n            \n            function\n            registerLogDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Router.ts\n            \n            function\n            reply\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/Stubborn.ts\n            \n            class\n            Stubborn\n            \n                57 %\n                (15/26)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            EVENTS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            WILDCARD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/debug/Debugger.ts\n            \n            class\n            Debugger\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/debug/ErrorRenderer.ts\n            \n            class\n            ErrorRenderer\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/debug/Output.ts\n            \n            class\n            Output\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            function\n            bodyDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            function\n            rec\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/bodyDiff.ts\n            \n            variable\n            subject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/headersDiff.ts\n            \n            function\n            headersDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/headersDiff.ts\n            \n            function\n            keysToLowerCase\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/methodDiff.ts\n            \n            function\n            methodDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/pathDiff.ts\n            \n            function\n            pathDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            checkParameters\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            queryDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            function\n            validateQuery\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/queryDiff.ts\n            \n            variable\n            subject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/requestDiff.ts\n            \n            function\n            requestDiff\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkExtra\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkMissing\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            checkValues\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            differenceKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            findErrors\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            findErrorsObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            formatDiffError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            formatPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            intersectKeys\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/diff/utils.ts\n            \n            function\n            stringify\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/errors/InvalidRemoveAfterMatchingTimesParameterError.ts\n            \n            class\n            InvalidRemoveAfterMatchingTimesParameterError\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            _extend\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            arrayToHash\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatArray\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatPrimitive\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatProperty\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            formatValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            hasOwn\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            inspect\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isDate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isFunction\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isNull\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isNumber\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isRegExp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            isUndefined\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            objectToString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            reduceToSingleString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            stylizeNoColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/inspect.ts\n            \n            function\n            stylizeWithColor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middlewares/bodyMultipartFormData.ts\n            \n            function\n            streamToString\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            extractFileInfoFromStackLine\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            findCaller\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            logDiffOn501\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            variable\n            STUBBORN_SRC_DIR\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/accept : ^6.0.1\n        \n            body-parser : ^1.20.2\n        \n            chalk : ^4.1.0\n        \n            content-type : ^1.0.5\n        \n            lodash : ^4.17.15\n        \n            multiparty : ^4.2.3\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            DIFF_SUBJECTS   (src/.../constants.ts)\n                        \n                        \n                            DIFF_TYPES   (src/.../constants.ts)\n                        \n                        \n                            METHODS   (src/.../constants.ts)\n                        \n                        \n                            STATUS_CODES   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n            \n                \n                    \n                        \n                        DIFF_SUBJECTS\n                    \n                \n                        \n                            \n                                 METHOD\n                            \n                        \n                        \n                            \n                                Value : METHOD\n                            \n                        \n                        \n                            \n                                 HEADERS\n                            \n                        \n                        \n                            \n                                Value : HEADERS\n                            \n                        \n                        \n                            \n                                 PATH\n                            \n                        \n                        \n                            \n                                Value : PATH\n                            \n                        \n                        \n                            \n                                 QUERY\n                            \n                        \n                        \n                            \n                                Value : QUERY\n                            \n                        \n                        \n                            \n                                 BODY\n                            \n                        \n                        \n                            \n                                Value : BODY\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        DIFF_TYPES\n                    \n                \n                        \n                            \n                                 FAIL_EQUALITY\n                            \n                        \n                        \n                            \n                                Value : FAIL_EQUALITY\n                            \n                        \n                        \n                            \n                                 FAIL_MATCHING\n                            \n                        \n                        \n                            \n                                Value : FAIL_MATCHING\n                            \n                        \n                        \n                            \n                                 FAIL_FUNCTION\n                            \n                        \n                        \n                            \n                                Value : FAIL_FUNCTION\n                            \n                        \n                        \n                            \n                                 MISSING\n                            \n                        \n                        \n                            \n                                Value : MISSING\n                            \n                        \n                        \n                            \n                                 EXTRA\n                            \n                        \n                        \n                            \n                                Value : EXTRA\n                            \n                        \n                        \n                            \n                                 INVALID_VALUE_TYPE\n                            \n                        \n                        \n                            \n                                Value : INVALID_VALUE_TYPE\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        METHODS\n                    \n                \n                        \n                            \n                                 GET\n                            \n                        \n                        \n                            \n                                Value : GET\n                            \n                        \n                        \n                            \n                                 HEAD\n                            \n                        \n                        \n                            \n                                Value : HEAD\n                            \n                        \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : POST\n                            \n                        \n                        \n                            \n                                 PUT\n                            \n                        \n                        \n                            \n                                Value : PUT\n                            \n                        \n                        \n                            \n                                 PATCH\n                            \n                        \n                        \n                            \n                                Value : PATCH\n                            \n                        \n                        \n                            \n                                 DELETE\n                            \n                        \n                        \n                            \n                                Value : DELETE\n                            \n                        \n                        \n                            \n                                 OPTIONS\n                            \n                        \n                        \n                            \n                                Value : OPTIONS\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        STATUS_CODES\n                    \n                \n                        \n                            \n                                 SUCCESS\n                            \n                        \n                        \n                            \n                                Value : 200\n                            \n                        \n                        \n                            \n                                 BAD_REQUEST\n                            \n                        \n                        \n                            \n                                Value : 400\n                            \n                        \n                        \n                            \n                                 NOT_FOUND\n                            \n                        \n                        \n                            \n                                Value : 404\n                            \n                        \n                        \n                            \n                                 NOT_IMPLEMENTED\n                            \n                        \n                        \n                            \n                                Value : 501\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nStubborn\n \n\n\nStubborn web server to mock external api responses. It is basically nock meets Dyson. Stubborn will strictly match the requests based on the definition like nock but in a separate web server like Dyson.\n\n\n\nInstallation\nUsage\nAPI\nFAQ\nContributing\nRelease\n\n\n\n\n\nNode Support Policy\nWe will always support at least the latest Long-Term Support version of Node, but provide no promise of support for older versions. \nThe supported range will always be defined in the engines.node property of the package.json of our packages.\nWe specifically limit our support to LTS versions of Node, not because this package won't work on other versions, but because we have a limited amount of time, \nand supporting LTS offers the greatest return on that investment.\nIt's possible this package will work correctly on newer versions of Node. It may even be possible to use this package on older versions of Node, \nthough that's more unlikely as we'll make every effort to take advantage of features available in the oldest LTS version we support.\nAs new Node LTS versions become available we may remove previous versions from the engines.node property of our package's package.json file. \nRemoving a Node version is considered a breaking change and will entail the publishing of a new major version of this package.\nWe will not accept any requests to support an end-of-life version of Node. Any merge requests or issues supporting an end-of-life version of Node will be closed.\nWe will accept code that allows this package to run on newer, non-LTS, versions of Node. Furthermore, we will attempt to ensure our own changes work on the latest version of Node. \nTo help in that commitment, our continuous integration setup runs against all LTS versions of Node in addition the most recent Node release; called current.\nJavaScript package managers should allow you to install this package with any version of Node, with, at most, \na warning if your version of Node does not fall within the range specified by our node engines property. \nIf you encounter issues installing this package, please report the issue to your package manager.\nInstallation\nnpm install --save-dev stubborn-wsor\nyarn add -D stubborn-wsUsage\nStubborn is a testing tool that let you hot load and unload routes into a webserver.\nRequests are strictly matched against routes definitions based on Method, Path, Query parameters, Headers and Body.\nIf the request does not exactly match one route definition (ex: extra parameter, missing parameter, value does not match, etc), Stubborn will respond with a 501.\nThe very fact that Stubborn responds to the request validates that the parameters sent are the expected one, any change in the code that send the request will break the test. Any breaking change will be picked up by your test.\nStubborn response headers and body can be hardcoded or defined using a template.\nYou can find a complete working test suite of the following examples here.\nimport got from 'got';\nimport { Stubborn, STATUS_CODES, WILDCARD } from 'stubborn-ws';\n\ndescribe('Test', () => {\n  const sb = new Stubborn();\n\n  beforeAll(async () => await sb.start());\n  afterAll(async () => await sb.stop());\n\n  // Clean up all routes after a test if needed\n  afterEach(() => sb.clear());\n\n  it('should respond to query', async () => {\n    const body = { some: 'body' };\n    sb.get('/').setResponseBody({ some: 'body' });\n\n    const res = await request(`/`);\n\n    expect(res.statusCode).toBe(STATUS_CODES.SUCCESS);\n    expect(res.body).toEqual(body);\n  });\n\n  function request(path = '/', options = {}) {\n    return got(`${sb.getOrigin()}${path}`, {\n      method: 'GET',\n      responseType: 'json',\n      throwHttpErrors: false,\n      ...options,\n    });\n  }\n});Stubborn strictly matches the request against the route definition.\nIf a query parameter or a header is missing, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is missing', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`/`);\n\n  expect(res.statusCode).toEqual(STATUS_CODES.NOT_IMPLEMENTED);\n});If a query parameter or a header is added, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter is added', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`/?page=1&limit=10`);\n\n  expect(res.statusCode).toEqual(STATUS_CODES.NOT_IMPLEMENTED);\n});If a query parameter or a header does not match the route definition, stubborn will return a 501 (not implemented)\nit('should respond 501 if a parameter does not match the definition', async () => {\n  sb.get('/').setQueryParameters({ page: '1' });\n\n  const res = await request(`/?page=2`);\n\n  expect(res.statusCode).toEqual(STATUS_CODES.NOT_IMPLEMENTED);\n});You can use regex to match a parameter, header or body\nit('should match using a regexp', async () => {\n  sb.post('/', {\n    slug: /^[a-z\\-]*$/,\n  });\n\n  const res = await request(`/?page=2`, {\n    method: 'POST',\n    json: { slug: 'stubborn-ws' },\n  });\n\n  expect(res.statusCode).toEqual(200);\n});You can use a function to match a parameter, header or body\nimport { STATUS_CODES } from 'stubborn-ws';\nit('should match using a function', async () => {\n  sb.get('/').setQueryParameters({\n    page: value => parseInt(value as string) > 0,\n  });\n\n  const res = await request(`/?page=2`);\n\n  expect(res.statusCode).toBe(STATUS_CODES.SUCCESS);\n});Although this is not advised, you can use the WILDCARD constant to match any values:\nimport { WILDCARD } from 'stubborn-ws';\nit('should match using wildcard', async () => {\n  sb.get('/').setQueryParameters({ page: WILDCARD }).setHeaders(WILDCARD);\n\n  const res = await request(`/?page=2`, {\n    headers: { 'x-api-key': 'api key', 'any-other-header': 'stuff' },\n  });\n\n  expect(res.statusCode).toEqual(STATUS_CODES.SUCCESS);\n});Public API\nSee the API documentation\nFAQ\nQ: Stubborn is not matching my route definition and always return a 501\nStubborn is STUBBORN, therefore it will return a 501 if it does not exactly match the route definition you have set up.\nTo help you find what missing in the route definition, you can compare it to the response body returned when receiving a 501 using the logDiff() method of a route:\nconst route = sb\n  .get('/')\n  // This header definition will miss additional header added by got, like user-agent, connexion, etc...\n  .setHeaders({ 'X-Api-Key': 'test' })\n  // Will log in console the diff between the route and any request throwing a 501\n  .logDiffOn501();\n\nconst res = await request(sb.getOrigin(), {\n  headers: { 'x-api-key': 'api key' },\n});\n\nexpect(res.statusCode).toBe(501);Q: How do I know if stubborn has been called and matched the route defined?\nStubborn will return a 501 (Not Implemented) if it received a request but cannot match any route.\nIf the request matches the route it will respond according to the route response configuration and update the call property of the route\n  async function call() {\n    return request(sb.getOrigin());\n  }\n\n  // No route setup in Stubborn\n  const res = await call();\n\n  expect(res.statusCode).toBe(501);\n  expect(res.body).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n    // ...\n  });\n\n\n  const route = sb.get('/')\n    .setHeaders(null)\n    .setResponseBody('content');\n\n\n  const res = await call();\n  expect(res.calls.length).toBe(1);\n  expect(res.calls[0]).toEqual({\n    method: 'GET'\n    path: '/',\n    headers: {\n      // ...\n    }\n      // ...\n    });Q: Can I send the same request multiple times and have different response?\nStubborn returns the first route that match a request even if multiple routes could match that request.\nUsing Route.removeRouteAfterMatching you can tell stubborn to remove a route from the router, and if another route matching then it will be used.\n// First return a 400\nsb.addRoute(\n  new Route(METHODS.GET, '/')\n    .setResponseStatusCode(400)\n    .removeRouteAfterMatching({ times: 1 }), // Match one time then remove\n);\n\n// Then return a 500\nsb.addRoute(\n  new Route(METHODS.GET, '/')\n    .setResponseStatusCode(500)\n    .removeRouteAfterMatching({ times: 1 }), // Match one time then remove\n);\n\n// Finally always return 200\nsb.addRoute(\n  new Route(METHODS.GET, '/').setResponseStatusCode(200),\n);\n\n// First call match the first route, then the route is removed\nexpect(await httpClient.request({ path: '/' })).toReplyWith({\n  status: 400,\n});\n\n// Second call match the second route, then the route is removed\nexpect(await httpClient.request({ path: '/' })).toReplyWith({\n  status: 500,\n});\n\n// Any subsequent calls match the last route which is never removed\nexpect(await httpClient.request({ path: '/' })).toReplyWith({\n  status: 200,\n});\n\nexpect(await httpClient.request({ path: '/' })).toReplyWith({\n  status: 200,\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 7.1.1\n        \n            Description : Web server to mock external HTTP APIs in tests\n        \n            Keywords : stubborn, test, test api, testing, testing web server, nock, dyson, jest, jasmine, mocha\n        \n            Homepage : https://github.com/ybonnefond/stubborn#stubborn\n        \n            License : MIT\n        \n            Repository : https://github.com/ybonnefond/stubborn.git\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BodyDefinition   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionObject   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionPrimitive   (src/.../index.ts)\n                        \n                        \n                            BodyDefinitionValue   (src/.../index.ts)\n                        \n                        \n                            DefinitionMatcher   (src/.../index.ts)\n                        \n                        \n                            DefinitionValue   (src/.../index.ts)\n                        \n                        \n                            HeaderDefinition   (src/.../index.ts)\n                        \n                        \n                            HeadersDefinition   (src/.../index.ts)\n                        \n                        \n                            JsonObject   (src/.../index.ts)\n                        \n                        \n                            JsonPrimitive   (src/.../index.ts)\n                        \n                        \n                            JsonValue   (src/.../index.ts)\n                        \n                        \n                            LineInfo   (src/.../LineInfo.ts)\n                        \n                        \n                            MatchFunction   (src/.../index.ts)\n                        \n                        \n                            MethodDefinition   (src/.../index.ts)\n                        \n                        \n                            Middleware   (src/.../index.ts)\n                        \n                        \n                            NextFunction   (src/.../index.ts)\n                        \n                        \n                            ObjectOrArray   (src/.../utils.ts)\n                        \n                        \n                            PathDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryParameterDefinition   (src/.../index.ts)\n                        \n                        \n                            QueryParameterDefinitionPrimitives   (src/.../index.ts)\n                        \n                        \n                            Request   (src/.../index.ts)\n                        \n                        \n                            RequestBody   (src/.../index.ts)\n                        \n                        \n                            RequestHash   (src/.../index.ts)\n                        \n                        \n                            RequestHeaders   (src/.../index.ts)\n                        \n                        \n                            RequestInfo   (src/.../index.ts)\n                        \n                        \n                            RequestInfoWithSearchParam   (src/.../index.ts)\n                        \n                        \n                            RequestMatcher   (src/.../index.ts)\n                        \n                        \n                            RequestMethod   (src/.../index.ts)\n                        \n                        \n                            RequestPath   (src/.../index.ts)\n                        \n                        \n                            RequestQuery   (src/.../index.ts)\n                        \n                        \n                            Response   (src/.../index.ts)\n                        \n                        \n                            ResponseBody   (src/.../index.ts)\n                        \n                        \n                            ResponseDefinition   (src/.../index.ts)\n                        \n                        \n                            ResponseHeaders   (src/.../index.ts)\n                        \n                        \n                            StubbornOptions   (src/.../Stubborn.ts)\n                        \n                        \n                            Template   (src/.../index.ts)\n                        \n                        \n                            TemplateArray   (src/.../index.ts)\n                        \n                        \n                            TemplateFunction   (src/.../index.ts)\n                        \n                        \n                            TemplateObject   (src/.../index.ts)\n                        \n                        \n                            ValidateFn   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/@types/index.ts\n    \n    \n        \n            \n                \n                    \n                    BodyDefinition\n                \n            \n            \n                \n                        undefined | BodyDefinitionValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionPrimitive\n                \n            \n            \n                \n                        DefinitionMatcher | JsonValue\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    BodyDefinitionValue\n                \n            \n            \n                \n                            BodyDefinitionPrimitive | BodyDefinitionObject | BodyDefinitionArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DefinitionMatcher\n                \n            \n            \n                \n                            RegExp | MatchFunction | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DefinitionValue\n                \n            \n            \n                \n                            DefinitionMatcher | JsonValue | undefined | METHODS\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeaderDefinition\n                \n            \n            \n                \n                            DefinitionMatcher | string | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    HeadersDefinition\n                \n            \n            \n                \n                            Record | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonPrimitive\n                \n            \n            \n                \n                        string | number | boolean | null\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    JsonValue\n                \n            \n            \n                \n                            JsonPrimitive | JsonObject | JsonArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MatchFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    MethodDefinition\n                \n            \n            \n                \n                            METHODS\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Middleware\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NextFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    PathDefinition\n                \n            \n            \n                \n                            DefinitionMatcher | string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryDefinition\n                \n            \n            \n                \n                            Record | \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryParameterDefinition\n                \n            \n            \n                \n                        QueryParameterDefinitionPrimitives | QueryParameterDefinitionPrimitives[]\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    QueryParameterDefinitionPrimitives\n                \n            \n            \n                \n                            DefinitionMatcher | string | number\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Request\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestBody\n                \n            \n            \n                \n                            JsonValue | undefined\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestHash\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestHeaders\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestInfoWithSearchParam\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMatcher\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestMethod\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestPath\n                \n            \n            \n                \n                            string\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    RequestQuery\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Response\n                \n            \n            \n                \n                            ServerResponse\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseBody\n                \n            \n            \n                \n                            JsonValue | Buffer\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseDefinition\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResponseHeaders\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Template\n                \n            \n            \n                \n                        JsonValue | TemplateFunction | TemplateObject | TemplateArray\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateArray\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateFunction\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TemplateObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/@types/LineInfo.ts\n    \n    \n        \n            \n                \n                    \n                    LineInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/diff/utils.ts\n    \n    \n        \n            \n                \n                    \n                    ObjectOrArray\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValidateFn\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/Stubborn.ts\n    \n    \n        \n            \n                \n                    \n                    StubbornOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EVENTS   (src/.../constants.ts)\n                        \n                        \n                            STUBBORN_SRC_DIR   (src/.../utils.ts)\n                        \n                        \n                            subject   (src/.../bodyDiff.ts)\n                        \n                        \n                            subject   (src/.../queryDiff.ts)\n                        \n                        \n                            WILDCARD   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EVENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  NOT_IMPLEMENTED: Symbol.for('NOT_IMPLEMENTED'),\n  CLEARED: Symbol.for('CLEARED'),\n  REPLIED: Symbol.for('REPLIED'),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        WILDCARD\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol.for('WILDCARD')\n                    \n                \n\n\n        \n    \n\n    src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        STUBBORN_SRC_DIR\n                        \n                    \n                \n            \n                \n                    \n                        Default value : __dirname\n                    \n                \n\n\n        \n    \n\n    src/diff/bodyDiff.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : DIFF_SUBJECTS.BODY\n                    \n                \n\n\n        \n    \n\n    src/diff/queryDiff.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Default value : DIFF_SUBJECTS.QUERY\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
